let IInterview = 'IInterview_Log, IInterview_SnapForward, IInterview_Suspend, IInterview_Terminate, IInterview_Banners, IInterview_DefaultStyles, IInterview_Errors, IInterview_GlobalQuestions, IInterview_Info, IInterview_InterviewStatus, IInterview_MDM, IInterview_MessagesDocument, IInterview_Navigations, IInterview_NextPage, IInterview_Objects, IInterview_Pages, IInterview_ProjectName, IInterview_Properties, IInterview_Questions, IInterview_QuotaEngine, IInterview_RoutingContext, IInterview_SampleRecord, IInterview_SavePoints, IInterview_SessionToken, IInterview_Texts, IInterview_Title, IInterview_Version, IInterview_AutoSelectOther, IInterview_BannerTemplate, IInterview_Context, IInterview_ErrorTemplate, IInterview_GlobalQuestionPosition, IInterview_GridTemplate, IInterview_LabelType, IInterview_Language, IInterview_LayoutTemplate, IInterview_Locale, IInterview_MustAnswer, IInterview_NavBarTemplate, IInterview_OffPathDataMode, IInterview_QuestionTemplate'
let IAudioStyle = 'IAudioStyle_IsEmpty, IAudioStyle_Name, IAudioStyle_PlayControlPosition, IAudioStyle_Record, IAudioStyle_RecordControlPosition'
let ICategories = 'ICategories_Count, ICategories_Filter, ICategories_Item, ICategories_Order'
let ICategory = 'ICategory_Attributes, ICategory_Categories, ICategory_CategoryType, ICategory_Count, ICategory_Factor, ICategory_FullName, ICategory_Index, ICategory_KeyCode, ICategory_Label, ICategory_Name, ICategory_OtherQuestion, ICategory_Parent, ICategory_Properties, ICategory_Style, ICategory_Value, ICategory_Filter, ICategory_Item, ICategory_Order'
let ICategoryStyle = 'ICategoryStyle_Label, ICategoryStyle_Style'
let ICategoryStyles = 'ICategoryStyles_Count, ICategoryStyles_Item'
let ICellStyle = 'ICellStyle_IsEmpty, ICellStyle_BgColor, ICellStyle_BorderBottomColor, ICellStyle_BorderBottomStyle, ICellStyle_BorderBottomWidth, ICellStyle_BorderColor, ICellStyle_BorderLeftColor, ICellStyle_BorderLeftStyle, ICellStyle_BorderLeftWidth, ICellStyle_BorderRightColor, ICellStyle_BorderRightStyle, ICellStyle_BorderRightWidth, ICellStyle_BorderStyle, ICellStyle_BorderTopColor, ICellStyle_BorderTopStyle, ICellStyle_BorderTopWidth, ICellStyle_BorderWidth, ICellStyle_ColSpan, ICellStyle_Height, ICellStyle_Padding, ICellStyle_PaddingBottom, ICellStyle_PaddingLeft, ICellStyle_PaddingRight, ICellStyle_PaddingTop, ICellStyle_RepeatHeader, ICellStyle_RepeatSideHeader, ICellStyle_RowSpan, ICellStyle_Width, ICellStyle_Wrap'
let IControlStyle = 'IControlStyle_IsEmpty, IControlStyle_Accelerator, IControlStyle_ReadOnly, IControlStyle_Type'
let IDefaultStyles = 'IDefaultStyles_Categories, IDefaultStyles_Default, IDefaultStyles_Grids, IDefaultStyles_Labels, IDefaultStyles_Navigation, IDefaultStyles_Questions'
let IFontStyle = 'IFontStyle_IsEmpty, IFontStyle_Effects, IFontStyle_Family, IFontStyle_Size'
let IGlobalQuestions = 'IGlobalQuestions_Add, IGlobalQuestions_Clear, IGlobalQuestions_Remove, IGlobalQuestions_Count, IGlobalQuestions_Item'
let IInterviewEngine = 'IInterviewEngine_Create, IInterviewEngine_PostSingleQuestion, IInterviewEngine_Prepare, IInterviewEngine_IsLicensed, IInterviewEngine_Name, IInterviewEngine_ScriptEngine, IInterviewEngine_ParseOptions'
let IInterviewInfo = 'IInterviewInfo_Browser, IInterviewInfo_BrowserCapabilities, IInterviewInfo_DataEntryMode, IInterviewInfo_ElapsedTime, IInterviewInfo_InterviewerID, IInterviewInfo_InterviewMode, IInterviewInfo_IsAutoAnswer, IInterviewInfo_IsDebug, IInterviewInfo_IsRestart, IInterviewInfo_IsReview, IInterviewInfo_LastAsked, IInterviewInfo_LastAskedTime, IInterviewInfo_Origin, IInterviewInfo_OriginName, IInterviewInfo_PagesAnswered, IInterviewInfo_PagesAsked, IInterviewInfo_RandomSeed, IInterviewInfo_RespondentID, IInterviewInfo_ReversalSeed, IInterviewInfo_RotationSeed, IInterviewInfo_ServerTime, IInterviewInfo_ServerTimeZone, IInterviewInfo_StartTime, IInterviewInfo_Timeouts, IInterviewInfo_BatchID, IInterviewInfo_BatchName, IInterviewInfo_EstimatedPages, IInterviewInfo_EstimatedProgress, IInterviewInfo_InterviewerTimeZone, IInterviewInfo_IsRemoved, IInterviewInfo_IsTest, IInterviewInfo_MaxOpcodesExecuted, IInterviewInfo_MaxQuestionsOnReplay, IInterviewInfo_MaxTestErrors, IInterviewInfo_Renderer, IInterviewInfo_RespondentTimeZone, IInterviewInfo_Serial, IInterviewInfo_UseKeyCodes, IInterviewInfo_UsePlayerNavigation, IInterviewInfo_User1, IInterviewInfo_User2, IInterviewInfo_User3, IInterviewInfo_User4, IInterviewInfo_User5, IInterviewInfo_User6, IInterviewInfo_User7, IInterviewInfo_User8, IInterviewInfo_User9'
let IInterviewLog = 'IInterviewLog_Log, IInterviewLog_LogEvent, IInterviewLog_LogThis, IInterviewLog_LogThisEx, IInterviewLog_Trace, IInterviewLog_IsActive, IInterviewLog_IsTraceEnabled, IInterviewLog_InterviewID, IInterviewLog_Project, IInterviewLog_RespondentID'
let IInterviewSampleField = 'IInterviewSampleField_Name, IInterviewSampleField_Value'
let IInterviewSampleRecord = 'IInterviewSampleRecord_Count, IInterviewSampleRecord_Item'
let ILabel = 'ILabel_Inserts, ILabel_Name, ILabel_Style, ILabel_Text'
let ILabelInsert = 'ILabelInsert_Name, ILabelInsert_Text'
let ILabelInserts = 'ILabelInserts_Count, ILabelInserts_Item'
let ILabels = 'ILabels_Add, ILabels_AddNew, ILabels_Clear, ILabels_Remove, ILabels_Count, ILabels_Item'
let IMRCacheObject = 'IMRCacheObject_Attach, IMRCacheObject_Detach, IMRCacheObject_Load, IMRCacheObject_Save, IMRCacheObject_CacheObjectID, IMRCacheObject_CacheObjectName, IMRCacheObject_CacheObjectVariable, IMRCacheObject_IsCacheVariableCreated, IMRCacheObject_ObjectCachingProvider, IMRCacheObject_ParentVariable'
let INavigation = 'INavigation_Style, INavigation_Targets, INavigation_Type, INavigation_Label'
let INavigations = 'INavigations_Add, INavigations_Remove, INavigations_Count, INavigations_Item, INavigations_Default, INavigations_LastSelected'
let INextPage = 'INextPage_Banners, INextPage_Errors, INextPage_Navigations, INextPage_RoutingContext, INextPage_Styles, INextPage_Title, INextPage_Label, INextPage_Language, INextPage_LayoutTemplate, INextPage_MustAnswer'
let IObjectCachingProvider = 'IObjectCachingProvider_Load, IObjectCachingProvider_Save, IObjectCachingProvider_Name'
let IObjects = 'Operations_AddNew, Operations_Clear, Operations_MethodRemove, Operations_Count, Operations_Item, Operations_Name'
let IPersistXML = 'IPersistXML_GetProgID, IPersistXML_Load, IPersistXML_LoadXML, IPersistXML_Save, IPersistXML_XML'
let IPersistXMLDOM = 'IPersistXMLDOM_Load, IPersistXMLDOM_Save'
let IProperty = 'IProperty_CopyTo, IProperty_Copy, IProperty_Name, IProperty_Value'
let IProperties = 'IProperties_Add, IProperties_CopyTo, IProperties_CreateProperty, IProperties_Item, IProperties_Remove, IProperties_Copy, IProperties_Count'
let IPropertiesEx = 'IPropertiesEx_AddNew, IPropertiesEx_CreateProperties, IPropertiesEx_RemoveByName, IPropertiesEx_IProperties, IPropertiesEx_Add, IPropertiesEx_CopyTo, IPropertiesEx_CreateProperty, IPropertiesEx_Item, IPropertiesEx_Remove, IPropertiesEx_Copy, IPropertiesEx_Count, IPropertiesEx_Values'
let IQuestion = 'IQuestion_Ask, IQuestion_BuildDBFilter, IQuestion_ClearOffPathResponse, IQuestion_Delete, IQuestion_Exists, IQuestion_Preserve, IQuestion_Show, IQuestion_Banners, IQuestion_Categories, IQuestion_Codes, IQuestion_Count, IQuestion_Errors, IQuestion_Info, IQuestion_IsDBQuestion, IQuestion_Label, IQuestion_OtherCategories, IQuestion_ParentQuestion, IQuestion_Properties, IQuestion_QuestionDataType, IQuestion_QuestionFullName, IQuestion_QuestionName, IQuestion_QuestionType, IQuestion_Response, IQuestion_Style, IQuestion_Validation, IQuestion_BannerTemplate, IQuestion_DBFilter, IQuestion_ErrorTemplate, IQuestion_Item, IQuestion_LayoutTemplate, IQuestion_MustAnswer, IQuestion_NavBarTemplate, IQuestion_QuestionFilter, IQuestion_QuestionOrder, IQuestion_QuestionTemplate'
let IQuestionInfo = 'IQuestionInfo_AnswerCount, IQuestionInfo_AskCount, IQuestionInfo_ErrorCount, IQuestionInfo_IsOnPath, IQuestionInfo_OffPathCodedResponse, IQuestionInfo_OnPathAnswerCount, IQuestionInfo_, IQuestionInfo_OffPathResponse'
let IQuestions = 'IQuestions_Count, IQuestions_Item'
let IQuestionStyle = 'IQuestionStyle_Categories, IQuestionStyle_Labels, IQuestionStyle_Style'
let IQuestionStyles = 'IQuestionStyles_Count, IQuestionStyles_Item'
let IResponse = 'IResponse_Label, IResponse_Name, IResponse_Other, IResponse_Coded, IResponse_DataType, IResponse_Default, IResponse_Initial, IResponse_IsDirty, IResponse_Value, IResponse_ValueObj'
let IResponses = 'IResponses_Count, IResponses_Item'
let IRunningInterview = 'IRunningInterview_BindQuestionToIdentifier, IRunningInterview_Close, IRunningInterview_GenerateEndOfInterviewText, IRunningInterview_Post, IRunningInterview_Replay, IRunningInterview_Stop, IRunningInterview_CacheSubscription, IRunningInterview_CurrentQuestion, IRunningInterview_HasSampleRecord, IRunningInterview_InputLocaleId, IRunningInterview_InterviewProperties, IRunningInterview_InterviewScriptingObject, IRunningInterview_InterviewScriptProgram, IRunningInterview_InterviewStatus, IRunningInterview_MDMDocument, IRunningInterview_MessagesDocument, IRunningInterview_OutputLocaleId, IRunningInterview_ProjectName, IRunningInterview_SessionToken, IRunningInterview_TerminateSignal, IRunningInterview_InterviewerSessionToken, IRunningInterview_QuotaEngine, IRunningInterview_SampleRecordXML, IRunningInterview_SampleRecordXMLDocument, IRunningInterview_ValidateResponses'
let IRunningInterviews = 'IRunningInterviews_Add, IRunningInterviews_GetTimedOutInterview, IRunningInterviews_Remove, IRunningInterviews_RemoveTimedOutInterview, IRunningInterviews_Count, IRunningInterviews_Item'
let ISavePoint = 'ISavePoint_Go, ISavePoint_Label, ISavePoint_Name'
let ISavePoints = 'ISavePoints_Count, ISavePoints_Item, ISavePoints_UseQuestionLabels'
let IStandardTexts = 'IStandardTexts_EndOfInterview, IStandardTexts_InterviewStopped'
let IStyle = 'IStyle_CopyTo, IStyle_Audio, IStyle_Cell, IStyle_Control, IStyle_Font, IStyle_IsEmpty, IStyle_Parent, IStyle_Align, IStyle_BgColor, IStyle_Color, IStyle_Columns, IStyle_Cursor, IStyle_ElementAlign, IStyle_Height, IStyle_Hidden, IStyle_Image, IStyle_ImagePosition, IStyle_Indent, IStyle_Orientation, IStyle_Rows, IStyle_UseCascadedStyles, IStyle_VerticalAlign, IStyle_Width, IStyle_ZIndex'
let IStyles = 'IStyles_Count, IStyles_Item'
let IValidation = 'IValidation_Validate, IValidation_Options, IValidation_Function, IValidation_MaxValue, IValidation_MinValue, IValidation_Precision, IValidation_Scale, IValidation_ValidateExpression'
let IValidationOption = 'IValidationOption_Name, IValidationOption_Value'
let IValidationOptions = 'IValidationOptions_Count, IValidationOptions_Item'
let IValue = 'IValue_AppendChunk, IValue_Clear, IValue_GetChunk, IValue_Attributes, IValue_IsDirty, IValue_Type, IValue_Value'
let IValueAttribute = 'IValueAttribute_Name, IValueAttribute_Value'
let IValueAttributes = 'IValueAttributes_Count, IValueAttributes_Item'

let iomData = [
    {id:'Log',group:'IInterview',sub:'',descr:{name:'Log',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Log</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Message As String</P>|n');" onmouseout="return clearpopup();">Message</span> As String, Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Level As LogLevels = lgScript</P>|n');" onmouseout="return clearpopup();">Level</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>LogLevels</P>|n<P CLASS=PopupDeclaration>typedef enum LogLevels</P>|n<P CLASS=PopupNormal>Log levels.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('LogLevels.html#3ca5740x4693654')">LogLevels</a></span> = lgScript )</p><br><p class="Normal">Logs a message to the interview log.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Log</span> method takes the supplied message string and logs the message, together with survey name, the respondent ID, the interview ID, and the log entry level.  By default the log level will be LogLevelScript.  A different logging level can be specified using the optional <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Level As LogLevels = lgScript</P>|n');" onmouseout="return clearpopup();">Level</span> parameter:</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SnapForward',group:'IInterview',sub:'',descr:{name:'SnapForward',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">SnapForward</span>( )</p><br><p class="Normal">Causes the script to automatically run until a question is encountered that does not have an answer.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This does mean that if the user was previously positioned at a question 'Show', the interview is run until a question with a NULL value is asked.  The <span class="LocalReference">SnapForward</span> method emulates the re-start functionality from mrInterview 1.0.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Suspend',group:'IInterview',sub:'',descr:{name:'Suspend',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Suspend</span>( )</p><br><p class="Normal">The <span class="LocalReference">Suspend</span> method suspends the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Unlike the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Terminate</P>|n<P CLASS=PopupDeclaration>Sub Terminate( Optional ByVal Signal As Long = 0,|n                Optional ByVal WriteData As Boolean = -1,|n                Optional ByVal Status As TerminateStatus = tsScriptStopped )</P>|n<P CLASS=PopupNormal>Terminates the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Terminate.html#3ca5740x4a25fac')">Terminate</a></span> method, the <span class="LocalReference">Suspend</span> method does not clear the state cache for the interview.  This method would typically be used in conjunction with sample management to re-schedule an interview.  The <span class="LocalReference">Suspend</span> method has fewer uses in Web based interviewing where outbound interviewing is not performed.</p><br><p class="Normal">NOTE: All quotas are left pending when <span class="LocalReference">Suspend</span> is called.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Terminate',group:'IInterview',sub:'',descr:{name:'Terminate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Terminate</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Signal As Long = 0</P>|n');" onmouseout="return clearpopup();">Signal</span> As Long = 0,<br>                Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal WriteData As Boolean = -1</P>|n');" onmouseout="return clearpopup();">WriteData</span> As Boolean = -1,<br>                Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Status As TerminateStatus = tsScriptStopped</P>|n');" onmouseout="return clearpopup();">Status</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>TerminateStatus</P>|n<P CLASS=PopupDeclaration>typedef enum TerminateStatus</P>|n<P CLASS=PopupNormal>Terminate status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('TerminateStatus.html#3ca5740x46953b0')">TerminateStatus</a></span> = tsScriptStopped )</p><br><p class="Normal">Terminates the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Terminate</span> method takes three optional parameters; the first parameter is the value used as the signal (return code) to sample management, the second parameter indicates whether to write the data, and the third parameter is used to set the final interview status.  By default, the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Signal As Long = 0</P>|n');" onmouseout="return clearpopup();">Signal</span> parameter is set to 0, the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal WriteData As Boolean = -1</P>|n');" onmouseout="return clearpopup();">WriteData</span> parameter is set to True, and the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Status As TerminateStatus = tsScriptStopped</P>|n');" onmouseout="return clearpopup();">Status</span> parameter is set to ScriptStopped.</p><br><p class="Normal">When <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal WriteData As Boolean = -1</P>|n');" onmouseout="return clearpopup();">WriteData</span> is set to True, any unwritten data is saved and the interview status is set to that defined by the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Status As TerminateStatus = tsScriptStopped</P>|n');" onmouseout="return clearpopup();">Status</span> parameter.  Specifying a value of False for <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal WriteData As Boolean = -1</P>|n');" onmouseout="return clearpopup();">WriteData</span> is not currently supported.</p><br><p class="Normal">The signal (return code) values passed to Sample Management can be any value as defined by the sample management script.  If <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Signal As Long = 0</P>|n');" onmouseout="return clearpopup();">Signal</span> is specified as 0, the return code is based on the terminate status; 1 for <a href="javascript:openBody('TerminateStatus.html#3ca5740x46953b0')">tsCompleted</a>, and 2 for <a href="javascript:openBody('TerminateStatus.html#3ca5740x46953b0')">tsScriptStopped</a>.</p><br><p class="Normal">If auto complete quotas are set for the interview, quotas are automatically completed when the interview data is written and the interview status is set to Completed.  If the interview data is not written, then the quotas are rolled back.  If the interview status is set to ScriptStopped, then the quotas are rolled back.</p><br><p class="Normal">As part of interview termination, the interview state cache is cleared for the interview.  However, as long as the data for the interview is written, a re-start could be performed.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Banners',group:'IInterview',sub:ILabels,descr:{name:'Banners',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Banners</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p><br><p class="Normal">A read-only property that returns a collection of Label objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The collection supports the standard collection properties and methods: Item, Count, and _NewEnum.  The collection also supports Add and Remove banners.  Like the title property, banners are visible on all pages in the interview.  The <span class="LocalReference">Banners</span> object delivers equivalent functionality to the PROTECT and UNPROTECT statements in Quancept.</p><br><p class="Subheading">Example</p><br><pre>' <span class="LocalReference">Banners</span> Example: Adding a banner to the interview<br>' NOTE: For localization, the banner text is in an <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Info</P>|n<P CLASS=PopupDeclaration>Property Info As IInterviewInfo</P>|n<P CLASS=PopupNormal>This read-only property returns paradata relating to the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Info.html#3ca5740x4a25450')">Info</a></span><br>IOM.<span class="LocalReference">Banners</span>.Add("SECTION", infoClassificationSection.Label)<br>Gender.Ask()<br>IOM.<span class="LocalReference">Banners</span>.Remove("SECTION")<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'DefaultStyles',group:'IInterview',sub:IDefaultStyles,descr:{name:'DefaultStyles',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DefaultStyles</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IDefaultStyles</P>|n<P CLASS=PopupNormal>The DefaultStyle object is used to define the default presentation styles used by the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IDefaultStyles.html#3ca4a98x4a22764')">IDefaultStyles</a></span></p><br><p class="Normal">This property returns the default presentation styles used by the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Default styles can be set for each type of label, question, category, and navigation.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Errors',group:'IInterview',sub:ILabels,descr:{name:'Errors',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Errors</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p><br><p class="Normal">Reserved for future use</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GlobalQuestions',group:'IInterview',sub:IGlobalQuestions,descr:{name:'GlobalQuestions',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">GlobalQuestions</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IGlobalQuestions</P>|n<P CLASS=PopupNormal>IGlobalQuestions is the collection of Questions to show at the top of each page of the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IGlobalQuestions.html#3ca4a98x4a24c1c')">IGlobalQuestions</a></span></p><br><p class="Normal">The questions to be displayed at the top of each page.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Info',group:'IInterview',sub:IInterviewInfo,descr:{name:'Info',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Info</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IInterviewInfo</P>|n<P CLASS=PopupNormal>The InterviewInfo object provides information about the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewInfo.html#3ca4a98x4a2901c')">IInterviewInfo</a></span></p><br><p class="Normal">This read-only property returns paradata relating to the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewStatus',group:'IInterview',sub:'',descr:{name:'InterviewStatus',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span></p><br><p class="Normal">The interview status.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The interview status is generally <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isPost</a> while the interview is running.  Other status codes are possible in the OnInterviewEnd event.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MDM',group:'IInterview',sub:'',descr:{name:'MDM',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MDM</span> As IDispatch</p><br><p class="Normal">A read-only property that returns the <span class="LocalReference">MDM</span> document for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The entire document is marked as read-only so that versioned objects cannot be modified.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MessagesDocument',group:'IInterview',sub:'',descr:{name:'MessagesDocument',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MessagesDocument</span> As IDispatch</p><br><p class="Normal">The metadata document containing standard texts</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Navigations',group:'IInterview',sub:INavigations,descr:{name:'Navigations',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigations</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>INavigations</P>|n<P CLASS=PopupNormal>A collection object that contains the navigations defined for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations.html#3ca4a98x4a31f80')">INavigations</a></span></p><br><p class="Normal">This property that returns a read-only collection of Navigation objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The collection contains a navigation object for each of the navigation controls available.  The navigation collection is used to add, remove and modify navigation controls for the interview.  The <span class="LocalReference">Navigations</span> object also supports a Default property that is used to set the default navigation object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'NextPage',group:'IInterview',sub:INextPage,descr:{name:'NextPage',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">NextPage</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>INextPage</P>|n<P CLASS=PopupNormal>The NextPage object is used to manage the next page in the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage.html#3ca4a98x4a32370')">INextPage</a></span></p><br><p class="Normal">A read-only property that returns a page object for the next page.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">NextPage</span> object is used to override properties for titles, banners, styles, and navigation controls.  For example, using the <span class="LocalReference">NextPage</span> object, it is possible to remove a navigation control, just for the next page.  In the subsequent page it would automatically be added back in.</p><br><p class="Subheading">Example</p><br><pre>' Page Example: Remove the previous button for the next page<br>IOM.<span class="LocalReference">NextPage</span>.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Navigations</P>|n<P CLASS=PopupDeclaration>Property Navigations As INavigations</P>|n<P CLASS=PopupNormal>This property that returns a read-only collection of Navigation objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Navigations.html#3ca5740x4a2596c')">Navigations</a></span>.Remove("Previous")' Alternatively, the previous navigation control could have<br>' been removed for the entire interview<br>IOM. <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Navigations</P>|n<P CLASS=PopupDeclaration>Property Navigations As INavigations</P>|n<P CLASS=PopupNormal>This property that returns a read-only collection of Navigation objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Navigations.html#3ca5740x4a2596c')">Navigations</a></span>.Remove("Previous")<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Objects',group:'IInterview',sub:IObjects,descr:{name:'Objects',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Objects</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IObjects</P>|n<P CLASS=PopupNormal>A collection of external objects</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IObjects.html#3ca4a98x4a32a78')">IObjects</a></span></p><br><p class="Normal">This contains any objects that were created on interview start.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The interview objects collection is read-only in the main interview script.  <span class="LocalReference">Objects</span> are added to it as part of the OnInterviewStart event.  This event is used to create and recreate any objects that need to exist for the life-time of the interview.  E.g. An ADO Recordset could be created and added to the object collection so that it was available for the entire interview, even when interview re-starts occurred.</p><br><p class="Normal">The <span class="LocalReference">Objects</span> collection can not be used to store simple numeric, date, or text data values.  The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Properties</P>|n<P CLASS=PopupDeclaration>Property Properties As IProperties</P>|n<P CLASS=PopupNormal>A read-only property that returns the properties for the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Properties.html#3ca5740x4a25bc4')">IInterview.Properties</a></span> can be used to store simple data values.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Pages',group:'IInterview',sub:IQuestions,descr:{name:'Pages',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Pages</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestions</P>|n<P CLASS=PopupNormal>A collection object that contains the questions for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestions.html#3ca4a98x468f61c')">IQuestions</a></span></p><br><p class="Normal">A read-only collection of Question objects representing the <span class="LocalReference">Pages</span> of the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Questions</P>|n<P CLASS=PopupDeclaration>Property Questions As IQuestions</P>|n<P CLASS=PopupNormal>This property that returns a read-only collection of Question objects.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Questions.html#3ca5740x4a25c8c')">Questions</a></span> property is a collection of the questions in the interview. Some of these questions may have been grouped in the metadata into pages.</p><br><p class="Normal">This property provides a mechanism for iterating through all the pages in the interview.</p><br><p class="Subheading">Example</p><br><pre>' Syntax for asking all the interview questions<br>IOM.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Questions</P>|n<P CLASS=PopupDeclaration>Property Questions As IQuestions</P>|n<P CLASS=PopupNormal>This property that returns a read-only collection of Question objects.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Questions.html#3ca5740x4a25c8c')">Questions</a></span>[..].Ask()' Syntax for asking all the interview pages<br>IOM.<span class="LocalReference">Pages</span>[..].Ask()<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ProjectName',group:'IInterview',sub:'',descr:{name:'ProjectName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ProjectName</span> As String</p><br><p class="Normal">The name of the project</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Properties',group:'IInterview',sub:IProperties,descr:{name:'Properties',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Properties</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span></p><br><p class="Normal">A read-only property that returns the properties for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The initial interview properties are taken from Project Management. Only the PM properties relevant to the interview are included in the properties collection.</p><br><p class="Normal">Additional properties can be added to the <span class="LocalReference">Properties</span> collection from within the interview.</p><br><p class="Subheading">Example</p><br><pre>Dim Property<br>Set Property = IOM.<span class="LocalReference">Properties</span>.CreateProperty()<br>Property.Name = "MyProp"<br>Property.Value = 42<br>IOM.<span class="LocalReference">Properties</span>.Add(Property)Debug.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Log</P>|n<P CLASS=PopupDeclaration>Sub Log( ByVal Message As String, Optional ByVal Level As LogLevels = lgScript )</P>|n<P CLASS=PopupNormal>Logs a message to the interview log.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Log.html#3ca5740x4a256a8')">Log</a></span>("Value of MyProp is " + CText(IOM.<span class="LocalReference">Properties</span>["MyProp"]))<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Questions',group:'IInterview',sub:IQuestions,descr:{name:'Questions',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Questions</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestions</P>|n<P CLASS=PopupNormal>A collection object that contains the questions for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestions.html#3ca4a98x468f61c')">IQuestions</a></span></p><br><p class="Normal">This property that returns a read-only collection of Question objects.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This collection provides an alternative mechanism for iterating through all the questions in an interview.</p><br><p class="Subheading">Example</p><br><pre>' Question Example: Syntax for asking all the interview questions<br>IOM.<span class="LocalReference">Questions</span>[..].Ask()<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuotaEngine',group:'IInterview',sub:'',descr:{name:'QuotaEngine',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuotaEngine</span> As IDispatch</p><br><p class="Normal">The <span class="LocalReference">QuotaEngine</span> for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RoutingContext',group:'IInterview',sub:'',descr:{name:'RoutingContext',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RoutingContext</span> As String</p><br><p class="Normal">A read-only property that returns the name of the active routing context.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The routing context cannot be changed for a running interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SampleRecord',group:'IInterview',sub:IInterviewSampleRecord,descr:{name:'SampleRecord',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SampleRecord</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IInterviewSampleRecord</P>|n<P CLASS=PopupNormal>The sample management record for the active interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewSampleRecord.html#3ca4a98x4a2cd80')">IInterviewSampleRecord</a></span></p><br><p class="Normal">This read-only property returns sample management record for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SavePoints',group:'IInterview',sub:ISavePoints,descr:{name:'SavePoints',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SavePoints</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ISavePoints</P>|n<P CLASS=PopupNormal>A collection object that contains the save-points for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ISavePoints.html#3ca4a98x4690ec8')">ISavePoints</a></span></p><br><p class="Normal">This property that returns a read-only collection of SavePoint objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">SavePoints</span> collection contains items for each of the possible save-point locations. Save-points are used to programmatically return the interview to a previous question. A save-point differs from a Goto statement in that it resets the state of the interview to that which existed when the question was asked.</p><br><p class="Normal">The <span class="LocalReference">SavePoints</span> collection supports the standard collection properties and methods: Item, Count, and _NewEnum.  The collection also supports an Add method that allows custom save-points to be added.  Custom save-points are used to create a save-point location that is not a question ask.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SessionToken',group:'IInterview',sub:'',descr:{name:'SessionToken',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SessionToken</span> As String</p><br><p class="Normal">This read-only property returns a unique token that identifies the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The session token is generated from a 16 byte GUID that is combined with the 4 byte run number.  The 20 bytes is then base32 encoded to form a 32 character token.</p><br><p class="Normal">The token is case-insensitive so that it can also be used as the mrCache filename.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Texts',group:'IInterview',sub:IStandardTexts,descr:{name:'Texts',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Texts</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStandardTexts</P>|n<P CLASS=PopupNormal>The standard texts used for the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStandardTexts.html#3ca4a98x46910bc')">IStandardTexts</a></span></p><br><p class="Normal">This read-only property returns the standard texts for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Title',group:'IInterview',sub:ILabel,descr:{name:'Title',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Title</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">This read-only property returns the title label for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The title label is visible on all pages in the interview, but can be disabled by setting the property to NULL.  If the title is disabled, a default will be used.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Version',group:'IInterview',sub:'',descr:{name:'Version',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Version</span> As String</p><br><p class="Normal">A read-only property that returns the version of the metadata.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The version cannot be changed for a running interview.</p><br><p class="Normal">NOTE: An interview must be completed using the version that it started with, unless a full replay from the start of the interview occurs.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AutoSelectOther',group:'IInterview',sub:'',descr:{name:'AutoSelectOther',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">AutoSelectOther</span> As Boolean</p><br><p class="Normal">Determines if the Other category is automatically selected if an Other response is given</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default the <span class="LocalReference">AutoSelectOther</span> property is False.  This means that the respondent must select the Other category when entering an Other Specify response.  An error occurs if an Other Specify response is entered without selecting the Other category. If <span class="LocalReference">AutoSelectOther</span> is set to True then the Other category is automatically selected if an Other Specify response is entered.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BannerTemplate',group:'IInterview',sub:'',descr:{name:'BannerTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BannerTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Banner template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The banner template is used when replacing mrBanner tags.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Context',group:'IInterview',sub:'',descr:{name:'Context',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Context</span> As String</p><br><p class="Normal">This read/write property is used to get or set the current <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MDM</P>|n<P CLASS=PopupDeclaration>Property MDM As IDispatch</P>|n<P CLASS=PopupNormal>A read-only property that returns the MDM document for the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_MDM.html#3ca5740x4a257d4')">MDM</a></span> context.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the interview doesn't support the specified context an error will be logged and the default context will be used instead.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ErrorTemplate',group:'IInterview',sub:'',descr:{name:'ErrorTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ErrorTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Error template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The error template is used when replacing mrError tags.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GlobalQuestionPosition',group:'IInterview',sub:'',descr:{name:'GlobalQuestionPosition',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ErrorTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Error template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The error template is used when replacing mrError tags.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GridTemplate',group:'IInterview',sub:'',descr:{name:'GridTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">GridTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Grid template for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LabelType',group:'IInterview',sub:'',descr:{name:'LabelType',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">LabelType</span> As String</p><br><p class="Normal">This read/write property is used to get or set the current <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MDM</P>|n<P CLASS=PopupDeclaration>Property MDM As IDispatch</P>|n<P CLASS=PopupNormal>A read-only property that returns the MDM document for the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_MDM.html#3ca5740x4a257d4')">MDM</a></span> label type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the interview doesn't support the specified label type an error will be logged and the default label type will be used instead.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Language',group:'IInterview',sub:'',descr:{name:'Language',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Language</span> As String</p><br><p class="Normal">This read/write property is used to get or set the interview language.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The interview language can be changed at any point in the interview script and is specified using either an RFC1766 language code or the 3 letter language “name”.</p><br><p class="Normal">It is recommended that the language is specified using an RFC1766 language code. This is a four-letter code made up of a 2-letter ISO639-1 language code and a 2-letter ISO3166 country code separated by a “-” (hyphen).</p><br><p class="Normal">For example, English has the ISO639-1 language code of “en”, the United States has an ISO3166 country code of “US”, while Great Britain has an ISO3166 code of “GB”.  Therefore to use US English set the <span class="LocalReference">Language</span> property to “en-US”.  To use British English set the <span class="LocalReference">Language</span> property to “en-GB”.  As another example, to use the Simplified Chinese script using in the Peoples Republic of China the language code is “zh” (ZhongWen) and the country code is “CN” so the <span class="LocalReference">Language</span> property should be set to “zh-CN”.</p><br><p class="Normal">An alternative is to use the 3 letter language name.  This corresponds to the ILanguage.Name property for the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MDM</P>|n<P CLASS=PopupDeclaration>Property MDM As IDispatch</P>|n<P CLASS=PopupNormal>A read-only property that returns the MDM document for the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_MDM.html#3ca5740x4a257d4')">MDM</a></span> <span class="LocalReference">Language</span> object.  In this case US English is represented as “ENU” and British English as “ENG”.</p><br><p class="Normal">If the interview doesn't support the specified language an error will be logged and the default language will be used instead.</p><br><p class="Subheading">Example</p><br><pre>' Set <span class="LocalReference">Language</span> for interviewing to US English<br>IOM.<span class="LocalReference">Language</span> = "en-US"<br>' Set <span class="LocalReference">Language</span> for interviewing to Chinese (PRC)<br>IOM.<span class="LocalReference">Language</span> = "zh-CN"<br>' Set to same language but using the 3 letter code<br>IOM.<span class="LocalReference">Language</span> = "ZHH"<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LayoutTemplate',group:'IInterview',sub:'',descr:{name:'LayoutTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">LayoutTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a layout template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The layout template is typically a file which defines where the questions on a page should be rendered.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Locale',group:'IInterview',sub:'',descr:{name:'Locale',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Locale</span> As Long</p><br><p class="Normal">The <span class="LocalReference">Locale</span> to use for data input/output and validation</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default the <span class="LocalReference">Locale</span> property is based on the selected language and will automatically change based on the language.  This can be overridden by setting a value for the <span class="LocalReference">Locale</span> property.  Once a value has been set the <span class="LocalReference">Locale</span> property is fixed and will no longer change when the language is changed.</p><br><p class="Normal">This property is used to set a locale for data input/output and for validation that is independent of the interview language.</p><br><p class="Normal">For example, if the IOM.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Language</P>|n<P CLASS=PopupDeclaration>Property Language As String</P>|n<P CLASS=PopupNormal>This read/write property is used to get or set the interview language.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_Language.html#3ca5740x4a2557c')">Language</a></span> property is set to “fr-FR” and the IOM.<span class="LocalReference">Locale</span> is set to “en-US”, then the interview will be in French but numbers and dates will need to be entered as “1.23” rather than the default for French which is “1,23”.</p><br><p class="Normal">This property can also be used with functions that require a <span class="LocalReference">Locale</span> value, such as the Format function.</p><br><p class="Subheading">Example</p><br><pre>' Get the current date and time as a string, formatted based on the current locale<br>TimeNow = Format(Now(), "f", 0, IOM.<span class="LocalReference">Locale</span>)<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MustAnswer',group:'IInterview',sub:'',descr:{name:'MustAnswer',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MustAnswer</span> As Boolean</p><br><p class="Normal">This read/write property is used to enable or disable automatic no response questions.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the <span class="LocalReference">MustAnswer</span> property is set, the question must be answered.  If <span class="LocalReference">MustAnswer</span> is set to False, then any questions with a default value or a “no answer” (NA) special response will automatically be answered.  If <span class="LocalReference">MustAnswer</span> is set to False and a question does not have a default or NA as a valid response, then the question needs to be answered before proceeding to the next question.</p><br><p class="Normal">The <span class="LocalReference">MustAnswer</span> property is True by default.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'NavBarTemplate',group:'IInterview',sub:'',descr:{name:'NavBarTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">NavBarTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a NavBar template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The navigation bar template is used when replacing mrNavBar tags.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OffPathDataMode',group:'IInterview',sub:'',descr:{name:'OffPathDataMode',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OffPathDataMode</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>OffPathDataModes</P>|n<P CLASS=PopupDeclaration>typedef enum OffPathDataModes</P>|n<P CLASS=PopupNormal>Off-path data modes.  These control how off-path data is handled.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">OffPathDataModes</a></span></p><br><p class="Normal">Controls how off-path data in the database is handled.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The interview routing will normally ask a series of questions.  Each respondent will probably take a different “path” through the routing depending on the answers they give.  If the respondent navigates back to a previous question then it's possible they can change a response they gave and therefore take a different path through the routing when they continue to answer the questions.</p><br><p class="Normal">For example, the respondent answers Q1, Q2, Q3, Q4.  If the user navigates to Q1 then the responses to Q2, Q3, Q4 are marked as “off-path”.  If the user changes their response to Q1 such that the routing causes Q2 and Q3 to be skipped and Q4 to be asked the previous off-path response will be shown.  When the user presses “Next” on Q4 the off-path response will be set on-path again.  Q2 and Q3 are left as “off-path” where as Q1 and Q4 are “on-path”.  The <span class="LocalReference">OffPathDataMode</span> controls how the off-path responses in the database are handled.</p><br><p class="Normal">The default <span class="LocalReference">OffPathDataMode</span> is <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmClearOnComplete</a>. This means that off-path data is NULLed when the interview completes.</p><br><p class="Normal">Other possible values for the <span class="LocalReference">OffPathDataMode</span> property are <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmKeep</a>, <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmClearOnNavigateBack</a>, and <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmClearOnExit</a>.  <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmKeep</a> means that off-path data is never NULLed and is therefore aways present in the case data.  <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmClearOnNavigateBack</a> means the responses in the database are immediately set to NULL when the respondent navigates to a previous question using the Previous, Goto, or First navigations, or if the script calls <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Go</P>|n<P CLASS=PopupDeclaration>Sub Go( )</P>|n<P CLASS=PopupNormal>Sets the interview state back to that prior to the question ask.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ISavePoint_Go.html#3ca5740x4690d94')">ISavePoint.Go</a></span>(). <a href="javascript:openBody('OffPathDataModes.html#3ca5740x4693e24')">dmClearOnExit</a> means that off-path data is NULLed whenever the interview exits in any way (for example, completes, is stoppped, or times-out).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionTemplate',group:'IInterview',sub:'',descr:{name:'QuestionTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a question template for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The question template is used when replacing mrError tags that do not specify a question element.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsEmpty',group:'IAudioStyle',sub:'',descr:{name:'IsEmpty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsEmpty</span> As Boolean</p><br><p class="Normal">True if no style properties have been set for the style object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If <span class="LocalReference">IsEmpty</span> is True then all properties of this objects are either returning their default value or the corresponding property of the parent style object (if applicable).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IAudioStyle',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal"><span class="LocalReference">Name</span> and relative location of the audio file.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PlayControlPosition',group:'IAudioStyle',sub:'',descr:{name:'PlayControlPosition',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PlayControlPosition</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>AudioControlPositions</P>|n<P CLASS=PopupDeclaration>typedef enum AudioControlPositions</P>|n<P CLASS=PopupNormal>Audio Control Positions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('AudioControlPositions.html#3ca5740x4a1c470')">AudioControlPositions</a></span></p><br><p class="Normal">The position of the Play/Stop toolbar relative to the question or category label.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The play and stop button positions cannot be switched or put one above the other. The default <span class="LocalReference">PlayControlPosition</span> is <a href="javascript:openBody('AudioControlPositions.html#3ca5740x4a1c470')">cpLeft</a>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Record',group:'IAudioStyle',sub:'',descr:{name:'Record',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Record</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>RecordModes</P>|n<P CLASS=PopupDeclaration>typedef enum RecordModes</P>|n<P CLASS=PopupNormal>Record Modes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('RecordModes.html#3ca5740x4694f00')">RecordModes</a></span></p><br><p class="Normal">Controls if the question should be recorded and how.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The default value for the <span class="LocalReference">Record</span> property is <a href="javascript:openBody('RecordModes.html#3ca5740x4694f00')">rmNone</a>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RecordControlPosition',group:'IAudioStyle',sub:'',descr:{name:'RecordControlPosition',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RecordControlPosition</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>AudioControlPositions</P>|n<P CLASS=PopupDeclaration>typedef enum AudioControlPositions</P>|n<P CLASS=PopupNormal>Audio Control Positions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('AudioControlPositions.html#3ca5740x4a1c470')">AudioControlPositions</a></span></p><br><p class="Normal">The position of the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Record</P>|n<P CLASS=PopupDeclaration>Property Record As RecordModes</P>|n<P CLASS=PopupNormal>Controls if the question should be recorded and how.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IAudioStyle_Record.html#3ca5740x4a1ebfc')">Record</a></span>/Stop toolbar relative to the question label.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The record and stop button positions cannot be switched or put one above the other. The default <span class="LocalReference">RecordControlPosition</span> is <a href="javascript:openBody('AudioControlPositions.html#3ca5740x4a1c470')">cpLeft</a>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ICategories',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of Category objects in the collection.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Count</span> is the number of Category objects.  Since Category objects can be categories or category lists, <span class="LocalReference">Count</span> is not the total number of Categories.</p><br><p class="Normal">The <span class="LocalReference">Count</span> property is the number of Category objects after the filter has been applied and corresponds to the number of items in the collection that can be accessed using a numeric index.  Note that all items in the collection can be indexed by name even if they have been filtered out.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Filter',group:'ICategories',sub:'',descr:{name:'Filter',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Filter</span> As Variant</p><br><p class="Normal">A read/write property that returns the filter used to select categories.  The filter can be specified as a range or a categorical value.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Filter</span> property is used to limit the category objects returned by the collection. If a <span class="LocalReference">Filter</span> is set, then the final list of categories returned is the intersection of the <span class="LocalReference">Filter</span> and the category list:</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Categories</td><td class="DefinitionBody"><p class="Normal">Question Categories * <span class="LocalReference">Filter</span></p><br></td></tr></tbody></table><p class="Normal">The <span class="LocalReference">Filter</span> property can be used to limit the categories displayed by a question to just those categories chosen in a previous question.</p><br><p class="Subheading">Example</p><br><pre>' Filtering a simple category list<br>' Q1 and Q2 have categories {a,b,c,d}' Ask the categories answered in a previous question<br>' NOTE: Q2.Categories is the same as Q2.Categories.<span class="LocalReference">Filter</span><br>Q2.Categories = Q1<br>Q2.Ask()' Ask the categories not answered in a previous question<br>Q2.Categories = Q2.DefinedCategories() ?Q1<br>Q2.Ask()' Ask the categories based on a range<br>Q2.Categories = "a..c"<br>Q2.Ask()The <span class="LocalReference">Filter</span> property can be used to limit the categories in a categorical loop or<br>compound.<br></pre><br><pre>BrandsUsed.Ask()           ' Simple question for brands used' Set the Loop filter so that only the brands used are presented<br>BrandsLoop.Categories.<span class="LocalReference">Filter</span> = BrandsUsedFor questions, the <span class="LocalReference">Filter</span> property only applies to the current list and does not<br>cascade to sub-lists.  However, for categories, the filter setting is passed to<br>sub-lists.  This is done to ensure that a filter can be based on an answer to a<br>previous question.<br></pre><br><pre>' Filtering a category list with sub-lists<br>' Q1 has categories {a, b{x,y}, c{i,j},d}<br>' The sub-lists are name-spaced.' <span class="LocalReference">Filter</span> {a,b{x},c{i,j}}<br>Q1.Categories = {a,b.x,c.i,c.j}' After setting the filter:<br>' Q1.Categories returns {a,b,c}<br>' Q1.Categories.b returns {x}<br>' Q1.Categories.c returns {i,j}' <span class="LocalReference">Filter</span> {a,b{..}}<br>Q1.Categories = {a,b}' <span class="LocalReference">Filter</span> {a,b{..},b.x}<br>' NOTE: b.x has no effect because it is already selected by b<br>Q1.Categories = {a,b,b.x}To clear a filter, assign ".." (all categories) or NULL to the <span class="LocalReference">Filter</span> property or<br>use the DefinedCategories function.' Different ways to reset the filter<br>Q2.Categories = Q2.DefinedCategories()<br>Q2.Categories = ".."<br>Q2.Categories.<span class="LocalReference">Filter</span> = NULL<br>Q2.Categories = NULLThe filter property is the default parameterless property.  So the previous examples<br>could have been written without explicitly specifying '<span class="LocalReference">Filter</span>':' Set the <span class="LocalReference">Filter</span>, ask the questions and remove the filter<br>BrandsLoop.Categories = BrandsUsed<br>BrandsLoop[..].Ask()<br>BrandsLoop.Categories = NULLThe <span class="LocalReference">Filter</span> setting only impacts how items are returned by the enumerator and using<br>numeric indexes.  Even if an item it not selected by the filter, it will still be<br>possible to get the item by its name.Note that in the example below, when defining the filter in the script, the value can<br>be set as a string (a category expression) or a categorical value (a categorical literal {}).<br>When assigning the filter as a string (for example, "a"), the category names will be validated<br>against the question's categories, because category expressions need to be evaluated<br>to resolve any range expressions.On the other hand, a category value (for example, {a}) is only validated against the category<br>map at parse time, but is not checked when setting the filter.  The filter property does not<br>consider this an error because filters can be set based on the answers to a previous question<br>that could contain additional categories that are not included in the current question.<br>The additional categories are ignored.  This distinction is important for database questions.<br>Given that the categories for database questions are not known at parse time, category expressions<br>must be used. This does mean that hard coded filters set for database questions will be validated<br>at run time against the categories read from the database.'Example for unusual case of setting filter.<br>q1 "Test question 1"<br>categorical<br>{<br>A "A",<br>B "B"<br>};<br>q1.Categories.<span class="LocalReference">Filter</span> = "C" ==&gt; the error "The range expression 'C' is not valid" is produced.<br>q1.Categories.<span class="LocalReference">Filter</span> = {C} ==&gt; no error is producedThis property is not supported in mrDataManager 1.0<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ICategories',sub:ICategory,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">Get the Category at the specified location.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Val can be a numeric index or category name.</p><br><p class="Subheading">Example</p><br><pre>' These three lines are equivalent<br>Q1.Categories[0].Label.Style.Color = "blue"<br>Q1.Categories["Cat1"].Label.Style.Color = "blue"<br>Q1.Categories.Cat1.Label.Style.Color = "blue"<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Order',group:'ICategories',sub:'',descr:{name:'Order',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Order</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>OrderConstants</P>|n<P CLASS=PopupDeclaration>typedef enum OrderConstants</P>|n<P CLASS=PopupNormal>Defines the display order for the Element objects in an Elements collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('OrderConstants.html#3ca5740x4694020')">OrderConstants</a></span></p><br><p class="Normal">The order of the categories in the collection</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Setting the order property controls the sequence in which Category objects are returned by the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>Get the Category at the specified location.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories_Item.html#3ca5740x4a1edf0')">Item</a></span> property when using a numeric index and also by the For-Each enumerator.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Attributes',group:'ICategory',sub:'',descr:{name:'Attributes',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Attributes</span> As Long</p><br><p class="Normal">A read-only property that returns the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryAttributes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryAttributes</P>|n<P CLASS=PopupNormal>Category Attributes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryAttributes.html#3ca5740x4a1c984')">CategoryAttributes</a></span>.  <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryAttributes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryAttributes</P>|n<P CLASS=PopupNormal>Category Attributes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryAttributes.html#3ca5740x4a1c984')">CategoryAttributes</a></span> specify a category as exclusive, fixed, other etc.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The default value of 0 indicates the category has no special <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryAttributes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryAttributes</P>|n<P CLASS=PopupNormal>Category Attributes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryAttributes.html#3ca5740x4a1c984')">CategoryAttributes</a></span>.</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryAttributes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryAttributes</P>|n<P CLASS=PopupNormal>Category Attributes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryAttributes.html#3ca5740x4a1c984')">CategoryAttributes</a></span> can be checked using the IsSet function.  E.g. If Q1.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Categories</P>|n<P CLASS=PopupDeclaration>Property Categories As ICategories</P>|n<P CLASS=PopupNormal>A read-only property that returns a collection of category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_Categories.html#3ca5740x4a1efe4')">Categories</a></span>["Other"].<span class="LocalReference">Attributes</span>.IsSet(<a href="javascript:openBody('CategoryAttributes.html#3ca5740x4a1c984')">CategoryAttributes.caExclusive</a>) Then</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Categories',group:'ICategory',sub:ICategories,descr:{name:'Categories',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Categories</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span></p><br><p class="Normal">A read-only property that returns a collection of category objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Categories</span> collection supports the standard collection properties and methods:  <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-category.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_Item.html#3ca5740x4a212a8')">Item</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Count</P>|n<P CLASS=PopupDeclaration>Property Count As Long</P>|n<P CLASS=PopupNormal>This is a read only property that returns the number of sub-categories.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_Count.html#3ca5740x4a1f0ac')">Count</a></span>, and _NewEnum.  The use of the <span class="LocalReference">Categories</span> property is the same as that for the Question object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CategoryType',group:'ICategory',sub:'',descr:{name:'CategoryType',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CategoryType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryTypes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryTypes</P>|n<P CLASS=PopupNormal>Category Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryTypes.html#3ca5740x4a1cf04')">CategoryTypes</a></span></p><br><p class="Normal">A read-only property that returns the <span class="LocalReference">CategoryType</span>.  <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CategoryTypes</P>|n<P CLASS=PopupDeclaration>typedef enum CategoryTypes</P>|n<P CLASS=PopupNormal>Category Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CategoryTypes.html#3ca5740x4a1cf04')">CategoryTypes</a></span> specify a category as a single category or a category list.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ICategory',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">This is a read only property that returns the number of sub-categories.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Count</span> is the total number of sub-categories of type Category or CategoryList. The <span class="LocalReference">Count</span> property takes into account the effect of the filter and corresponds to the number of items in the collection that can be accessed using a numeric index.  Note that all items in the collection can be indexed by name even if they have been filtered out.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Factor',group:'ICategory',sub:'',descr:{name:'Factor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Factor</span> As Variant</p><br><p class="Normal">A read-only property that returns a factor value that can be used for tabulating the category.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'FullName',group:'ICategory',sub:'',descr:{name:'FullName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">FullName</span> As String</p><br><p class="Normal">A read-only property that returns the full name of the category.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If a category is defined as a sub-category of another category object, then the full name will not match the name.  For example, if a categories were grouped into positive and negative category lists, the category names might be “Good” and “Bad”, while the full names would be “Positive.Good” and “Negative.Bad”.</p><br><p class="Normal">NOTE: Look-up by name into the categories collection is based on the full name.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Index',group:'ICategory',sub:'',descr:{name:'Index',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Index</span> As Long</p><br><p class="Normal">A read-only property that returns the 0-based index for the position of the category in its parent category list.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'KeyCode',group:'ICategory',sub:'',descr:{name:'KeyCode',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">KeyCode</span> As String</p><br><p class="Normal">This property returns the key code for the category.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'ICategory',sub:ILabel,descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">This read-only property returns the label for the category.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The category label that is returned is based on the active language, context, and label type.  The category label can be modified, but any changes will not be written back into the MDM.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'ICategory',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">A read-only property that returns the name of the category.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OtherQuestion',group:'ICategory',sub:IQuestion,descr:{name:'OtherQuestion',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OtherQuestion</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestion</P>|n<P CLASS=PopupNormal>The Question object is used to represent a question in the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion.html#3ca4a98x4a34004')">IQuestion</a></span></p><br><p class="Normal">This property returns the Other Specify question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">An error is returned if the category is not an other specify category.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Parent',group:'ICategory',sub:ICategory,descr:{name:'Parent',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Parent</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategory</P>|n<P CLASS=PopupNormal>The Category object is used to represent a possible category response for a question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory.html#3ca4a98x4a1ef1c')">ICategory</a></span></p><br><p class="Normal">A read-only property that returns the parent category if one exists.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">NULL is returned if the category does not have a parent.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Properties',group:'ICategory',sub:'',descr:{name:'Properties',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Properties</span> As IDispatch</p><br><p class="Normal">A read-only property that returns the properties for the category.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The category properties are taken from the element properties in the MDM.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'ICategory',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">This read/write property returns a <span class="LocalReference">Style</span> object for the category.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Style</span> object is used to override or reset the default presentation styles for the category.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'ICategory',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant()</p><br><p class="Normal">A read-only property that returns the categorical value of the category.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Filter',group:'ICategory',sub:'',descr:{name:'Filter',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Filter</span> As Variant</p><br><p class="Normal">This property is used to get or set the categories filter.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is only supported on category objects of <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>CategoryType</P>|n<P CLASS=PopupDeclaration>Property CategoryType As CategoryTypes</P>|n<P CLASS=PopupNormal>A read-only property that returns the CategoryType.  CategoryTypes specify a category as a single category or a category list.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_CategoryType.html#3ca5740x4a1f048')">CategoryType</a></span> <a href="javascript:openBody('CategoryTypes.html#3ca5740x4a1cf04')">ctCategoryList</a>.  Refer to the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Categories</P>|n<P CLASS=PopupDeclaration>Property Categories As ICategories</P>|n<P CLASS=PopupNormal>A read-only property that returns a collection of category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_Categories.html#3ca5740x4a1efe4')">Categories</a></span> <span class="LocalReference">Filter</span> property for a description of the how to apply a filter.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ICategory',sub:'',descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">The <span class="LocalReference">Item</span> property is used to return a sub-category.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The index parameter on <span class="LocalReference">Item</span> is optional.  If the index is not specified, then the property gets the category value.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Order',group:'ICategory',sub:'',descr:{name:'Order',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Order</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>OrderConstants</P>|n<P CLASS=PopupDeclaration>typedef enum OrderConstants</P>|n<P CLASS=PopupNormal>Defines the display order for the Element objects in an Elements collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('OrderConstants.html#3ca5740x4694020')">OrderConstants</a></span></p><br><p class="Normal">The order of the categories in the collection</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Setting the order property controls the sequence in which Category objects are returned by the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-category.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory_Item.html#3ca5740x4a212a8')">Item</a></span> property when using a numeric index and also by the For-Each enumerator.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --><div class="EverythingUnderTheTitleBar"><!--- This is the navigation bar --><br><table class="NavBar"><br><tbody><tr valign="BASELINE" class="NavBar"><br><td class="NavBarCenter"><table class="NavBarActionLine"><br><tbody><tr valign="BASELINE" class="NavBarActionLine"><br><td class="NavBarActions"><a href="ICategory.html" class="MenuBarOff" onmouseover="this.className ='MenuBarOn';" onmouseout="this.className = 'MenuBarOff';">Owner</a></td><td class="NavBarActions"><a href="interview_Object_Model.html" class="MenuBarOff" onmouseover="this.className ='MenuBarOn';" onmouseout="this.className = 'MenuBarOff';">Object Model</a></td></tr></tbody></table></td></tr></tbody></table><!-- End of navigation bar --><p class="Declaration">Property <span class="LocalReference">Item</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">The <span class="LocalReference">Item</span> property is used to return a sub-category.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The index parameter on <span class="LocalReference">Item</span> is optional.  If the index is not specified, then the property gets the category value.</p>     <!-- And so ends the body of the page... --></div></div>`,info:'',ex:''}},
    {id:'Label',group:'ICategoryStyle',sub:IStyle,descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for each type of label for this Category type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The label styles set for each category type override the label styles set for DefaultStyles.Labels.  Refer to the DefaultStyles object for a description of the available label types.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'ICategoryStyle',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for the category type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is used to define the presentation styles for the category input control.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ICategoryStyles',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ICategoryStyles',sub:ICategoryStyle,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategoryStyle</P>|n<P CLASS=PopupNormal>The CategoryStyle object is used to define the default presentation styles used by each category type.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategoryStyle.html#3ca4a98x4a216f4')">ICategoryStyle</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsEmpty',group:'ICellStyle',sub:'',descr:{name:'IsEmpty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsEmpty</span> As Boolean</p><br><p class="Normal">True if no style properties have been set for the style object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If <span class="LocalReference">IsEmpty</span> is True then all properties of this objects are either returning their default value or the corresponding property of the parent style object (if applicable).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BgColor',group:'ICellStyle',sub:'',descr:{name:'BgColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BgColor</span> As String</p><br><p class="Normal">Sets the background color of an element cell.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The background color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderBottomColor',group:'ICellStyle',sub:'',descr:{name:'BorderBottomColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderBottomColor</span> As String</p><br><p class="Normal">The RGB based color for the bottom border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopColor</P>|n<P CLASS=PopupDeclaration>Property BorderTopColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopColor.html#3ca5740x4a21ec4')">BorderTopColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightColor</P>|n<P CLASS=PopupDeclaration>Property BorderRightColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightColor.html#3ca5740x4a21d34')">BorderRightColor</a></span>, <span class="LocalReference">BorderBottomColor</span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftColor</P>|n<P CLASS=PopupDeclaration>Property BorderLeftColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftColor.html#3ca5740x4a21c08')">BorderLeftColor</a></span>.  If colors are set for both the overall border and a specific border, the color for the specific border takes precedence.  The color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderBottomStyle',group:'ICellStyle',sub:'',descr:{name:'BorderBottomStyle',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderBottomStyle</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>BorderStyles</P>|n<P CLASS=PopupDeclaration>typedef enum BorderStyles</P>|n<P CLASS=PopupNormal>Border Styles.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('BorderStyles.html#3ca5740x4a1c664')">BorderStyles</a></span></p><br><p class="Normal">The style to apply for the bottom border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopStyle</P>|n<P CLASS=PopupDeclaration>Property BorderTopStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopStyle.html#3ca5740x4a21f30')">BorderTopStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightStyle</P>|n<P CLASS=PopupDeclaration>Property BorderRightStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightStyle.html#3ca5740x4a21d98')">BorderRightStyle</a></span>, <span class="LocalReference">BorderBottomStyle</span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftStyle</P>|n<P CLASS=PopupDeclaration>Property BorderLeftStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftStyle.html#3ca5740x4a21c6c')">BorderLeftStyle</a></span>.  If a style is set for both the overall border and a specific border, the style for the specific border takes precedence.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderBottomWidth',group:'ICellStyle',sub:'',descr:{name:'BorderBottomWidth',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderBottomWidth</span> As Long</p><br><p class="Normal">The width of the bottom border for the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopWidth</P>|n<P CLASS=PopupDeclaration>Property BorderTopWidth As Long</P>|n<P CLASS=PopupNormal>The width of the top border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopWidth.html#3ca5740x4a21f94')">BorderTopWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightWidth</P>|n<P CLASS=PopupDeclaration>Property BorderRightWidth As Long</P>|n<P CLASS=PopupNormal>The width of the right border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightWidth.html#3ca5740x4a21dfc')">BorderRightWidth</a></span>, <span class="LocalReference">BorderBottomWidth</span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftWidth</P>|n<P CLASS=PopupDeclaration>Property BorderLeftWidth As Long</P>|n<P CLASS=PopupNormal>The width of the left border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftWidth.html#3ca5740x4a21cd0')">BorderLeftWidth</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderColor',group:'ICellStyle',sub:'',descr:{name:'BorderColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderColor</span> As String</p><br><p class="Normal">The RGB based color for the border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties also exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopColor</P>|n<P CLASS=PopupDeclaration>Property BorderTopColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopColor.html#3ca5740x4a21ec4')">BorderTopColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightColor</P>|n<P CLASS=PopupDeclaration>Property BorderRightColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightColor.html#3ca5740x4a21d34')">BorderRightColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomColor</P>|n<P CLASS=PopupDeclaration>Property BorderBottomColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomColor.html#3ca5740x4a21a78')">BorderBottomColor</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftColor</P>|n<P CLASS=PopupDeclaration>Property BorderLeftColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftColor.html#3ca5740x4a21c08')">BorderLeftColor</a></span>.  If colors are set for both the overall border and a specific border, the color for the specific border takes precedence.  The color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderLeftColor',group:'ICellStyle',sub:'',descr:{name:'BorderLeftColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderLeftColor</span> As String</p><br><p class="Normal">The RGB based color for the left border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopColor</P>|n<P CLASS=PopupDeclaration>Property BorderTopColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopColor.html#3ca5740x4a21ec4')">BorderTopColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightColor</P>|n<P CLASS=PopupDeclaration>Property BorderRightColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightColor.html#3ca5740x4a21d34')">BorderRightColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomColor</P>|n<P CLASS=PopupDeclaration>Property BorderBottomColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomColor.html#3ca5740x4a21a78')">BorderBottomColor</a></span>, and <span class="LocalReference">BorderLeftColor</span>.  If colors are set for both the overall border and a specific border, the color for the specific border takes precedence.  The color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderLeftStyle',group:'ICellStyle',sub:'',descr:{name:'BorderLeftStyle',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderLeftStyle</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>BorderStyles</P>|n<P CLASS=PopupDeclaration>typedef enum BorderStyles</P>|n<P CLASS=PopupNormal>Border Styles.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('BorderStyles.html#3ca5740x4a1c664')">BorderStyles</a></span></p><br><p class="Normal">The style to apply for the left border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopStyle</P>|n<P CLASS=PopupDeclaration>Property BorderTopStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopStyle.html#3ca5740x4a21f30')">BorderTopStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightStyle</P>|n<P CLASS=PopupDeclaration>Property BorderRightStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightStyle.html#3ca5740x4a21d98')">BorderRightStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomStyle</P>|n<P CLASS=PopupDeclaration>Property BorderBottomStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomStyle.html#3ca5740x4a21adc')">BorderBottomStyle</a></span>, and <span class="LocalReference">BorderLeftStyle</span>.  If a style is set for both the overall border and a specific border, the style for the specific border takes precedence.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderLeftWidth',group:'ICellStyle',sub:'',descr:{name:'BorderLeftWidth',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderLeftWidth</span> As Long</p><br><p class="Normal">The width of the left border for the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopWidth</P>|n<P CLASS=PopupDeclaration>Property BorderTopWidth As Long</P>|n<P CLASS=PopupNormal>The width of the top border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopWidth.html#3ca5740x4a21f94')">BorderTopWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightWidth</P>|n<P CLASS=PopupDeclaration>Property BorderRightWidth As Long</P>|n<P CLASS=PopupNormal>The width of the right border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightWidth.html#3ca5740x4a21dfc')">BorderRightWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomWidth</P>|n<P CLASS=PopupDeclaration>Property BorderBottomWidth As Long</P>|n<P CLASS=PopupNormal>The width of the bottom border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomWidth.html#3ca5740x4a21b40')">BorderBottomWidth</a></span>, and <span class="LocalReference">BorderLeftWidth</span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderRightColor',group:'ICellStyle',sub:'',descr:{name:'BorderRightColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Wrap</span> As Boolean</p><br><p class="Normal">Set whether child elements in the cell should automatically wrap.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderRightStyle',group:'ICellStyle',sub:'',descr:{name:'BorderRightStyle',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Wrap</span> As Boolean</p><br><p class="Normal">Set whether child elements in the cell should automatically wrap.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderRightWidth',group:'ICellStyle',sub:'',descr:{name:'BorderRightWidth',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderRightWidth</span> As Long</p><br><p class="Normal">The width of the right border for the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopWidth</P>|n<P CLASS=PopupDeclaration>Property BorderTopWidth As Long</P>|n<P CLASS=PopupNormal>The width of the top border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopWidth.html#3ca5740x4a21f94')">BorderTopWidth</a></span>, <span class="LocalReference">BorderRightWidth</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomWidth</P>|n<P CLASS=PopupDeclaration>Property BorderBottomWidth As Long</P>|n<P CLASS=PopupNormal>The width of the bottom border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomWidth.html#3ca5740x4a21b40')">BorderBottomWidth</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftWidth</P>|n<P CLASS=PopupDeclaration>Property BorderLeftWidth As Long</P>|n<P CLASS=PopupNormal>The width of the left border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftWidth.html#3ca5740x4a21cd0')">BorderLeftWidth</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderStyle',group:'ICellStyle',sub:'',descr:{name:'BorderStyle',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderStyle</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>BorderStyles</P>|n<P CLASS=PopupDeclaration>typedef enum BorderStyles</P>|n<P CLASS=PopupNormal>Border Styles.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('BorderStyles.html#3ca5740x4a1c664')">BorderStyles</a></span></p><br><p class="Normal">The style to apply for the border.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties also exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopStyle</P>|n<P CLASS=PopupDeclaration>Property BorderTopStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopStyle.html#3ca5740x4a21f30')">BorderTopStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightStyle</P>|n<P CLASS=PopupDeclaration>Property BorderRightStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightStyle.html#3ca5740x4a21d98')">BorderRightStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomStyle</P>|n<P CLASS=PopupDeclaration>Property BorderBottomStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomStyle.html#3ca5740x4a21adc')">BorderBottomStyle</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftStyle</P>|n<P CLASS=PopupDeclaration>Property BorderLeftStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftStyle.html#3ca5740x4a21c6c')">BorderLeftStyle</a></span>.  If a style is set for both the overall border and a specific border, the style for the specific border takes precedence.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderTopColor',group:'ICellStyle',sub:'',descr:{name:'BorderTopColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderTopColor</span> As String</p><br><p class="Normal">The RGB based color for the top border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="LocalReference">BorderTopColor</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightColor</P>|n<P CLASS=PopupDeclaration>Property BorderRightColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightColor.html#3ca5740x4a21d34')">BorderRightColor</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomColor</P>|n<P CLASS=PopupDeclaration>Property BorderBottomColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomColor.html#3ca5740x4a21a78')">BorderBottomColor</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftColor</P>|n<P CLASS=PopupDeclaration>Property BorderLeftColor As String</P>|n<P CLASS=PopupNormal>The RGB based color for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftColor.html#3ca5740x4a21c08')">BorderLeftColor</a></span>.  If colors are set for both the overall border and a specific border, the color for the specific border takes precedence.  The color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderTopStyle',group:'ICellStyle',sub:'',descr:{name:'BorderTopStyle',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderTopStyle</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>BorderStyles</P>|n<P CLASS=PopupDeclaration>typedef enum BorderStyles</P>|n<P CLASS=PopupNormal>Border Styles.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('BorderStyles.html#3ca5740x4a1c664')">BorderStyles</a></span></p><br><p class="Normal">The style to apply for the top border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="LocalReference">BorderTopStyle</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightStyle</P>|n<P CLASS=PopupDeclaration>Property BorderRightStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightStyle.html#3ca5740x4a21d98')">BorderRightStyle</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomStyle</P>|n<P CLASS=PopupDeclaration>Property BorderBottomStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomStyle.html#3ca5740x4a21adc')">BorderBottomStyle</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftStyle</P>|n<P CLASS=PopupDeclaration>Property BorderLeftStyle As BorderStyles</P>|n<P CLASS=PopupNormal>The style to apply for the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftStyle.html#3ca5740x4a21c6c')">BorderLeftStyle</a></span>.  If a style is set for both the overall border and a specific border, the style for the specific border takes precedence.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderTopWidth',group:'ICellStyle',sub:'',descr:{name:'BorderTopWidth',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderTopWidth</span> As Long</p><br><p class="Normal">The width of the top border for the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="LocalReference">BorderTopWidth</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightWidth</P>|n<P CLASS=PopupDeclaration>Property BorderRightWidth As Long</P>|n<P CLASS=PopupNormal>The width of the right border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightWidth.html#3ca5740x4a21dfc')">BorderRightWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomWidth</P>|n<P CLASS=PopupDeclaration>Property BorderBottomWidth As Long</P>|n<P CLASS=PopupNormal>The width of the bottom border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomWidth.html#3ca5740x4a21b40')">BorderBottomWidth</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftWidth</P>|n<P CLASS=PopupDeclaration>Property BorderLeftWidth As Long</P>|n<P CLASS=PopupNormal>The width of the left border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftWidth.html#3ca5740x4a21cd0')">BorderLeftWidth</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BorderWidth',group:'ICellStyle',sub:'',descr:{name:'BorderWidth',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BorderWidth</span> As Long</p><br><p class="Normal">The width of the border for the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties also exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderTopWidth</P>|n<P CLASS=PopupDeclaration>Property BorderTopWidth As Long</P>|n<P CLASS=PopupNormal>The width of the top border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderTopWidth.html#3ca5740x4a21f94')">BorderTopWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderRightWidth</P>|n<P CLASS=PopupDeclaration>Property BorderRightWidth As Long</P>|n<P CLASS=PopupNormal>The width of the right border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderRightWidth.html#3ca5740x4a21dfc')">BorderRightWidth</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderBottomWidth</P>|n<P CLASS=PopupDeclaration>Property BorderBottomWidth As Long</P>|n<P CLASS=PopupNormal>The width of the bottom border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderBottomWidth.html#3ca5740x4a21b40')">BorderBottomWidth</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>BorderLeftWidth</P>|n<P CLASS=PopupDeclaration>Property BorderLeftWidth As Long</P>|n<P CLASS=PopupNormal>The width of the left border for the element.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_BorderLeftWidth.html#3ca5740x4a21cd0')">BorderLeftWidth</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ColSpan',group:'ICellStyle',sub:'',descr:{name:'ColSpan',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ColSpan</span> As Long</p><br><p class="Normal">The number of columns a particular cell in a grid can span.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is specific to grid formatting and has no meaning for cells not contained in a grid.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Height',group:'ICellStyle',sub:'',descr:{name:'Height',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Height</span> As String</p><br><p class="Normal">Sets the vertical size of an element cell.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The width can be set as a value or a percentage.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Padding',group:'ICellStyle',sub:'',descr:{name:'Padding',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Height</span> As String</p><br><p class="Normal">Sets the vertical size of an element cell.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The width can be set as a value or a percentage.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PaddingBottom',group:'ICellStyle',sub:'',descr:{name:'PaddingBottom',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PaddingBottom</span> As Long</p><br><p class="Normal">Sets the distance between cell content and the bottom border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingTop</P>|n<P CLASS=PopupDeclaration>Property PaddingTop As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingTop.html#3ca5740x4a22318')">PaddingTop</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingRight</P>|n<P CLASS=PopupDeclaration>Property PaddingRight As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingRight.html#3ca5740x4a222b4')">PaddingRight</a></span>, <span class="LocalReference">PaddingBottom</span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingLeft</P>|n<P CLASS=PopupDeclaration>Property PaddingLeft As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingLeft.html#3ca5740x4a22250')">PaddingLeft</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PaddingLeft',group:'ICellStyle',sub:'',descr:{name:'PaddingLeft',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PaddingLeft</span> As Long</p><br><p class="Normal">Sets the distance between cell content and the left border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingTop</P>|n<P CLASS=PopupDeclaration>Property PaddingTop As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingTop.html#3ca5740x4a22318')">PaddingTop</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingRight</P>|n<P CLASS=PopupDeclaration>Property PaddingRight As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingRight.html#3ca5740x4a222b4')">PaddingRight</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingBottom</P>|n<P CLASS=PopupDeclaration>Property PaddingBottom As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingBottom.html#3ca5740x4a221ec')">PaddingBottom</a></span>, and <span class="LocalReference">PaddingLeft</span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PaddingRight',group:'ICellStyle',sub:'',descr:{name:'PaddingRight',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PaddingRight</span> As Long</p><br><p class="Normal">Sets the distance between cell content and the right border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingTop</P>|n<P CLASS=PopupDeclaration>Property PaddingTop As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the top border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingTop.html#3ca5740x4a22318')">PaddingTop</a></span>, <span class="LocalReference">PaddingRight</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingBottom</P>|n<P CLASS=PopupDeclaration>Property PaddingBottom As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingBottom.html#3ca5740x4a221ec')">PaddingBottom</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingLeft</P>|n<P CLASS=PopupDeclaration>Property PaddingLeft As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingLeft.html#3ca5740x4a22250')">PaddingLeft</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PaddingTop',group:'ICellStyle',sub:'',descr:{name:'PaddingTop',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PaddingTop</span> As Long</p><br><p class="Normal">Sets the distance between cell content and the top border.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Individual properties exist for <span class="LocalReference">PaddingTop</span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingRight</P>|n<P CLASS=PopupDeclaration>Property PaddingRight As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the right border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingRight.html#3ca5740x4a222b4')">PaddingRight</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingBottom</P>|n<P CLASS=PopupDeclaration>Property PaddingBottom As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the bottom border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingBottom.html#3ca5740x4a221ec')">PaddingBottom</a></span>, and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PaddingLeft</P>|n<P CLASS=PopupDeclaration>Property PaddingLeft As Long</P>|n<P CLASS=PopupNormal>Sets the distance between cell content and the left border.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_PaddingLeft.html#3ca5740x4a22250')">PaddingLeft</a></span>.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RepeatHeader',group:'ICellStyle',sub:'',descr:{name:'RepeatHeader',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RepeatHeader</span> As Long</p><br><p class="Normal">Controls how the top headings of the grid are repeated</p><br><p class="Subheading">Remarks</p><br><p class="Normal">A positive value, 'N', for the <span class="LocalReference">RepeatHeader</span> property specifies that the heading row should be repeated every 'N' rows of the grid.</p><br><p class="Normal">A negative value, '-N', for <span class="LocalReference">RepeatHeader</span> specifies that the heading row should be repeated every 'N' rows of the grid and again at the bottom of the grid.</p><br><p class="Normal">Some other special values for the <span class="LocalReference">RepeatHeader</span> property are:</p><br><table class="WithHeader"><br><tbody><tr valign="BASELINE" class="TitleRow"><br><td class="TitleCell">Value</td><td class="TitleCell">Description</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">N    </td><td class="BodyCell">Display the header at the top and every N rows of the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">0    </td><td class="BodyCell">Display the header at both the top and bottom of the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-1   </td><td class="BodyCell">Display the header at the top of the grid only (the default)</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-2   </td><td class="BodyCell">Center the header within the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-N   </td><td class="BodyCell">Display the header every N rows of the grid and at the top and bottom</td></tr></tbody></table><p class="Normal">This property is specific to grid formatting.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>RepeatSideHeader</P>|n<P CLASS=PopupDeclaration>Property RepeatSideHeader As Long</P>|n<P CLASS=PopupNormal>Controls how the side headings of the grid are repeated</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_RepeatSideHeader.html#3ca5740x4a223e0')">RepeatSideHeader</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RepeatSideHeader',group:'ICellStyle',sub:'',descr:{name:'RepeatSideHeader',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RepeatSideHeader</span> As Long</p><br><p class="Normal">Controls how the side headings of the grid are repeated</p><br><p class="Subheading">Remarks</p><br><p class="Normal">A positive value, 'N', for the <span class="LocalReference">RepeatSideHeader</span> property specifies that the side heading column should be repeated every 'N' columns of the grid.</p><br><p class="Normal">A negative value, '-N', for <span class="LocalReference">RepeatSideHeader</span> specifies that the side heading column should be repeated every 'N' columns of the grid and again at the right of the grid.</p><br><p class="Normal">Some special values for the <span class="LocalReference">RepeatSideHeader</span> property are:</p><br><table class="WithHeader"><br><tbody><tr valign="BASELINE" class="TitleRow"><br><td class="TitleCell">Value</td><td class="TitleCell">Description</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">N    </td><td class="BodyCell">Display the side heading column at the left and every N columns of the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">0    </td><td class="BodyCell">Display the side heading column at both the left and right of the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-1   </td><td class="BodyCell">Display the side heading column at the left of the grid only (the default)</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-2   </td><td class="BodyCell">Center the side heading column within the grid</td></tr><tr valign="BASELINE" class="BodyRow"><br><td class="BodyCell">-N   </td><td class="BodyCell">Display the side heading column every N columns of the grid and at the left and right sides</td></tr></tbody></table><p class="Normal">This property is specific to grid formatting.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>RepeatHeader</P>|n<P CLASS=PopupDeclaration>Property RepeatHeader As Long</P>|n<P CLASS=PopupNormal>Controls how the top headings of the grid are repeated</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle_RepeatHeader.html#3ca5740x4a2237c')">RepeatHeader</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RowSpan',group:'ICellStyle',sub:'',descr:{name:'RowSpan',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RowSpan</span> As Long</p><br><p class="Normal">The number of rows a particular cell in a grid can span.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is specific to grid formatting and has no meaning for cells not contained in a grid.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Width',group:'ICellStyle',sub:'',descr:{name:'Width',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Width</span> As String</p><br><p class="Normal">Sets the horizontal size of an element cell.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The width can be set as a value or a percentage.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Wrap',group:'ICellStyle',sub:'',descr:{name:'Wrap',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Wrap</span> As Boolean</p><br><p class="Normal">Set whether child elements in the cell should automatically wrap.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsEmpty',group:'IControlStyle',sub:'',descr:{name:'IsEmpty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsEmpty</span> As Boolean</p><br><p class="Normal">True if no style properties have been set for the style object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If <span class="LocalReference">IsEmpty</span> is True then all properties of this objects are either returning their default value or the corresponding property of the parent style object (if applicable).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Accelerator',group:'IControlStyle',sub:'',descr:{name:'Accelerator',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Accelerator</span> As String</p><br><p class="Normal">A read/write property that returns the accelerator character for the control.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ReadOnly',group:'IControlStyle',sub:'',descr:{name:'ReadOnly',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ReadOnly</span> As Boolean</p><br><p class="Normal">This property indicates whether the contents of the control is read-only.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Type',group:'IControlStyle',sub:'',descr:{name:'Type',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ControlTypes</P>|n<P CLASS=PopupDeclaration>typedef enum ControlTypes</P>|n<P CLASS=PopupNormal>Control Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ControlTypes.html#3ca5740x4a1d030')">ControlTypes</a></span></p><br><p class="Normal">The type of control to use for the element.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The control types that are available can be different for each Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Categories',group:'IDefaultStyles',sub:ICategoryStyles,descr:{name:'Categories',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ControlTypes</P>|n<P CLASS=PopupDeclaration>typedef enum ControlTypes</P>|n<P CLASS=PopupNormal>Control Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ControlTypes.html#3ca5740x4a1d030')">ControlTypes</a></span></p><br><p class="Normal">The type of control to use for the element.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The control types that are available can be different for each Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Default',group:'IDefaultStyles',sub:IStyle,descr:{name:'Default',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ControlTypes</P>|n<P CLASS=PopupDeclaration>typedef enum ControlTypes</P>|n<P CLASS=PopupNormal>Control Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ControlTypes.html#3ca5740x4a1d030')">ControlTypes</a></span></p><br><p class="Normal">The type of control to use for the element.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The control types that are available can be different for each Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Grids',group:'IDefaultStyles',sub:IStyle,descr:{name:'Grids',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ControlTypes</P>|n<P CLASS=PopupDeclaration>typedef enum ControlTypes</P>|n<P CLASS=PopupNormal>Control Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ControlTypes.html#3ca5740x4a1d030')">ControlTypes</a></span></p><br><p class="Normal">The type of control to use for the element.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The control types that are available can be different for each Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Labels',group:'IDefaultStyles',sub:IStyle,descr:{name:'Labels',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ControlTypes</P>|n<P CLASS=PopupDeclaration>typedef enum ControlTypes</P>|n<P CLASS=PopupNormal>Control Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ControlTypes.html#3ca5740x4a1d030')">ControlTypes</a></span></p><br><p class="Normal">The type of control to use for the element.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The control types that are available can be different for each Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Navigation',group:'IDefaultStyles',sub:IStyle,descr:{name:'Navigation',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Questions',group:'IDefaultStyles',sub:IQuestionStyles,descr:{name:'Questions',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsEmpty',group:'IFontStyle',sub:'',descr:{name:'IsEmpty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Effects',group:'IFontStyle',sub:'',descr:{name:'Effects',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Family',group:'IFontStyle',sub:'',descr:{name:'Family',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Size',group:'IFontStyle',sub:'',descr:{name:'Size',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'IGlobalQuestions',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Clear',group:'IGlobalQuestions',sub:'',descr:{name:'Clear',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'IGlobalQuestions',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IGlobalQuestions',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IGlobalQuestions',sub:IQuestion,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Create',group:'IInterviewEngine',sub:'',descr:{name:'Create',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PostSingleQuestion',group:'IInterviewEngine',sub:'',descr:{name:'PostSingleQuestion',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Prepare',group:'IInterviewEngine',sub:'',descr:{name:'Prepare',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsLicensed',group:'IInterviewEngine',sub:'',descr:{name:'IsLicensed',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IInterviewEngine',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ScriptEngine',group:'IInterviewEngine',sub:'',descr:{name:'ScriptEngine',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ParseOptions',group:'IInterviewEngine',sub:'',descr:{name:'ParseOptions',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Browser',group:'IInterviewInfo',sub:'',descr:{name:'Browser',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BrowserCapabilities',group:'IInterviewInfo',sub:IProperties,descr:{name:'BrowserCapabilities',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for navigation controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'DataEntryMode',group:'IInterviewInfo',sub:'',descr:{name:'DataEntryMode',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DataEntryMode</span> As Variant()</p><br><p class="Normal">The data entry case's current mode.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ElapsedTime',group:'IInterviewInfo',sub:'',descr:{name:'ElapsedTime',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DataEntryMode</span> As Variant()</p><br><p class="Normal">The data entry case's current mode.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewerID',group:'IInterviewInfo',sub:'',descr:{name:'InterviewerID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DataEntryMode</span> As Variant()</p><br><p class="Normal">The data entry case's current mode.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewMode',group:'IInterviewInfo',sub:'',descr:{name:'InterviewMode',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewMode</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewModes</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewModes</P>|n<P CLASS=PopupNormal>Interview modes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewModes.html#3ca5740x4692e7c')">InterviewModes</a></span></p><br><p class="Normal">Returns the interview mode for the running interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The property will be set when creating the interview. E.g.,</p><br><pre>' Set the Interview Mode property when create the interview<br>Dim modeProperties, modeProperty<br>Set modeProperties = CreateObject("mrProperties.Properties")<br>Set modeProperty = modeProperties.CreateProperty()<br>modeProperty.Name = "<span class="LocalReference">InterviewMode</span>"<br>modeProperty.Value = 1 ' <a href="javascript:openBody('InterviewModes.html#3ca5740x4692e7c')">InterviewModes.imPhone</a><br>modeProperties.Add(modeProperty)<br>Set Interview = InterviewEngine.Create(PROJECT_NAME, InterviewScriptProgram, mdmdoc, Cache, ,null,null,null, modeProperties,0,0)<br></pre><br><p class="Normal">If the <span class="LocalReference">InterviewMode</span> property is not specified, the Interview Mode will be return as follows.</p><br><ol><br><li><p class="IndentedNormal">If sample fields exist, detect the mode from the <span class="LocalReference">InterviewMode</span> sample field</p><br></li><br><li><p class="IndentedNormal">If sample fields do not exist or the <span class="LocalReference">InterviewMode</span> sample field does not exist or its value is not recognized then considere the InterviewId property.</p><br></li><br><li><p class="IndentedNormal">If InterviewerId is set then mode is set to <a href="javascript:openBody('InterviewModes.html#3ca5740x4692e7c')">imLocal</a>, otherwise the mode is set as <a href="javascript:openBody('InterviewModes.html#3ca5740x4692e7c')">imWeb</a></p><br></li><br><li><p class="IndentedNormal">By default, the property returns <a href="javascript:openBody('InterviewModes.html#3ca5740x4692e7c')">imWeb</a>.</p><br></li></ol><br><p class="Normal">It is possible to override the mode via the URL.  E.g., http://server/mriweb/mriWeb.dll?I.Project=ProjectName;I.<span class="LocalReference">InterviewMode</span>=DataEntry</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsAutoAnswer',group:'IInterviewInfo',sub:'',descr:{name:'IsAutoAnswer',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsAutoAnswer</span> As Boolean</p><br><p class="Normal"><b>True</b> if the interview is being answered by an automated script testing tool.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsDebug',group:'IInterviewInfo',sub:'',descr:{name:'IsDebug',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsAutoAnswer</span> As Boolean</p><br><p class="Normal"><b>True</b> if the interview is being answered by an automated script testing tool.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsRestart',group:'IInterviewInfo',sub:'',descr:{name:'IsRestart',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsRestart</span> As Boolean</p><br><p class="Normal"><b>True</b> if the interview is in the process of being restarted</p><br><p class="Subheading">Remarks</p><br><p class="Normal">When an interview is restarted via sample management it is automatically replayed to get to the question that was last asked before the interview was stopped or timed out.  The routing script is executed and the previously entered responses are automatically used to answer the questions.  During this process the <span class="LocalReference">IsRestart</span> property will be True.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsReview',group:'IInterviewInfo',sub:'',descr:{name:'IsReview',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsReview</span> As Boolean</p><br><p class="Normal"><b>True</b> if the interview was started in Review Mode</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">IsReview</span> property enables script to be written that will bypass Quota checks when an interview restarted for review.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LastAsked',group:'IInterviewInfo',sub:'',descr:{name:'LastAsked',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsReview</span> As Boolean</p><br><p class="Normal"><b>True</b> if the interview was started in Review Mode</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">IsReview</span> property enables script to be written that will bypass Quota checks when an interview restarted for review.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LastAskedTime',group:'IInterviewInfo',sub:'',descr:{name:'LastAskedTime',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">LastAskedTime</span> As Date</p><br><p class="Normal">The time when the last question was asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">LastAskedTime</span> is stored stored as coordinated universal time (UTC)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Origin',group:'IInterviewInfo',sub:'',descr:{name:'Origin',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Origin</span> As Variant()</p><br><p class="Normal">The origin of the respondent data.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The origin is a categorical value.  It should be set to one of the categories of the Respondent.<span class="LocalReference">Origin</span> system variable.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OriginName',group:'IInterviewInfo',sub:'',descr:{name:'OriginName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OriginName</span> As String</p><br><p class="Normal">The source software product name.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">OriginName</span> property should only be set when the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Origin</P>|n<P CLASS=PopupDeclaration>Property Origin As Variant()</P>|n<P CLASS=PopupNormal>The origin of the respondent data.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewInfo_Origin.html#3ca5740x4a29920')">Origin</a></span> property is set to the 'Other' category.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PagesAnswered',group:'IInterviewInfo',sub:'',descr:{name:'PagesAnswered',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PagesAnswered</span> As Long</p><br><p class="Normal">The number of pages successfully answered.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The number of pages answered will be different to the number of pages asked if pages were re-asked due to validation errors.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'PagesAsked',group:'IInterviewInfo',sub:'',descr:{name:'PagesAsked',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PagesAsked</span> As Long</p><br><p class="Normal">The number of pages asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">PagesAsked</span> property includes any times the question was re-asked due to validation errors.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RandomSeed',group:'IInterviewInfo',sub:'',descr:{name:'RandomSeed',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PagesAsked</span> As Long</p><br><p class="Normal">The number of pages asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">PagesAsked</span> property includes any times the question was re-asked due to validation errors.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RespondentID',group:'IInterviewInfo',sub:'',descr:{name:'RespondentID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">PagesAsked</span> As Long</p><br><p class="Normal">The number of pages asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">PagesAsked</span> property includes any times the question was re-asked due to validation errors.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ReversalSeed',group:'IInterviewInfo',sub:'',descr:{name:'ReversalSeed',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ReversalSeed</span> As Long</p><br><p class="Normal">The initial reversal seed value for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The initial reversal seed for the interview is set when the interview is first created.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RotationSeed',group:'IInterviewInfo',sub:'',descr:{name:'RotationSeed',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RotationSeed</span> As Long</p><br><p class="Normal">The initial rotation seed value for the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The initial rotation seed for the interview is set when the interview is first created.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ServerTime',group:'IInterviewInfo',sub:'',descr:{name:'ServerTime',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ServerTime</span> As Date</p><br><p class="Normal">The total amount of time spent at the server.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The server time is the length of time that the server spent processing the interview.</p><br><p class="Normal">This value is relatively meaningless when debugging the interview in mrStudio as it includes the real-time spent stepping between Ask statements in the mrStudio GUI.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ServerTimeZone',group:'IInterviewInfo',sub:'',descr:{name:'ServerTimeZone',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ServerTimeZone</span> As Long</p><br><p class="Normal">The time zone in use on the server</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'StartTime',group:'IInterviewInfo',sub:'',descr:{name:'StartTime',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ServerTimeZone</span> As Long</p><br><p class="Normal">The time zone in use on the server</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Timeouts',group:'IInterviewInfo',sub:'',descr:{name:'Timeouts',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Timeouts</span> As Long</p><br><p class="Normal">The number of timeouts that have occurred.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the interview is running in a pure stateless mode, this will be the same as the number of pages asked.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BatchID',group:'IInterviewInfo',sub:'',descr:{name:'BatchID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BatchID</span> As String</p><br><p class="Normal">The batch ID.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BatchName',group:'IInterviewInfo',sub:'',descr:{name:'BatchName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BatchName</span> As String</p><br><p class="Normal">The batch Name.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'EstimatedPages',group:'IInterviewInfo',sub:'',descr:{name:'EstimatedPages',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">EstimatedPages</span> As Long</p><br><p class="Normal">The estimated number of pages in the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default the estimated number of pages is the number of non-system variable fields in the metadata, which can be determined from the IOM.Questions.Count property.</p><br><p class="Normal">The <span class="LocalReference">EstimatedPages</span> property is read/write.  If a value is set for the <span class="LocalReference">EstimatedPages</span> property then subsequent reads of the property will return the value that was set.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'EstimatedProgress',group:'IInterviewInfo',sub:'',descr:{name:'EstimatedProgress',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">EstimatedProgress</span> As Long</p><br><p class="Normal">The estimated number of pages answered.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default the property returns the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>PagesAnswered</P>|n<P CLASS=PopupDeclaration>Property PagesAnswered As Long</P>|n<P CLASS=PopupNormal>The number of pages successfully answered.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewInfo_PagesAnswered.html#3ca5740x4a299e8')">PagesAnswered</a></span> value.  If a value is set for the <span class="LocalReference">EstimatedProgress</span> property then subsequent reads of the property will return the value that was set.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewerTimeZone',group:'IInterviewInfo',sub:'',descr:{name:'InterviewerTimeZone',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewerTimeZone</span> As Long</p><br><p class="Normal">The time zone in use by the interviewer.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsRemoved',group:'IInterviewInfo',sub:'',descr:{name:'IsRemoved',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsRemoved</span> As Boolean</p><br><p class="Normal">Used to indicate whether the case should be removed.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsTest',group:'IInterviewInfo',sub:'',descr:{name:'IsTest',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsTest</span> As Boolean</p><br><p class="Normal">IsTest indicates whether this is a test interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MaxOpcodesExecuted',group:'IInterviewInfo',sub:'',descr:{name:'MaxOpcodesExecuted',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MaxOpcodesExecuted</span> As Long</p><br><p class="Normal">The maximum number of opcodes that can be executed before the script is considered to be in an infinite loop.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">An interview script is internally broken down into a large number of simple instructions which are called opcodes.  A single line of script might correspond to anything from one to hundreds of opcodes.</p><br><p class="Normal">It's possible to write an interview script that gets stuck in an infinite loop.  For example:</p><br><p class="Normal">i=1<br>         While (variable &lt;&gt; 10)<br>             i=i + 2<br>         End While</p><br><p class="Normal">In this case the variable 'i' never has the value 10 and so the loop never exits. An interview that gets stuck in an infinite loop consumes a lot of processor resources and would run for ever.  The <span class="LocalReference">MaxOpcodesExecuted</span> property prevents this from happening.  When the number of opcodes executed reaches the limit specified by the <span class="LocalReference">MaxOpcodesExecuted</span> property an error occurs and the interview is terminated. The count of the number of opcodes executed is reset every time a question is asked.</p><br><p class="Normal">The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MaxQuestionsOnReplay</P>|n<P CLASS=PopupDeclaration>Property MaxQuestionsOnReplay As Long</P>|n<P CLASS=PopupNormal>The maximum number of questions that can be automatically answered before the script is considered to be in an infinite loop.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewInfo_MaxQuestionsOnReplay.html#3ca5740x4a29858')">MaxQuestionsOnReplay</a></span> property is related in that it prevents infinite loops occurring over multiple Ask() statements.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MaxQuestionsOnReplay',group:'IInterviewInfo',sub:'',descr:{name:'MaxQuestionsOnReplay',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MaxQuestionsOnReplay</span> As Long</p><br><p class="Normal">The maximum number of questions that can be automatically answered before the script is considered to be in an infinite loop.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">When the 'Last' navigation is used the interview script is executed as far as possible, skipping over questions that the respondent as already supplied answers to.  The interview script is re-executed as the respondent may have changed an answer and therefore the routing through the interview.  If the respondent has changed an answer it's possible that the new routing will take it in an infinite loop through questions that already have answers.  In this case the 'Last' navigation would never get to the last question.  The <span class="LocalReference">MaxQuestionsOnReplay</span> property determines how many questions with existing answers should be skipped before assuming that an infinite loop as occurred.</p><br><p class="Normal">It's also theorically possible for this situation to occur when an interview is restarted via sample management.  In this case the interview is replayed to the last asked question using answers stored in the database.  This type of infinite loop is less likely to occur in this situation because the replay stops when the last asked question is reached.</p><br><p class="Normal">If this type of infinite loop occurred while the respondent was answering questions, they would probably eventually noticed it and abandon the interview.  It only becomes a serious problem when the interview is automatically replayed as it ties up a lot of computer resources and would otherwise never be abandoned.</p><br><p class="Normal">The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MaxOpcodesExecuted</P>|n<P CLASS=PopupDeclaration>Property MaxOpcodesExecuted As Long</P>|n<P CLASS=PopupNormal>The maximum number of opcodes that can be executed before the script is considered to be in an infinite loop.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewInfo_MaxOpcodesExecuted.html#3ca5740x4a297f4')">MaxOpcodesExecuted</a></span> property is related in that it prevents infinite loops occurring between Ask() statements.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MaxTestErrors',group:'IInterviewInfo',sub:'',descr:{name:'MaxTestErrors',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MaxTestErrors</span> As Long</p><br><p class="Normal">The maximum number of errors that will be displayed in a test survey before the survey terminates.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">MaxTestErrors</span> property defines the maximum number of errors that will be displayed by the default error handler before terminating the survey.  If the default error handler is not used, this property has no effect.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Renderer',group:'IInterviewInfo',sub:'',descr:{name:'Renderer',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Renderer</span> As String</p><br><p class="Normal">Indicates which renderer is to be used by the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RespondentTimeZone',group:'IInterviewInfo',sub:'',descr:{name:'RespondentTimeZone',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RespondentTimeZone</span> As Long</p><br><p class="Normal">The time zone in use by the respondent.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Serial',group:'IInterviewInfo',sub:'',descr:{name:'Serial',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Serial</span> As Long</p><br><p class="Normal">The respondent's serial number.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'UseKeyCodes',group:'IInterviewInfo',sub:'',descr:{name:'UseKeyCodes',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">UseKeyCodes</span> As Boolean</p><br><p class="Normal">This property controls whether key codes configured in metadata are used.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'UsePlayerNavigation',group:'IInterviewInfo',sub:'',descr:{name:'UsePlayerNavigation',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">UsePlayerNavigation</span> As Boolean</p><br><p class="Normal">Used to indicate whether the player can post previous questions.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the UserPlayerNavigation property is set to True then the player can post previous questions.  In the case of a browser this means that the browse back button could be used to return to a previous page of the interview.  If <span class="LocalReference">UsePlayerNavigation</span> is set to False then an error message is displayed and the same question re-asked if the player attempts to post a previous question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'User1',group:'IInterviewInfo',sub:'',descr:{name:'User1',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">User1</span> As String</p><br><p class="Normal">User parameter 1</p><br><p class="Subheading">Remarks</p><br><p class="Normal">User parameters are supplied as part of the interview creation for custom routing</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'User2',group:'IInterviewInfo',sub:'',descr:{name:'User2',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">User2</span> As String</p><br><p class="Normal">User parameter 2</p><br><p class="Subheading">Remarks</p><br><p class="Normal">User parameters are supplied as part of the interview creation for custom routing</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'User3',group:'IInterviewInfo',sub:'',descr:{name:'User3',descr:``,info:'',ex:''}},
    {id:'User4',group:'IInterviewInfo',sub:'',descr:{name:'User4',descr:``,info:'',ex:''}},
    {id:'User5',group:'IInterviewInfo',sub:'',descr:{name:'User5',descr:``,info:'',ex:''}},
    {id:'User6',group:'IInterviewInfo',sub:'',descr:{name:'User6',descr:``,info:'',ex:''}},
    {id:'User7',group:'IInterviewInfo',sub:'',descr:{name:'User7',descr:``,info:'',ex:''}},
    {id:'User8',group:'IInterviewInfo',sub:'',descr:{name:'User8',descr:``,info:'',ex:''}},
    {id:'User9',group:'IInterviewInfo',sub:'',descr:{name:'User9',descr:``,info:'',ex:''}},
    {id:'Log',group:'IInterviewLog',sub:'',descr:{name:'Log',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Log</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Entry As String</P>|n');" onmouseout="return clearpopup();">Entry</span> As String, Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Levels As Long = 1</P>|n');" onmouseout="return clearpopup();">Levels</span> As Long = 1,<br>                Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Id As Long = 1</P>|n');" onmouseout="return clearpopup();">Id</span> As Long = 1 )</p><br><p class="Normal">Writes a formatted log entry to the log.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The log entry is formatted as</p><br><p class="Normal">-P <i>Project</i> -R <i>RespondentID</i> -I <i>InterviewID</i> <b>log entry</b></p><br><p class="Normal">The default log level is LOGLEVEL_INFO.</p><br><p class="Normal">The default LogID is 1.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LogEvent',group:'IInterviewLog',sub:'',descr:{name:'LogEvent',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">LogEvent</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Entry As String</P>|n');" onmouseout="return clearpopup();">Entry</span> As String, Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Level As Long = 1</P>|n');" onmouseout="return clearpopup();">Level</span> As Long = 1 )</p><br><p class="Normal">Writes a log entry to the Window Event <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Log</P>|n<P CLASS=PopupDeclaration>Sub Log( ByVal Entry As String, Optional ByVal Levels As Long = 1,|n                Optional ByVal Id As Long = 1 )</P>|n<P CLASS=PopupNormal>Writes a formatted log entry to the log.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewLog_Log.html#3ca5740x4a2c4e0')">Log</a></span>.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Level As Long = 1</P>|n');" onmouseout="return clearpopup();">Level</span> parameter is a <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Log</P>|n<P CLASS=PopupDeclaration>Sub Log( ByVal Entry As String, Optional ByVal Levels As Long = 1,|n                Optional ByVal Id As Long = 1 )</P>|n<P CLASS=PopupNormal>Writes a formatted log entry to the log.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewLog_Log.html#3ca5740x4a2c4e0')">Log</a></span> level, not a event type.  The event type is set based on the level:</p><br><ul><br><li><p class="IndentedNormal"><b>Error.</b> LOGLEVEL_ERROR, or LOGLEVEL_FATAL</p><br></li><br><li><p class="IndentedNormal"><b>Warning.</b> LOGLEVEL_WARNING</p><br></li><br><li><p class="IndentedNormal"><b>Information.</b> All other log levels.</p><br></li></ul>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LogThis',group:'IInterviewLog',sub:'',descr:{name:'LogThis',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">LogThis</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Id As Long</P>|n');" onmouseout="return clearpopup();">Id</span> As Long, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Entry As String</P>|n');" onmouseout="return clearpopup();">Entry</span> As String )</p><br><p class="Normal">Writes a log entry with <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Id As Long</P>|n');" onmouseout="return clearpopup();">Id</span>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LogThisEx',group:'IInterviewLog',sub:'',descr:{name:'LogThisEx',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">LogThisEx</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Id As Long</P>|n');" onmouseout="return clearpopup();">Id</span> As Long, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Entry As String</P>|n');" onmouseout="return clearpopup();">Entry</span> As String, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Levels As Long</P>|n');" onmouseout="return clearpopup();">Levels</span> As Long )</p><br><p class="Normal">Writes a log entry with <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Id As Long</P>|n');" onmouseout="return clearpopup();">Id</span>, overriding the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Levels As Long</P>|n');" onmouseout="return clearpopup();">Levels</span>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Trace',group:'IInterviewLog',sub:'',descr:{name:'Trace',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Trace</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Entry As String</P>|n');" onmouseout="return clearpopup();">Entry</span> As String, Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Id As Long = 1</P>|n');" onmouseout="return clearpopup();">Id</span> As Long = 1 )</p><br><p class="Normal">Writes a trace entry to the log.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The default LogID is 1.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsActive',group:'IInterviewLog',sub:'',descr:{name:'IsActive',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsActive</span> As Boolean</p><br><p class="Normal">Read-only property that indicates whether the logger is active.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the logger is not active, then all log entries will be written to the Windows Event <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Log</P>|n<P CLASS=PopupDeclaration>Sub Log( ByVal Entry As String, Optional ByVal Levels As Long = 1,|n                Optional ByVal Id As Long = 1 )</P>|n<P CLASS=PopupNormal>Writes a formatted log entry to the log.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewLog_Log.html#3ca5740x4a2c4e0')">Log</a></span>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsTraceEnabled',group:'IInterviewLog',sub:'',descr:{name:'IsTraceEnabled',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsTraceEnabled</span> As Boolean</p><br><p class="Normal">Read-only property that indicates whether trace logging is active.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewID',group:'IInterviewLog',sub:'',descr:{name:'InterviewID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewID</span> As String</p><br><p class="Normal">The session ID for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Project',group:'IInterviewLog',sub:'',descr:{name:'Project',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Project</span> As String</p><br><p class="Normal">The active project name.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RespondentID',group:'IInterviewLog',sub:'',descr:{name:'RespondentID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RespondentID</span> As String</p><br><p class="Normal">The respondent ID.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IInterviewSampleField',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">The name of the field</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IInterviewSampleField',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant</p><br><p class="Normal">The field value.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IInterviewSampleRecord',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IInterviewSampleRecord',sub:IInterviewSampleField,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IInterviewSampleField</P>|n<P CLASS=PopupNormal>A field in a sample management record.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterviewSampleField.html#3ca4a98x4a2cc54')">IInterviewSampleField</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Inserts',group:'ILabel',sub:ILabelInserts,descr:{name:'Inserts',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Inserts</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabelInserts</P>|n<P CLASS=PopupNormal>A collection object that contains LabelInsert objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabelInserts.html#3ca4a98x4a2d230')">ILabelInserts</a></span></p><br><p class="Normal">A read-only collection of <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabelInsert</P>|n<P CLASS=PopupNormal>The LabelInsert object is used to get or set the text for a named insert of a label</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabelInsert.html#3ca4a98x4a2d104')">ILabelInsert</a></span> objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Inserts</span> collection contains an <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabelInsert</P>|n<P CLASS=PopupNormal>The LabelInsert object is used to get or set the text for a named insert of a label</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabelInsert.html#3ca4a98x4a2d104')">ILabelInsert</a></span> object for each of the named inserts in the label and can be used to insert text into the label from script.</p><br><p class="Normal">For example:</p><br><p class="Normal">' Add the time to the question label Q1.Label.<span class="LocalReference">Inserts</span>["TimeNow"] = Now()</p><br><p class="Normal">NOTE:  The <span class="LocalReference">Inserts</span> collection is generated from the label text insertion points. If the label text is modified, the <span class="LocalReference">Inserts</span> collection is re-generated.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'ILabel',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">A read-only property that returns the name of the label.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Only labels added to collections will have a name. For example, labels are named within the IOM.Banners collection.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'ILabel',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">This property returns a <span class="LocalReference">Style</span> object for the label.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Style</span> object is used to override or reset the default presentation styles for the label and associated inserts.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Text',group:'ILabel',sub:'',descr:{name:'Text',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Text</span> As String</p><br><p class="Normal">This property contains the text for the label.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is read only for all labels except Banners and Errors.</p><br><p class="Normal">For example: ' Add a banner label IOM.Banners.AddNew("SECTION", infoClassificationSection.Label)</p><br><p class="Normal">Q1.Ask()</p><br><p class="Normal">' Update the label text IOM.Banners["SECTION"] = infoWinesSection.Label</p><br><p class="Normal">Attempting to set a question label will cause an error to be raised.</p><br><p class="Normal">The put property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'ILabelInsert',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">A read-only property that returns the name of the label insert.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Text',group:'ILabelInsert',sub:'',descr:{name:'Text',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Text</span> As String</p><br><p class="Normal">This property contains the text for the label insert.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The put property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ILabelInserts',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ILabelInserts',sub:ILabelInsert,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabelInsert</P>|n<P CLASS=PopupNormal>The LabelInsert object is used to get or set the text for a named insert of a label</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabelInsert.html#3ca4a98x4a2d104')">ILabelInsert</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'ILabels',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Add</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> As String, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal pLabel As ILabel</P>|n');" onmouseout="return clearpopup();">pLabel</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span> )</p><br><p class="Normal">Adds an existing label to the collection.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The supplied Label object is added to the collection complete with its inserts and style information.</p><br><p class="Normal">The <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> used to refer to the label in the collection must be unique. If a label with the same name already exists it must first be removed before a new label can be added.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AddNew',group:'ILabels',sub:'',descr:{name:'AddNew',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">AddNew</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> As String, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Text As String</P>|n');" onmouseout="return clearpopup();">Text</span> As String ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">Adds a new label to the collection.</p><br><p class="Subheading">Remarks</p><br><p class="Normal"><span class="LocalReference">AddNew</span>() creates a new Label object with the specified text and adds it to the collection of labels.</p><br><p class="Normal">The text for the new Label object can be supplied by an existing label object.  In this case the inserts of the original label are replaced and the resulting text is used for the new label.  The Style for the new label is independent of the original label as only the text was used of the original label was used.  Compare this with the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Add</P>|n<P CLASS=PopupDeclaration>Sub Add( ByVal Name As String, ByVal pLabel As ILabel )</P>|n<P CLASS=PopupNormal>Adds an existing label to the collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels_Add.html#3ca5740x4a2d424')">Add</a></span>() method which can be used to add an existing Label object, complete with inserts and style information.</p><br><p class="Normal">The <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> used to refer to the label in the collection must be unique. If a label with the same name already exists it must first be removed before a new label can be added.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Clear',group:'ILabels',sub:'',descr:{name:'Clear',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Clear</span>( )</p><br><p class="Normal">Removes all items from the collection.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'ILabels',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant )</p><br><p class="Normal">Removes an item from the collection.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ILabels',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ILabels',sub:ILabel,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Attach',group:'IMRCacheObject',sub:'',descr:{name:'Attach',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Attach</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal ParentVariable As IUnknown</P>|n');" onmouseout="return clearpopup();">ParentVariable</span> As IUnknown )</p><br><p class="Normal"><span class="LocalReference">Attach</span> the cached object to a cache variable.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Once the object is attached to a variable it is free to store and retrieve it's state from the child variables.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Detach',group:'IMRCacheObject',sub:'',descr:{name:'Detach',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Detach</span>( )</p><br><p class="Normal"><span class="LocalReference">Detach</span> the cached object from a cache variable.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Once the object is dettached from the variable is can no longer access the variable or it's child variables.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Load',group:'IMRCacheObject',sub:'',descr:{name:'Load',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Load</span>( )</p><br><p class="Normal">Restores the state of the object from the cache</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The cache typically calls the <span class="LocalReference">Load</span> method on a cached object when the state of the cache has changed.  This is a signal to the object that it should restore it's state from the cached state.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Save',group:'IMRCacheObject',sub:'',descr:{name:'Save',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Save</span>( )</p><br><p class="Normal">Stores the state of the object in the cache</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The cache typically calls the <span class="LocalReference">Save</span> method on a cached object when the state of the cache has changed.  This is a signal to the object that it should restore it's state from the cached state.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CacheObjectID',group:'IMRCacheObject',sub:'',descr:{name:'CacheObjectID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CacheObjectID</span> As String</p><br><p class="Normal">Returns the cache ID for the object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the cache object variable has not already been created, the request on this property will cause it to be created.</p><br><p class="Normal">If the object does not already have a cache ID, an ID will be assigned to it.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CacheObjectName',group:'IMRCacheObject',sub:'',descr:{name:'CacheObjectName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CacheObjectName</span> As String</p><br><p class="Normal">Returns the name of the variable used to persist the object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CacheObjectVariable',group:'IMRCacheObject',sub:'',descr:{name:'CacheObjectVariable',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CacheObjectVariable</span> As IUnknown</p><br><p class="Normal">Returns the variable for the cache object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the cache object variable has not already been created, the request on this property will cause it to be created.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsCacheVariableCreated',group:'IMRCacheObject',sub:'',descr:{name:'IsCacheVariableCreated',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsCacheVariableCreated</span> As Boolean</p><br><p class="Normal">Returns true if the cache variable for the object has been created.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">For late bound persistence, it is possible for the object to exist without the cache variable being created.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ObjectCachingProvider',group:'IMRCacheObject',sub:'',descr:{name:'ObjectCachingProvider',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ObjectCachingProvider</span> As String</p><br><p class="Normal">The name of the “Object Caching Provider” to use for this object</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The Object Caching Providers are the means by which the cache can store and retrieve objects from the cache.  The “Generic” Object Caching Provider can generally support the storage and retrieve of all objects that fully support the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IMRCacheObject</P>|n<P CLASS=PopupNormal>This interface is supported by all objects that are persisted in the value cache.  The interface allows a client to re-attach to an object that was saved and then re-loaded from the cache.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRCacheObject.html#3ca4a98x4a318dc')">IMRCacheObject</a></span> interface.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ParentVariable',group:'IMRCacheObject',sub:'',descr:{name:'ParentVariable',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ParentVariable</span> As IUnknown</p><br><p class="Normal">Returns the parent variable of the cache object variable.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">For top-level objects, the parent variable may be NULL.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'INavigation',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">This property returns a <span class="LocalReference">Style</span> object for the navigation control.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Style</span> object is used to override or reset the default presentation styles for the navigation control.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Targets',group:'INavigation',sub:'',descr:{name:'Targets',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Targets</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ISavePoints</P>|n<P CLASS=PopupNormal>A collection object that contains the save-points for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ISavePoints.html#3ca4a98x4690ec8')">ISavePoints</a></span></p><br><p class="Normal">A collection that returns the interview target locations for the navigation object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The collection supports the standard collection properties and methods: Item, Count, and _NewEnum.  The NavGoto type can have as many targets as there have been pages answered in the current path.  The NavFirst and NavPrevious types have one target and the NavNext, NavLast and NavStop have no targets.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Type',group:'INavigation',sub:'',descr:{name:'Type',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>NavigationTypes</P>|n<P CLASS=PopupDeclaration>typedef enum NavigationTypes</P>|n<P CLASS=PopupNormal>Navigation Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('NavigationTypes.html#3ca5740x4693aa0')">NavigationTypes</a></span></p><br><p class="Normal">A read-only property that returns the navigation type.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'INavigation',sub:ILabel,descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">This read/write property returns the label for the navigation control.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The label that is returned is based on the active language, context, and label type.  The navigation label can be modified, but any changes will not be written back into the MDM.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'INavigations',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Add</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>INavigation</P>|n<P CLASS=PopupNormal>The Navigation object is used to set the label or styles of a navigation control.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigation.html#3ca4a98x4a31d8c')">INavigation</a></span></p><br><p class="Normal">Adds an item to the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'INavigations',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant )</p><br><p class="Normal">Removes an item from the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'INavigations',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'INavigations',sub:INavigation,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>INavigation</P>|n<P CLASS=PopupNormal>The Navigation object is used to set the label or styles of a navigation control.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigation.html#3ca4a98x4a31d8c')">INavigation</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As NavigationTypes</P>|n<P CLASS=PopupNormal>This read/write property is used to get or set the default navigation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Default.html#3ca5740x4a32110')">Default</a></span> Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Default',group:'INavigations',sub:'',descr:{name:'Default',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Default</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>NavigationTypes</P>|n<P CLASS=PopupDeclaration>typedef enum NavigationTypes</P>|n<P CLASS=PopupNormal>Navigation Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('NavigationTypes.html#3ca5740x4693aa0')">NavigationTypes</a></span></p><br><p class="Normal">This read/write property is used to get or set the default navigation.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LastSelected',group:'INavigations',sub:'',descr:{name:'LastSelected',descr:`<div class="EverythingUnderTheTitleBar"><p class="Normal">A collection object that contains the navigations defined for the current interview.</p><p class="Subheading">Remarks</p><br><p class="Normal">{Filename: <span class="LocalReference">INavigations</span> }</p><br><p class="Subheading">Groups</p><br><table class="SubordinateList"><br><tbody><tr valign="BASELINE"><br><td class="SubordinateGroupName" colspan="2&quot;"><a name="Operations"></a>Operations</td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Method_s.gif" alt="Method"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Add</P>|n<P CLASS=PopupDeclaration>Function Add( ByVal Index As Variant ) As INavigation</P>|n<P CLASS=PopupNormal>Adds an item to the collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Add.html#3ca5740x4a31fe4')">Add</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">Adds an item to the collection.</p><br></td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Method_s.gif" alt="Method"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Remove</P>|n<P CLASS=PopupDeclaration>Sub Remove( ByVal Index As Variant )</P>|n<P CLASS=PopupNormal>Removes an item from the collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Remove.html#3ca5740x4a322a0')">Remove</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">Removes an item from the collection.</p><br></td></tr><tr valign="BASELINE"><br><td class="SubordinateGroupName" colspan="2&quot;"><a name="Read-onlyProperties"></a>Read-only Properties</td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Count</P>|n<P CLASS=PopupDeclaration>Property Count As Long</P>|n<P CLASS=PopupNormal>The number of items in the collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Count.html#3ca5740x4a320ac')">Count</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">The number of items in the collection.</p><br></td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( ByVal Index As Variant ) As INavigation</P>|n<P CLASS=PopupNormal>Get the collection item at the specified location.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Item.html#3ca5740x4a32174')">Item</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">Get the collection item at the specified location.  (<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As NavigationTypes</P>|n<P CLASS=PopupNormal>This read/write property is used to get or set the default navigation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Default.html#3ca5740x4a32110')">Default</a></span> Property)</p><br></td></tr><tr valign="BASELINE"><br><td class="SubordinateGroupName" colspan="2&quot;"><a name="Read/WriteProperties"></a>Read/Write Properties</td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As NavigationTypes</P>|n<P CLASS=PopupNormal>This read/write property is used to get or set the default navigation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_Default.html#3ca5740x4a32110')">Default</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">This read/write property is used to get or set the default navigation.</p><br></td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>LastSelected</P>|n<P CLASS=PopupDeclaration>Property LastSelected As NavigationTypes</P>|n<P CLASS=PopupNormal>A read-only property that returns the last selected navigation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations_LastSelected.html#3ca5740x4a3223c')">LastSelected</a></span></nobr></td><td class="SubordinateComment"><p class="Summary">A read-only property that returns the last selected navigation.</p><br></td></tr></tbody></table><p style="margin-left: 0in; text-indent: 0in; "></p><p class="Subheading">Interface ID</p><br><p class="Normal">The ID of the <b>INavigations</b> interface is FD76B809-E73F-4AF6-A163-E6CAC613560F.</p><br><p></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Banners',group:'INextPage',sub:ILabels,descr:{name:'Banners',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Banners</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Errors',group:'INextPage',sub:ILabels,descr:{name:'Errors',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Errors</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Navigations',group:'INextPage',sub:INavigations,descr:{name:'Navigations',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Navigations</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>INavigations</P>|n<P CLASS=PopupNormal>A collection object that contains the navigations defined for the current interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INavigations.html#3ca4a98x4a31f80')">INavigations</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RoutingContext',group:'INextPage',sub:'',descr:{name:'RoutingContext',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">RoutingContext</span> As String</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Styles',group:'INextPage',sub:IStyles,descr:{name:'Styles',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Styles</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyles</P>|n<P CLASS=PopupNormal>A collection object that contains Style objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyles.html#3ca4a98x4691c7c')">IStyles</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Title',group:'INextPage',sub:ILabels,descr:{name:'Title',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Title</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'INextPage',sub:ILabels,descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Language',group:'INextPage',sub:'',descr:{name:'Language',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Language</span> As String</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LayoutTemplate',group:'INextPage',sub:'',descr:{name:'LayoutTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">LayoutTemplate</span> As String</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MustAnswer',group:'INextPage',sub:'',descr:{name:'MustAnswer',descr:`<div class="EverythingUnderTheTitleBar"><p class="Normal">The NextPage object is used to manage the next page in the interview.</p><p class="Subheading">Remarks</p><br><p class="Normal">Properties set on the next page object only apply to the next page generated by the interview engine.  Once a question is asked, these properties are reset back to the defaults set on the interview object.</p><br><p class="Normal">With the properties and methods of a NextPage object, you can do the following for the next page in the interview:</p><br><ul><br><li><p class="IndentedNormal">Set the interview label.</p><br></li><br><li><p class="IndentedNormal">Add and remove banners.</p><br></li><br><li><p class="IndentedNormal">Set the error labels and styles.</p><br></li><br><li><p class="IndentedNormal">Set the default styles.</p><br></li><br><li><p class="IndentedNormal">Add and remove navigation controls and set navigation control styles.</p><br></li></ul><br><p class="Normal">The properties from the Interview object that are available on the next page object are as follows:</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Language</P>|n<P CLASS=PopupDeclaration>Property Language As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Language.html#3ca5740x4a32500')">Language</a></span> As String <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>RoutingContext</P>|n<P CLASS=PopupDeclaration>Property RoutingContext As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_RoutingContext.html#3ca5740x4a32690')">RoutingContext</a></span> As String <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Title</P>|n<P CLASS=PopupDeclaration>Property Title As ILabel</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Title.html#3ca5740x4a32758')">Title</a></span> As mrInterview::<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Label</P>|n<P CLASS=PopupDeclaration>Property Label As ILabel</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Label.html#3ca5740x4a3249c')">Label</a></span> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Banners</P>|n<P CLASS=PopupDeclaration>Property Banners As ILabels</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Banners.html#3ca5740x4a323d4')">Banners</a></span> As mrInterview::<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Banners</P>|n<P CLASS=PopupDeclaration>Property Banners As ILabels</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Banners.html#3ca5740x4a323d4')">Banners</a></span> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Errors</P>|n<P CLASS=PopupDeclaration>Property Errors As ILabels</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Errors.html#3ca5740x4a32438')">Errors</a></span> As mrInterview::<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Label</P>|n<P CLASS=PopupDeclaration>Property Label As ILabel</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Label.html#3ca5740x4a3249c')">Label</a></span> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Styles</P>|n<P CLASS=PopupDeclaration>Property Styles As IStyles</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Styles.html#3ca5740x4a326f4')">Styles</a></span> As mrInterview::<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Styles</P>|n<P CLASS=PopupDeclaration>Property Styles As IStyles</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Styles.html#3ca5740x4a326f4')">Styles</a></span> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Navigations</P>|n<P CLASS=PopupDeclaration>Property Navigations As INavigations</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Navigations.html#3ca5740x4a3262c')">Navigations</a></span> As mrInterview::<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Navigations</P>|n<P CLASS=PopupDeclaration>Property Navigations As INavigations</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Navigations.html#3ca5740x4a3262c')">Navigations</a></span> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>LayoutTemplate</P>|n<P CLASS=PopupDeclaration>Property LayoutTemplate As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_LayoutTemplate.html#3ca5740x4a32564')">LayoutTemplate</a></span> As String <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_MustAnswer.html#3ca5740x4a325c8')">MustAnswer</a></span> As Boolean</p><br><p class="Subheading">Groups</p><br><table class="SubordinateList"><br><tbody><tr valign="BASELINE"><br><td class="SubordinateGroupName" colspan="2&quot;"><a name="Read-onlyProperties"></a>Read-only Properties</td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Banners</P>|n<P CLASS=PopupDeclaration>Property Banners As ILabels</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Banners.html#3ca5740x4a323d4')">Banners</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Errors</P>|n<P CLASS=PopupDeclaration>Property Errors As ILabels</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Errors.html#3ca5740x4a32438')">Errors</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Navigations</P>|n<P CLASS=PopupDeclaration>Property Navigations As INavigations</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Navigations.html#3ca5740x4a3262c')">Navigations</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>RoutingContext</P>|n<P CLASS=PopupDeclaration>Property RoutingContext As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_RoutingContext.html#3ca5740x4a32690')">RoutingContext</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Styles</P>|n<P CLASS=PopupDeclaration>Property Styles As IStyles</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Styles.html#3ca5740x4a326f4')">Styles</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Title</P>|n<P CLASS=PopupDeclaration>Property Title As ILabel</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Title.html#3ca5740x4a32758')">Title</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE"><br><td class="SubordinateGroupName" colspan="2&quot;"><a name="Read/WriteProperties"></a>Read/Write Properties</td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Label</P>|n<P CLASS=PopupDeclaration>Property Label As ILabel</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Label.html#3ca5740x4a3249c')">Label</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Language</P>|n<P CLASS=PopupDeclaration>Property Language As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_Language.html#3ca5740x4a32500')">Language</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>LayoutTemplate</P>|n<P CLASS=PopupDeclaration>Property LayoutTemplate As String</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_LayoutTemplate.html#3ca5740x4a32564')">LayoutTemplate</a></span></nobr></td><td class="SubordinateComment"> </td></tr><tr valign="BASELINE" class="SubordinateName"><br><td class="SubordinateName"><nobr><img border="0" src="Property_s.gif" alt="IDL Property"> <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('INextPage_MustAnswer.html#3ca5740x4a325c8')">MustAnswer</a></span></nobr></td><td class="SubordinateComment"> </td></tr></tbody></table><p style="margin-left: 0in; text-indent: 0in; "></p><p class="Subheading">Interface ID</p><br><p class="Normal">The ID of the <b>INextPage</b> interface is 7A6289E9-142C-4047-A885-D353335D7600.</p><br><p></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Load',group:'IObjectCachingProvider',sub:'',descr:{name:'Load',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Load</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Variable As IDispatch</P>|n');" onmouseout="return clearpopup();">Variable</span> As IDispatch ) As Variant</p><br><p class="Normal">Recreates an object from a cache variable</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Save',group:'IObjectCachingProvider',sub:'',descr:{name:'Save',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Save</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Variable As IDispatch</P>|n');" onmouseout="return clearpopup();">Variable</span> As IDispatch, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Value As Variant</P>|n');" onmouseout="return clearpopup();">Value</span> As Variant )</p><br><p class="Normal">Stores information about an object within a cache variable so it can be recreated later</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IObjectCachingProvider',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">The name of the Object Caching Provider</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Each object caching provider must have a unique name.  The ObjectCachingProvider of the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IMRCacheObject</P>|n<P CLASS=PopupNormal>This interface is supported by all objects that are persisted in the value cache.  The interface allows a client to re-attach to an object that was saved and then re-loaded from the cache.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRCacheObject.html#3ca4a98x4a318dc')">IMRCacheObject</a></span> interface determines the name of the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IObjectCachingProvider</P>|n<P CLASS=PopupNormal>The IObjectCachingProvider interface is supported by objects that are plug into the cache and provide it with the ability to store the state of objects into a cache variable and also recreate the object from the cache variable.  Objects stored in the cache need to implement the IMRCacheObject interface.  The IMRCacheObject interface provides an ObjectCachingProvider name the determines the IObjectCachingProvider that it needs to use.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IObjectCachingProvider.html#3ca4a98x4a327bc')">IObjectCachingProvider</a></span> that is used to store and retrieve a particular object from the cache.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AddNew',group:'IObjects',sub:'',descr:{name:'AddNew',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">AddNew</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal bstrName As String</P>|n');" onmouseout="return clearpopup();">bstrName</span> As String, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Object As IDispatch</P>|n');" onmouseout="return clearpopup();">Object</span> As IDispatch )</p><br><p class="Normal">Adds a new object to the collection.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Clear',group:'IObjects',sub:'',descr:{name:'Clear',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Clear</span>( )</p><br><p class="Normal">Removes all items from the collection.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MethodRemove',group:'IObjects',sub:'',descr:{name:'MethodRemove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant )</p><br><p class="Normal">Removes an item from the collection.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IObjects',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IObjects',sub:'',descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As IDispatch</p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IObjects',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As String</p><br><p class="Normal">Gets the name of the specified item in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GetProgID',group:'IPersistXML',sub:'',descr:{name:'GetProgID',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">GetProgID</span>( ) As String</p><br><p class="Normal">Used when objects are persisted to <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>XML</P>|n<P CLASS=PopupDeclaration>Property XML( Optional ByVal ContainerName As String = |d|d ) As String</P>|n<P CLASS=PopupNormal>Performs a save to an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_XML.html#3ca5740x4a332b4')">XML</a></span>, so that the object type is known and can therefore be re-inhstantiated on the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>XML</P>|n<P CLASS=PopupDeclaration>Property XML( Optional ByVal ContainerName As String = |d|d ) As String</P>|n<P CLASS=PopupNormal>Performs a save to an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_XML.html#3ca5740x4a332b4')">XML</a></span>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Load',group:'IPersistXML',sub:'',descr:{name:'Load',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Load</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Node As Object</P>|n');" onmouseout="return clearpopup();">Node</span> As Object, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Reserved As Variant</P>|n');" onmouseout="return clearpopup();">Reserved</span> As Variant )</p><br><p class="Normal">Performs an in-proc load from an <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>XML</P>|n<P CLASS=PopupDeclaration>Property XML( Optional ByVal ContainerName As String = |d|d ) As String</P>|n<P CLASS=PopupNormal>Performs a save to an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_XML.html#3ca5740x4a332b4')">XML</a></span> DOM object.</p><br><p class="Subheading">Parameters</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel"><span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Node As Object</P>|n');" onmouseout="return clearpopup();">Node</span></td><td class="DefinitionBody"><p class="Normal">The XMLDOMNode object from which loading takes place.</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel"><span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Reserved As Variant</P>|n');" onmouseout="return clearpopup();">Reserved</span></td><td class="DefinitionBody"><p class="Normal">Not used.</p><br></td></tr></tbody></table><p class="Subheading">Remarks</p><br><p class="Normal">This method cannot be used if the object on which the method is called and the XMLDOMNode object are on different sides of a boundary which requires marshalling.</p><br><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>LoadXML</P>|n<P CLASS=PopupDeclaration>Sub LoadXML( ByVal XML As String )</P>|n<P CLASS=PopupNormal>Performs a load from an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_LoadXML.html#3ca5740x4a33124')">LoadXML</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LoadXML',group:'IPersistXML',sub:'',descr:{name:'LoadXML',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">LoadXML</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal XML As String</P>|n');" onmouseout="return clearpopup();">XML</span> As String )</p><br><p class="Normal">Performs a load from an <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal XML As String</P>|n');" onmouseout="return clearpopup();">XML</span> string.</p><br><p class="Subheading">Parameters</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel"><span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal XML As String</P>|n');" onmouseout="return clearpopup();">XML</span></td><td class="DefinitionBody"><p class="Normal">The <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal XML As String</P>|n');" onmouseout="return clearpopup();">XML</span> string from which loading takes place.</p><br></td></tr></tbody></table><p class="Subheading">Remarks</p><br><p class="Normal">This method should be used if the object on which the method is called and the XMLDOMNode object are on different sides of a boundary which requires marshalling.</p><br><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Load</P>|n<P CLASS=PopupDeclaration>Sub Load( ByVal Node As Object, ByVal Reserved As Variant )</P>|n<P CLASS=PopupNormal>Performs an in-proc load from an XML DOM object.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_Load.html#3ca5740x4a32ff8')">Load</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Save',group:'IPersistXML',sub:'',descr:{name:'Save',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Save</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Node As Object</P>|n');" onmouseout="return clearpopup();">Node</span> As Object )</p><br><p class="Normal">Performs an in-proc save from an <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>XML</P>|n<P CLASS=PopupDeclaration>Property XML( Optional ByVal ContainerName As String = |d|d ) As String</P>|n<P CLASS=PopupNormal>Performs a save to an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_XML.html#3ca5740x4a332b4')">XML</a></span> DOM object.</p><br><p class="Subheading">Parameters</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel"><span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Node As Object</P>|n');" onmouseout="return clearpopup();">Node</span></td><td class="DefinitionBody"><p class="Normal">The XMLDOMNode object from which loading takes place.</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Reserved</td><td class="DefinitionBody"><p class="Normal">Not used.</p><br></td></tr></tbody></table><p class="Subheading">Remarks</p><br><p class="Normal">This method cannot be used if the object on which the method is called and the XMLDOMNode object are on different sides of a boundary which requires marshalling.</p><br><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>XML</P>|n<P CLASS=PopupDeclaration>Property XML( Optional ByVal ContainerName As String = |d|d ) As String</P>|n<P CLASS=PopupNormal>Performs a save to an XML string.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_XML.html#3ca5740x4a332b4')">XML</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'XML',group:'IPersistXML',sub:'',descr:{name:'XML',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">XML</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal ContainerName As String = |d|d</P>|n');" onmouseout="return clearpopup();">ContainerName</span> As String = "" ) As String</p><br><p class="Normal">Performs a save to an <span class="LocalReference">XML</span> string.</p><br><p class="Subheading">Return Value</p><br><p class="Normal">An <span class="LocalReference">XML</span> string containing the object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This method should be used if the object on which the method is called and the XMLDOMNode object are on different sides of a boundary which requires marshalling.</p><br><p class="Subheading">See Also</p><br><p class="Normal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Save</P>|n<P CLASS=PopupDeclaration>Sub Save( ByVal Node As Object )</P>|n<P CLASS=PopupNormal>Performs an in-proc save from an XML DOM object.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IPersistXML_Save.html#3ca5740x4a331ec')">Save</a></span></p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Load',group:'IPersistXMLDOM',sub:'',descr:{name:'Load',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Load</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Element As IDispatch</P>|n');" onmouseout="return clearpopup();">Element</span> As IDispatch )</p><br><p class="Normal">Loads the object from supplied DOM element.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Save',group:'IPersistXMLDOM',sub:'',descr:{name:'Save',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Save</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Element As IDispatch</P>|n');" onmouseout="return clearpopup();">Element</span> As IDispatch )</p><br><p class="Normal">Saves the object to the supplied DOM element.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CopyTo',group:'IProperty',sub:'',descr:{name:'CopyTo',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">CopyTo</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Property As IProperty</P>|n');" onmouseout="return clearpopup();">Property</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span> )</p><br><p class="Normal">Copies the property name and value to the supplied property object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Copy',group:'IProperty',sub:'',descr:{name:'Copy',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Copy</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span></p><br><p class="Normal">Returns a copy of the current property object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IProperty',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">The name of the property.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IProperty',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant</p><br><p class="Normal">The property value.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'IProperties',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Add</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Property As IProperty</P>|n');" onmouseout="return clearpopup();">Property</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span> )</p><br><p class="Normal">Adds an item to the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CopyTo',group:'IProperties',sub:'',descr:{name:'CopyTo',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">CopyTo</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Properties As IProperties</P>|n');" onmouseout="return clearpopup();">Properties</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span> )</p><br><p class="Normal">Copies the properties collection to the supplied properties collection object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CreateProperty',group:'IProperties',sub:IProperty,descr:{name:'CreateProperty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">CreateProperty</span>( ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span></p><br><p class="Normal">Creates a new property object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IProperties',sub:IProperty,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Method)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'IProperties',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Property As IProperty</P>|n');" onmouseout="return clearpopup();">Property</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span> )</p><br><p class="Normal">Removes an item from the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Copy',group:'IProperties',sub:IProperties,descr:{name:'Copy',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Copy</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span></p><br><p class="Normal">Returns a copy of the current properties collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IProperties',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AddNew',group:'IPropertiesEx',sub:'',descr:{name:'AddNew',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">AddNew</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> As String, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Value As Variant</P>|n');" onmouseout="return clearpopup();">Value</span> As Variant )</p><br><p class="Normal">Adds a new item to the collection with name/value pair.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CreateProperties',group:'IPropertiesEx',sub:'',descr:{name:'CreateProperties',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">CreateProperties</span>( ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span></p><br><p class="Normal">Creates a new Properties collection in-proc to the original Properties on which the method was called.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The new Properties can then be inserted into the original Properties.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RemoveByName',group:'IPropertiesEx',sub:'',descr:{name:'RemoveByName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">RemoveByName</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Name As String</P>|n');" onmouseout="return clearpopup();">Name</span> As String )</p><br><p class="Normal">Removes the specified item name from the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'IPropertiesEx',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Add</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Property As IProperty</P>|n');" onmouseout="return clearpopup();">Property</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span> )</p><br><p class="Normal">Adds an item to the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CopyTo',group:'IPropertiesEx',sub:'',descr:{name:'CopyTo',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">CopyTo</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Properties As IProperties</P>|n');" onmouseout="return clearpopup();">Properties</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span> )</p><br><p class="Normal">Copies the properties collection to the supplied properties collection object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CreateProperty',group:'IPropertiesEx',sub:'',descr:{name:'CreateProperty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">CreateProperty</span>( ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span></p><br><p class="Normal">Creates a new property object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IPropertiesEx',sub:'',descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Method)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'IPropertiesEx',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Property As IProperty</P>|n');" onmouseout="return clearpopup();">Property</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperty</P>|n<P CLASS=PopupNormal>The Property object represents a project property.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperty.html#3ca4a98x4a33dac')">IProperty</a></span> )</p><br><p class="Normal">Removes an item from the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Copy',group:'IPropertiesEx',sub:IProperties,descr:{name:'Copy',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Copy</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span></p><br><p class="Normal">Returns a copy of the current properties collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IPropertiesEx',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Values',group:'IPropertiesEx',sub:'',descr:{name:'Values',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Values</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">Allows one-line insertion of new Property values and extraction of Property values.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Ask',group:'IQuestion',sub:'',descr:{name:'Ask',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Ask</span>( <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>LabelArgs() As Variant</P>|n');" onmouseout="return clearpopup();">LabelArgs</span>() As Variant )</p><br><p class="Normal">Asks a question in an interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Ask</span> method causes the Interview state machine to stop script execution, save the interview state, and to generate question output.  The question output generated is dependent on the type of question and the properties that have been set on the interview, next page, and question objects.</p><br><p class="Normal">The <span class="LocalReference">Ask</span> method is ignored if:</p><br><ul><br><li><p class="IndentedNormal"><span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n<P CLASS=PopupNormal>This read/write property is used to enable or disable automatic no answer questions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_MustAnswer.html#3ca5740x4a3896c')">MustAnswer</a></span> is False AND</p><br></li><br><li><p class="IndentedNormal">The question is a categorical or compound question and there are no categories OR</p><br></li><br><li><p class="IndentedNormal">The question is a categorical or compound question and the only category is a NA (No Answer) category OR</p><br></li><br><li><p class="IndentedNormal">The question is a block, compound, page, or loop and it doesn't have any sub-questions.</p><br></li></ul><br><p class="Normal">The most common situation in which a question is skipped automatically is when all responses or sub-questions have been filtered out due to the response given to a previous question.</p><br><p class="Subheading">Example</p><br><pre>'  q1 and q2 are lists of brands<br>IOM.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n<P CLASS=PopupNormal>This read/write property is used to enable or disable automatic no answer questions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_MustAnswer.html#3ca5740x4a3896c')">MustAnswer</a></span> = False<br>q1.<span class="LocalReference">Ask</span>()<br>q2.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Categories</P>|n<P CLASS=PopupDeclaration>Property Categories As ICategories</P>|n<P CLASS=PopupNormal>A read-only property that returns a collection of category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Categories.html#3ca5740x4a342c0')">Categories</a></span> = q1.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Response</P>|n<P CLASS=PopupDeclaration>Property Response As IResponse</P>|n<P CLASS=PopupNormal>The read-only Response property returns the response object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Response.html#3ca5740x4a38e80')">Response</a></span>'  If the respondant doesn't choose any brands at q1 then q2 has<br>'  no categories and the following line won't have any effect.<br>q2.<span class="LocalReference">Ask</span>()If the question label has inserts then the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>LabelArgs() As Variant</P>|n');" onmouseout="return clearpopup();">LabelArgs</span> parameter can be used to specify<br>values for those inserts.  For example, if the question label for Spend was "How<br>much did you spend? (e.g. {ExampleValue:f})" then the question could be asked as<br>Spend.<span class="LocalReference">Ask</span>(123.45) and 123.45 would be inserted into the label and formatted appropriately<br>for the current locale, e.g. "123.45" or "123,45".This method is not supported in mrDataManager 1.0<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BuildDBFilter',group:'IQuestion',sub:'',descr:{name:'BuildDBFilter',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">BuildDBFilter</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal bstrFieldName As String = L|d|d</P>|n');" onmouseout="return clearpopup();">bstrFieldName</span> As String = L"" ) As String</p><br><p class="Normal">This method is used to build a database filter according to its response value.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This method is only supported by single and multiple response database questions. If the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal bstrFieldName As String = L|d|d</P>|n');" onmouseout="return clearpopup();">bstrFieldName</span> is omitted, the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>QuestionName</P>|n<P CLASS=PopupDeclaration>Property QuestionName As String</P>|n<P CLASS=PopupNormal>A read-only property that returns the name of the question or sub-question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_QuestionName.html#3ca5740x4a38cf0')">QuestionName</a></span> will be used as the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal bstrFieldName As String = L|d|d</P>|n');" onmouseout="return clearpopup();">bstrFieldName</span>.</p><br><p class="Subheading">Example</p><br><pre>Make.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span>() 'A DB multiple response question for favorite automobile makers.<br>'Model is filtered based on the Make response. For example, if BMW and Audi is<br>'selected above, the return value of Make.<span class="LocalReference">BuildDBFilter</span> will be (MakeID='BMW') OR (MakeID='Audi').<br>Model.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>DBFilter</P>|n<P CLASS=PopupDeclaration>Property DBFilter As String</P>|n<P CLASS=PopupNormal>This property is used to get and set the Database filter for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_DBFilter.html#3ca5740x4a34450')">DBFilter</a></span> = Make.<span class="LocalReference">BuildDBFilter</span>("MakeID")<br>Model.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span>()<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ClearOffPathResponse',group:'IQuestion',sub:'',descr:{name:'ClearOffPathResponse',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">ClearOffPathResponse</span>( )</p><br><p class="Normal">Clears the off-path response to the question (if applicable)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Normally when a question becomes off-path the response in the case data is cleared (exactly when that happens depends on the OffPathDataMode property) but the response is kept so that it is presented to the respondent if the question is redisplayed.  The <span class="LocalReference">ClearOffPathResponse</span>() method can be used to clear the response to the question if the response is off-path.  The <span class="LocalReference">ClearOffPathResponse</span>() also clears the responses to any “other specify” and sub-questions that the question may have. Compare this to setting Question.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Info</P>|n<P CLASS=PopupDeclaration>Property Info As IQuestionInfo</P>|n<P CLASS=PopupNormal>This read-only property returns paradata relating to the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Info.html#3ca5740x4a3470c')">Info</a></span>.OffPathResponse to Null which will only clear the response of the immediate question object.</p><br><p class="Normal">The typical use of the <span class="LocalReference">ClearOffPathResponse</span>() method is to clear all off-path responses (using IOM.Questions[..].<span class="LocalReference">ClearOffPathResponse</span>()) when the respondent changes an answer that invalidates all off-path responses.</p><br><p class="Normal">For example, imagine an interview that asks which fruit the respondent likes the most, and then asks questions like why they like that fruit and how often they eat it.  If the respondent navigates back to the question about which fruit they liked the most, and then changes their answer then the answers to the subsequent questions should be completely discarded as they might have been applicable to apples but the respondent might have now selected oranges as their favorite fruit.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Delete',group:'IQuestion',sub:'',descr:{name:'Delete',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Delete</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal vtIndex As Variant</P>|n');" onmouseout="return clearpopup();">vtIndex</span> As Variant )</p><br><p class="Normal">This method is used to delete the given iteration of the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This method is only supported by unbound loop question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Exists',group:'IQuestion',sub:'',descr:{name:'Exists',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Exists</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal vtIndex As Variant</P>|n');" onmouseout="return clearpopup();">vtIndex</span> As Variant ) As Boolean</p><br><p class="Normal">This method is used to check given iteration exists or not.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This method is only supported by numeric loop question for now.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Preserve',group:'IQuestion',sub:'',descr:{name:'Preserve',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Preserve</span>( )</p><br><p class="Normal">Preserves the response of a question such that the question can never be re-asked or reviewed.</p><br><p class="Subheading">Remarks</p><br><p class="Normal"><span class="LocalReference">Preserve</span> could be used in CAPI where a respondent will only answer questions if they cannot be reviewed by the interviewer.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Show',group:'IQuestion',sub:'',descr:{name:'Show',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Show</span>( <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>LabelArgs() As Variant</P>|n');" onmouseout="return clearpopup();">LabelArgs</span>() As Variant )</p><br><p class="Normal">Shows a question with its associated value or values.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Show</span> method is identical to <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span> method except that the user is not able to set a response value for the question.</p><br><p class="Normal">This method is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Banners',group:'IQuestion',sub:ILabels,descr:{name:'Banners',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Banners</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p><br><p class="Normal">A read-only property that returns a collection of <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Label</P>|n<P CLASS=PopupDeclaration>Property Label As ILabel</P>|n<P CLASS=PopupNormal>This read-only property returns the label for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Label.html#3ca5740x4a3489c')">Label</a></span> objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Question banners are displayed only when the question is asked.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Categories',group:'IQuestion',sub:ICategories,descr:{name:'Categories',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Categories</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span></p><br><p class="Normal">A read-only property that returns a collection of category objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Categories</span> collection supports the standard collection properties and methods:  <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-question.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Item.html#3ca5740x4a347d4')">Item</a></span>, <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Count</P>|n<P CLASS=PopupDeclaration>Property Count As Long</P>|n<P CLASS=PopupNormal>This is a read only property that returns the number of iterations for a Loop or the number of sub-questions for a Block or Compound.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Count.html#3ca5740x4a343ec')">Count</a></span>, and _NewEnum.  The collection also supports a helper property, Filter.</p><br><p class="Normal">The categories properties is not used for Block or Page questions, but can be used for all other question types.  For a Compound question, the <span class="LocalReference">Categories</span> property returns the shared category list for the sub-questions.  For a categorical loop question, the <span class="LocalReference">Categories</span> property returns the categories which define the loop iterations.  Finally, for a Simple question, this property returns the possible categorical responses for the question.  All simple data types, except Boolean, can have categorical responses associated with them.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Codes',group:'IQuestion',sub:ICategories,descr:{name:'Codes',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Codes</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span></p><br><p class="Normal">A read only property that returns a collection of category objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The categories returned by the <span class="LocalReference">Codes</span> property represent the alternative categorical responses for a question.  Optionally used on simple questions, these categorical responses typically include categories such as Don't Know, No Answer, or Refused</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IQuestion',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">This is a read only property that returns the number of iterations for a Loop or the number of sub-questions for a Block or Compound.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">For a Loop that does not have a maximum number of iterations, the <span class="LocalReference">Count</span> property returns the number of iterations that have been accessed.  The <span class="LocalReference">Count</span> property is not available for the Simple question type.  The <span class="LocalReference">Count</span> property is the number of sub-questions after the filter has been applied.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Errors',group:'IQuestion',sub:ILabels,descr:{name:'Errors',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Errors</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabels</P>|n<P CLASS=PopupNormal>A collection object that contains label objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabels.html#3ca4a98x4a2d3c0')">ILabels</a></span></p><br><p class="Normal">This property returns a collection of label objects for the question error texts.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">IQuestion.Errors</span> collection can be used to display errors associated with a question when the question is asked.  The default formatting causes error texts to be displayed in red.</p><br><p class="Normal">After a question has been answered some standard validation is performed on the response.  If one of these validation checks fails then an appropriate error is automatically added to the <span class="LocalReference">Errors</span> collection and the question is re-asked, displaying the error message.  If the standard validation checks pass and a custom validation function has been defined (using <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Function</P>|n<P CLASS=PopupDeclaration>Property Function As String</P>|n<P CLASS=PopupNormal>The custom validation function to use</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValidation_Function.html#3ca5740x4691e70')">IValidation.Function</a></span>) then that custom validation function is executed.  That custom validation function can add additional errors to the <span class="LocalReference">IQuestion.Errors</span> collection.</p><br><p class="Normal">The <span class="LocalReference">IQuestion.Errors</span> collection is automatically cleared before the standard validation is performed.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Info',group:'IQuestion',sub:IQuestionInfo,descr:{name:'Info',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Info</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestionInfo</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestionInfo.html#3ca4a98x4a39074')">IQuestionInfo</a></span></p><br><p class="Normal">This read-only property returns paradata relating to the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsDBQuestion',group:'IQuestion',sub:'',descr:{name:'IsDBQuestion',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsDBQuestion</span> As Boolean</p><br><p class="Normal">This read-only property indicates whether the question is a Database question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'IQuestion',sub:ILabel,descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ILabel</P>|n<P CLASS=PopupNormal>The Label object is used to get or set a label for questions, banners, errors, and navigation controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ILabel.html#3ca4a98x4a2cf10')">ILabel</a></span></p><br><p class="Normal">This read-only property returns the label for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The question label that is returned is based on the active language, context, and label type.  The question label can be modified, but any changes will not be written back into the MDM.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OtherCategories',group:'IQuestion',sub:ICategories,descr:{name:'OtherCategories',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OtherCategories</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span></p><br><p class="Normal">A read-only property that returns a collection of “other specify” categories.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The categories returned by the <span class="LocalReference">OtherCategories</span> property represent the “Other Specify” categorical responses for a question.</p><br><p class="Normal">The <span class="LocalReference">OtherCategories</span> collection is similar to the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Categories</P>|n<P CLASS=PopupDeclaration>Property Categories As ICategories</P>|n<P CLASS=PopupNormal>A read-only property that returns a collection of category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Categories.html#3ca5740x4a342c0')">Categories</a></span> collection except it is a flattened list and only contains categories that have an associated “other specify” question</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ParentQuestion',group:'IQuestion',sub:IQuestion,descr:{name:'ParentQuestion',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ParentQuestion</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestion</P>|n<P CLASS=PopupNormal>The Question object is used to represent a question in the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion.html#3ca4a98x4a34004')">IQuestion</a></span></p><br><p class="Normal">A read-only property that returns the parent question if one exists.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">NULL is returned if the question does not have a parent question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Properties',group:'IQuestion',sub:'',descr:{name:'Properties',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Properties</span> As IDispatch</p><br><p class="Normal">A read-only property that returns the properties for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The question properties are taken from the variable properties in the MDM.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionDataType',group:'IQuestion',sub:'',descr:{name:'QuestionDataType',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionDataType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>DataTypeConstants</P>|n<P CLASS=PopupDeclaration>typedef enum DataTypeConstants</P>|n<P CLASS=PopupNormal>Used to identify the type of data stored in a Field e.g. Real, Text</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('DataTypeConstants.html#3ca5740x4a1dd1c')">DataTypeConstants</a></span></p><br><p class="Normal">A read-only property that returns the question data type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is only valid for questions with a <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>QuestionType</P>|n<P CLASS=PopupDeclaration>Property QuestionType As QuestionTypes</P>|n<P CLASS=PopupNormal>A read-only property that returns the question type.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_QuestionType.html#3ca5740x4a38e1c')">QuestionType</a></span> of <a href="javascript:openBody('QuestionTypes.html#3ca5740x4694bd8')">qtSimple</a>.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionFullName',group:'IQuestion',sub:'',descr:{name:'QuestionFullName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionFullName</span> As String</p><br><p class="Normal">A read-only property that returns the full name of the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the question is a sub-question of another question object, then the full-name will not match the name.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionName',group:'IQuestion',sub:'',descr:{name:'QuestionName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionName</span> As String</p><br><p class="Normal">A read-only property that returns the name of the question or sub-question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionType',group:'IQuestion',sub:'',descr:{name:'QuestionType',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>QuestionTypes</P>|n<P CLASS=PopupDeclaration>typedef enum QuestionTypes</P>|n<P CLASS=PopupNormal>Question Types.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('QuestionTypes.html#3ca5740x4694bd8')">QuestionTypes</a></span></p><br><p class="Normal">A read-only property that returns the question type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The question type determines which properties are available.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Response',group:'IQuestion',sub:IResponse,descr:{name:'Response',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Response</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IResponse</P>|n<P CLASS=PopupNormal>The Response object is used to get or set a response value on a question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse.html#3ca4a98x468f7ac')">IResponse</a></span></p><br><p class="Normal">The read-only <span class="LocalReference">Response</span> property returns the response object for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The response object can be used to set and unset a question value, as well as setting the default value.  The <span class="LocalReference">Response</span> object is only available for Simple questions, for which it is the default property.  The following examples show how the <span class="LocalReference">Response</span> object can be used:</p><br><pre>' Unset the response for Q1<br>Q1.<span class="LocalReference">Response</span> = NULL' Set the default value for Q1<br>Q1.<span class="LocalReference">Response</span>.Default = {Female}' Use the response value of Q1 in an expression<br>Total.<span class="LocalReference">Response</span> = Total.<span class="LocalReference">Response</span> + Q1<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'IQuestion',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">This property returns a <span class="LocalReference">Style</span> object for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Style</span> object is used to override or reset the default presentation styles for the question.  For Loop, Block, Page, and Compound question types, the <span class="LocalReference">Style</span> object can be used to set styles for all of the sub-questions.  Any styles set in a parent question can be further overridden in a sub-question.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Validation',group:'IQuestion',sub:IValidation,descr:{name:'Validation',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Validation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValidation</P>|n<P CLASS=PopupNormal>The Validation object is used to manage the question validation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValidation.html#3ca4a98x4691e0c')">IValidation</a></span></p><br><p class="Normal">This read-only property that defines the validation for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The validation object is used only with Simple question types.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BannerTemplate',group:'IQuestion',sub:'',descr:{name:'BannerTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BannerTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Banner template for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The banner template is used when replacing mrBanner tags.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'DBFilter',group:'IQuestion',sub:'',descr:{name:'DBFilter',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DBFilter</span> As String</p><br><p class="Normal">This property is used to get and set the Database filter for the question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ErrorTemplate',group:'IQuestion',sub:'',descr:{name:'ErrorTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ErrorTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a Error template for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The error template is used when replacing mrError tags.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IQuestion',sub:IQuestion,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">The <span class="LocalReference">Item</span> property is used to return a sub-question.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Item</span> property is only available for the Loop, Block, Compound, and Page question types, for which it is the default property.  The <span class="LocalReference">Item</span> method is used to return the sub-questions from an iteration of a Loop or to return a sub-question from a Block, Compound, or Page.  The <span class="LocalReference">Item</span> property would not normally be used for Blocks, Compounds and Pages, except when a sub-question has the same name as a property.</p><br><p class="Subheading">Example</p><br><pre>' <span class="LocalReference">Item</span> example: <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span> the sub-questions on the loop<br>Loop1[{ExA}].<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span>() ' Equivalent to: Loop1.<span class="LocalReference">Item</span>[{ExA}].<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span>()' <span class="LocalReference">Item</span> example: Block sub-question uses reserved name<br>Block1["<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Style</P>|n<P CLASS=PopupDeclaration>Property Style As IStyle</P>|n<P CLASS=PopupNormal>This property returns a Style object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Style.html#3ca5740x4a38fac')">Style</a></span>"].<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Ask</P>|n<P CLASS=PopupDeclaration>Sub Ask( LabelArgs() As Variant )</P>|n<P CLASS=PopupNormal>Asks a question in an interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Ask.html#3ca5740x4a34068')">Ask</a></span>()The index parameter on <span class="LocalReference">Item</span> is optional.  If the index is not specified, then the property<br>sets or gets the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Response</P>|n<P CLASS=PopupDeclaration>Property Response As IResponse</P>|n<P CLASS=PopupNormal>The read-only Response property returns the response object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Response.html#3ca5740x4a38e80')">Response</a></span> value.' Equivalent to Q1.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Response</P>|n<P CLASS=PopupDeclaration>Property Response As IResponse</P>|n<P CLASS=PopupNormal>The read-only Response property returns the response object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Response.html#3ca5740x4a38e80')">Response</a></span> = {Female}<br>Q1 = {Female}' Equivalent to TotalQ.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Response</P>|n<P CLASS=PopupDeclaration>Property Response As IResponse</P>|n<P CLASS=PopupNormal>The read-only Response property returns the response object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Response.html#3ca5740x4a38e80')">Response</a></span> = TotalQ.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Response</P>|n<P CLASS=PopupDeclaration>Property Response As IResponse</P>|n<P CLASS=PopupNormal>The read-only Response property returns the response object for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Response.html#3ca5740x4a38e80')">Response</a></span> + 1<br>TotalQ = TotalQ + 1<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'LayoutTemplate',group:'IQuestion',sub:'',descr:{name:'LayoutTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">LayoutTemplate</span> As String</p><br><p class="Normal">This read/write property is used to get or set the layout template for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The layout template is typically the name of a file which defines where the questions on a page should be rendered.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MustAnswer',group:'IQuestion',sub:'',descr:{name:'MustAnswer',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MustAnswer</span> As Boolean</p><br><p class="Normal">This read/write property is used to enable or disable automatic no answer questions.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the <span class="LocalReference">MustAnswer</span> property is set, the question must be answered.  If <span class="LocalReference">MustAnswer</span> is set to False, then any questions with a default value or a no answer (NA) special response will automatically be answered.  If <span class="LocalReference">MustAnswer</span> is set to False and a question does not have a default or NA as a valid response, then the question needs to be answered before proceeding to the next question.</p><br><p class="Normal">If no value is set for this property then the <span class="LocalReference">MustAnswer</span> setting of the parent question is used, i.e. the iterations of a loop or the questions in a block will use the <span class="LocalReference">MustAnswer</span> setting for the loop or block question respectively.  Top level questions will use the IOM.<span class="LocalReference">MustAnswer</span> (which has a default of True) if no <span class="LocalReference">MustAnswer</span> value has been set.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'NavBarTemplate',group:'IQuestion',sub:'',descr:{name:'NavBarTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">NavBarTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a NavBar template for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The navigation bar template is used when replacing mrNavBar tags.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionFilter',group:'IQuestion',sub:'',descr:{name:'QuestionFilter',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionFilter</span> As Variant</p><br><p class="Normal">The sub-questions of this question that are to be asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This is similar to the Filter property of <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span> and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategory</P>|n<P CLASS=PopupNormal>The Category object is used to represent a possible category response for a question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory.html#3ca4a98x4a1ef1c')">ICategory</a></span>.  It determines the sub-questions that are returned by the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-question.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Item.html#3ca5740x4a347d4')">Item</a></span> property when using a numeric index and by the For-Each enumerator.  It also affects the value returned by the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Count</P>|n<P CLASS=PopupDeclaration>Property Count As Long</P>|n<P CLASS=PopupNormal>This is a read only property that returns the number of iterations for a Loop or the number of sub-questions for a Block or Compound.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Count.html#3ca5740x4a343ec')">Count</a></span> property.  All questions are still accessible from the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-question.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Item.html#3ca5740x4a347d4')">Item</a></span> property using the question name.  Unlike the Filter property of <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategories</P>|n<P CLASS=PopupNormal>A collection object that contains Category objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategories.html#3ca4a98x4a1ecc4')">ICategories</a></span> and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategory</P>|n<P CLASS=PopupNormal>The Category object is used to represent a possible category response for a question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategory.html#3ca4a98x4a1ef1c')">ICategory</a></span>, this Filter property only affects the immediate sub-questions.</p><br><p class="Normal">For a categorical loop the <span class="LocalReference">QuestionFilter</span> property can be a categorical value or a range expression, e.g. {Monday, Tuesday, Wednesday} or “Monday..Wednesday”</p><br><p class="Normal">For a numeric loop the <span class="LocalReference">QuestionFilter</span> property can be a range expression or a numeric value.  A numeric value is interpreted as a range expression expression of “..n” where n is the numeric value, e.g. the following are equivalent:</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">PersonLoop.<span class="LocalReference">QuestionFilter</span></td><td class="DefinitionBody"><p class="Normal">“..5”</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">PersonLoop.<span class="LocalReference">QuestionFilter</span></td><td class="DefinitionBody"><p class="Normal">5</p><br></td></tr></tbody></table><p class="Normal">A typical example of filtering a numeric loop would be to reduce the number if iterations asked based on the response to a previous question, e.g:</p><br><p class="Normal">' Filter the numeric loop sub-questions based on a previous question PersonLoop.<span class="LocalReference">QuestionFilter</span> = PeopleInHousehold</p><br><p class="Normal">For a compound, block, or page question the <span class="LocalReference">QuestionFilter</span> property is a range expression containing a list of the questions to ask, e.g.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Demographics.<span class="LocalReference">QuestionFilter</span></td><td class="DefinitionBody"><p class="Normal">“age, gender, education”</p><br></td></tr></tbody></table><p class="Normal">The <span class="LocalReference">QuestionFilter</span> is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionOrder',group:'IQuestion',sub:'',descr:{name:'QuestionOrder',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionOrder</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>OrderConstants</P>|n<P CLASS=PopupDeclaration>typedef enum OrderConstants</P>|n<P CLASS=PopupNormal>Defines the display order for the Element objects in an Elements collection.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('OrderConstants.html#3ca5740x4694020')">OrderConstants</a></span></p><br><p class="Normal">The order of the sub-questions of this question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Setting the order property controls the sequence in which Questions objects are returned by the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Item</P>|n<P CLASS=PopupDeclaration>Property Item( Optional ByVal Index As Variant ) As Variant</P>|n<P CLASS=PopupNormal>The Item property is used to return a sub-question.  (Default Property)</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_Item.html#3ca5740x4a347d4')">Item</a></span> property when using a numeric index and also by the For-Each enumerator.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuestionTemplate',group:'IQuestion',sub:'',descr:{name:'QuestionTemplate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuestionTemplate</span> As String</p><br><p class="Normal">This property is used to get or set the name of a question template for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The question template is used when replacing mrData tags that do not specify a question element.</p><br><p class="Normal">This property is not supported in mrDataManager 1.0</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AnswerCount',group:'IQuestionInfo',sub:'',descr:{name:'AnswerCount',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">AnswerCount</span> As Long</p><br><p class="Normal">The total number of times a question has been successfully answered.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">AnswerCount</span> is the number of times in total the question has been successfully answered.  It's similar to the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>AskCount</P>|n<P CLASS=PopupDeclaration>Property AskCount As Long</P>|n<P CLASS=PopupNormal>The total number of times a question has asked.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestionInfo_AskCount.html#3ca5740x4a3913c')">AskCount</a></span> property but it isn't incremented when an invalid answer is submitted.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AskCount',group:'IQuestionInfo',sub:'',descr:{name:'AskCount',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">AskCount</span> As Long</p><br><p class="Normal">The total number of times a question has asked.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">AskCount</span> is the number of times the respondent has been asked the question. This includes re-asking the question when returning to it after selecting the Previous navigation and also re-asks due to validation errors.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ErrorCount',group:'IQuestionInfo',sub:'',descr:{name:'ErrorCount',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ErrorCount</span> As Long</p><br><p class="Normal">The number of times this question has failed standard or custom validation.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">ErrorCount</span> is untransacted and so represents the total number of times in the interview that the question has had to be reasked because the respondent answered it incorrectly.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsOnPath',group:'IQuestionInfo',sub:'',descr:{name:'IsOnPath',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsOnPath</span> As Boolean</p><br><p class="Normal">This read-only property returns True if the question is currently on-path.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Due to save-points and changes to routing, it is possible for a question to have a response and yet be off path.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OffPathCodedResponse',group:'IQuestionInfo',sub:'',descr:{name:'OffPathCodedResponse',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OffPathCodedResponse</span> As Variant</p><br><p class="Normal">This read-only property returns the coded off-path response.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OnPathAnswerCount',group:'IQuestionInfo',sub:'',descr:{name:'OnPathAnswerCount',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OnPathAnswerCount</span> As Long</p><br><p class="Normal">The number of times the question has been answered on-path.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">OnPathAnswerCount</span> property is similar to the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>AnswerCount</P>|n<P CLASS=PopupDeclaration>Property AnswerCount As Long</P>|n<P CLASS=PopupNormal>The total number of times a question has been successfully answered.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestionInfo_AnswerCount.html#3ca5740x4a390d8')">AnswerCount</a></span> property except it only counts answers that are on-path.  For example, if the Previous navigation is selected causing an answer to become off-path then the <span class="LocalReference">OnPathAnswerCount</span> property is decremented.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OffPathResponse',group:'IQuestionInfo',sub:'',descr:{name:'OffPathResponse',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OffPathResponse</span> As Variant</p><br><p class="Normal">This read-only property returns the off-path response.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IQuestions',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IQuestions',sub:IQuestion,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestion</P>|n<P CLASS=PopupNormal>The Question object is used to represent a question in the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion.html#3ca4a98x4a34004')">IQuestion</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Categories',group:'IQuestionStyle',sub:ICategoryStyles,descr:{name:'Categories',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Categories</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICategoryStyles</P>|n<P CLASS=PopupNormal>A collection object that contains CategoryStyle objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICategoryStyles.html#3ca4a98x4a21820')">ICategoryStyles</a></span></p><br><p class="Normal">The default styles for each type of category for this question type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The category styles set for each question type override the category styles set for DefaultStyles.<span class="LocalReference">Categories</span>.  Refer to the DefaultStyles object for a description of the available category types.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Labels',group:'IQuestionStyle',sub:IStyles,descr:{name:'Labels',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Labels</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyles</P>|n<P CLASS=PopupNormal>A collection object that contains Style objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyles.html#3ca4a98x4691c7c')">IStyles</a></span></p><br><p class="Normal">The default styles for each type of label for this question type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The label styles set for each question type override the label styles set for DefaultStyles.<span class="LocalReference">Labels</span>.  Refer to the DefaultStyles object for a description of the available label types.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Style',group:'IQuestionStyle',sub:IStyle,descr:{name:'Style',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Style</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">The default styles for the question type.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is used to define the presentation styles for the question input control.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IQuestionStyles',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IQuestionStyles',sub:IQuestionStyle,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestionStyle</P>|n<P CLASS=PopupNormal>The QuestionStyle object is used to define the default presentation styles used by each question type.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestionStyle.html#3ca4a98x4a39394')">IQuestionStyle</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'IResponse',sub:'',descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As String</p><br><p class="Normal">The label corresponding to a categorical response</p><br><p class="Subheading">Remarks</p><br><p class="Normal">For a categorical question the <span class="LocalReference">Label</span> property is the label corresponding to the selected response category.  Multiple labels will be returned for a multi-coded response.  If the response is an <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Other</P>|n<P CLASS=PopupDeclaration>Property Other As IResponses</P>|n<P CLASS=PopupNormal>This read only property returns a collection of Response objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse_Other.html#3ca5740x468facc')">Other</a></span> Specify category then the <span class="LocalReference">Label</span> property includes the response to the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Other</P>|n<P CLASS=PopupDeclaration>Property Other As IResponses</P>|n<P CLASS=PopupNormal>This read only property returns a collection of Response objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse_Other.html#3ca5740x468facc')">Other</a></span> Specify question.  For all other question types the <span class="LocalReference">Label</span> property is an empty string.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IResponse',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">This read-only property returns the name of an other response category.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is only used for other responses and is blank for standard question values.  The value name is the name of the category that requires other data.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Other',group:'IResponse',sub:IResponses,descr:{name:'Other',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Other</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IResponses</P>|n<P CLASS=PopupNormal>A collection object containing response objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponses.html#3ca4a98x468fbf8')">IResponses</a></span></p><br><p class="Normal">This read only property returns a collection of Response objects.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The other responses collection is used to retrieve values for categories set with the '<span class="LocalReference">Other</span>' attribute.  The collection supports the standard collection properties and methods: Item, Count, and _NewEnum.  The collection also supports Add and Remove methods for adding and removing other values.  Item look-up into the other values collection is based on the name of the '<span class="LocalReference">Other</span>' category.  If no parameter is set for the Item property, the standard '<span class="LocalReference">Other</span>' category is used.</p><br><pre>' If set, get the <span class="LocalReference">Other</span> value<br>If Q1 * {<span class="LocalReference">Other</span>} Then<br>    OtherVal = Q1.Response.<span class="LocalReference">Other</span><br>End If' If set, get the Positive <span class="LocalReference">Other</span> value<br>If Q1 * {PositiveOther} Then<br>    PositiveOtherVal = Q1.Response.<span class="LocalReference">Other</span>[{PositiveOther}]<br>End If<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Coded',group:'IResponse',sub:'',descr:{name:'Coded',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Coded</span> As Variant</p><br><p class="Normal">A read/write property that returns the coded value for the question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'DataType',group:'IResponse',sub:'',descr:{name:'DataType',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">DataType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>DataTypeConstants</P>|n<P CLASS=PopupDeclaration>typedef enum DataTypeConstants</P>|n<P CLASS=PopupNormal>Used to identify the type of data stored in a Field e.g. Real, Text</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('DataTypeConstants.html#3ca5740x4a1dd1c')">DataTypeConstants</a></span></p><br><p class="Normal">Read-only property that returns the value object data type.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Default',group:'IResponse',sub:'',descr:{name:'Default',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Default</span> As Variant</p><br><p class="Normal">This read/write property is used to set the default value for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The default value is used by the interview engine when MustAnswer is set to False.  For example, if you wanted the gender question to default to Female, set the DefaultValue property to female.  If the question is unanswered, then Female would be used.</p><br><p class="Subheading">Example</p><br><pre>' Set the default value for Gender<br>Gender.Response.<span class="LocalReference">Default</span> = {Female}<br>Gender.Ask()<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Initial',group:'IResponse',sub:'',descr:{name:'Initial',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Initial</span> As Variant</p><br><p class="Normal">This read/write property is used to set the initial value for the question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Initial</span> value differs from the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As Variant</P>|n<P CLASS=PopupNormal>This read/write property is used to set the default value for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse_Default.html#3ca5740x468f8d8')">Default</a></span> value in that it is the initially selected response when the question is first asked.  Regardless of the setting of MustAnswer, a question does not require an answer when an initial value is set. Hence, when a question has an initial value, the default is ignored.</p><br><p class="Subheading">Example</p><br><pre>' Set the default value for Gender<br>Gender.Response.<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As Variant</P>|n<P CLASS=PopupNormal>This read/write property is used to set the default value for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse_Default.html#3ca5740x468f8d8')">Default</a></span> = {Female}<br>Gender.Ask()<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsDirty',group:'IResponse',sub:'',descr:{name:'IsDirty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsDirty</span> As Boolean</p><br><p class="Normal">A read/write property that is automatically set to True when a value is updated.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">IsDirty</span> property has no impact on how data is written and is merely a way of checking for changes in question values.  For example, the <span class="LocalReference">IsDirty</span> property could get set to False at one point in the script and then later it could be checked to see if value has been updated.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IResponse',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant</p><br><p class="Normal">This read/write property is the actual value assigned to the value object.  (<span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Default</P>|n<P CLASS=PopupDeclaration>Property Default As Variant</P>|n<P CLASS=PopupNormal>This read/write property is used to set the default value for the question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IResponse_Default.html#3ca5740x468f8d8')">Default</a></span> Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ValueObj',group:'IResponse',sub:IValue,descr:{name:'ValueObj',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ValueObj</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValue</P>|n<P CLASS=PopupNormal>The value object is used to get or set a value on a command binding.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValue.html#3ca4a98x46924b0')">IValue</a></span></p><br><p class="Normal">The value object assigned to the Response object.  The value object is an alternative mechanism for setting a value on a response.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IResponses',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IResponses',sub:'',descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As Variant</p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BindQuestionToIdentifier',group:'IRunningInterview',sub:'',descr:{name:'BindQuestionToIdentifier',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">BindQuestionToIdentifier</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Identifier As IDispatch</P>|n');" onmouseout="return clearpopup();">Identifier</span> As IDispatch )</p><br><p class="Normal">Binds a question value to an identifier.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If the question does not exist, the identifier value object is not set.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Close',group:'IRunningInterview',sub:'',descr:{name:'Close',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Close</span>( )</p><br><p class="Normal">Closes a running interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Calling <span class="LocalReference">Close</span> causes any subsequent calls to <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Post</P>|n<P CLASS=PopupDeclaration>Function Post( ByVal Event As Variant, ByVal ReturnType As PostReturnTypes ) As|n    Variant</P>|n<P CLASS=PopupNormal>Posts an event to the interview in order to generate the next page.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview_Post.html#3ca5740x4690498')">Post</a></span> to fail.  If the interview is processing an event when <span class="LocalReference">Close</span> is called, Break is called on the script program and the call to <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Post</P>|n<P CLASS=PopupDeclaration>Function Post( ByVal Event As Variant, ByVal ReturnType As PostReturnTypes ) As|n    Variant</P>|n<P CLASS=PopupNormal>Posts an event to the interview in order to generate the next page.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview_Post.html#3ca5740x4690498')">Post</a></span> returns a failed status.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GenerateEndOfInterviewText',group:'IRunningInterview',sub:'',descr:{name:'GenerateEndOfInterviewText',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">GenerateEndOfInterviewText</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal ReturnType As PostReturnTypes</P>|n');" onmouseout="return clearpopup();">ReturnType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>PostReturnTypes</P>|n<P CLASS=PopupDeclaration>typedef enum PostReturnTypes</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('PostReturnTypes.html#3ca5740x46944d0')">PostReturnTypes</a></span> ) As<br>    Variant</p><br><p class="Normal">Returns the appropriate page XML for the end of the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Generates the appropriate page XML for the end of the interview. If the interview has been stopped, a stopped interview page XML will be returned, if it has been completed a completed page will be returned, otherwise NULL will be returned.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Post',group:'IRunningInterview',sub:'',descr:{name:'Post',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Post</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Event As Variant</P>|n');" onmouseout="return clearpopup();">Event</span> As Variant, ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal ReturnType As PostReturnTypes</P>|n');" onmouseout="return clearpopup();">ReturnType</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>PostReturnTypes</P>|n<P CLASS=PopupDeclaration>typedef enum PostReturnTypes</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('PostReturnTypes.html#3ca5740x46944d0')">PostReturnTypes</a></span> ) As<br>    Variant</p><br><p class="Normal">Posts an event to the interview in order to generate the next page.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Post</span>() method is used to submit Player XML to the IOM and get the Player XML corresponding to the next question.  The schema for the Player XML can be found elsewhere in the DDL.</p><br><p class="Normal">After an interview has been created using the Create() method the <span class="LocalReference">Post</span>() method should be called with a value for the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Event As Variant</P>|n');" onmouseout="return clearpopup();">Event</span> parameter of either “” or Null.  The <span class="LocalReference">Post</span>() method will return the Player XML corresponding to the first question.  The Player XML will be returned as either a string or XML DOM depending on the value of the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal ReturnType As PostReturnTypes</P>|n');" onmouseout="return clearpopup();">ReturnType</span> parameter.</p><br><p class="Normal">The Player XML is normally converted to HTML by using the RenderHTML() of either the HTML or CATI Player.  The HTTP post resulting from the HTML is then converted back to Player XML using the CreatePlayerPost() method of the Player.  The Player XML produced by the Player will have the Response and Navigation nodes of the XML populated based on the responses of the respondent.  It is possible to create new “Players” in addition to the current HTML and CATI Players.  The only requirement is to convert Player XML to a form that can be displayed to a respondent and to convert thier responses back to Player XML again.</p><br><p class="Normal">Once Player XML with populated Response and Navigation nodes has been obtained the <span class="LocalReference">Post</span>() method is called again with the Player XML as the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Event As Variant</P>|n');" onmouseout="return clearpopup();">Event</span> parameter. The <span class="LocalReference">Post</span>() method will then execute the routing script of the interview based on the submitted response and navigation and return the next page of the interview. The process of calling <span class="LocalReference">Post</span>() with the populated Player XML in order to get the next page of the interview normally continues until the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span> property becomes something other then <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isIdle</a> (e.g. <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isComplete</a>, <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isStopped</a> etc).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Replay',group:'IRunningInterview',sub:'',descr:{name:'Replay',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Replay</span>( )</p><br><p class="Normal"><span class="LocalReference">Replay</span> the interview from the start.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Stop',group:'IRunningInterview',sub:'',descr:{name:'Stop',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Stop</span>( )</p><br><p class="Normal">Stops the interview.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Calling this method has the same effect as using the <span class="LocalReference">Stop</span> navigation. The interview status is set to <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isStopped</a> and DataCollection.Status is written as RespondentStopped.</p><br><p class="Normal">The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Close</P>|n<P CLASS=PopupDeclaration>Sub Close( )</P>|n<P CLASS=PopupNormal>Closes a running interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview_Close.html#3ca5740x468ff18')">Close</a></span> method should still be called for interviews that have been stopped.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CacheSubscription',group:'IRunningInterview',sub:'',descr:{name:'CacheSubscription',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CacheSubscription</span> As IDispatch</p><br><p class="Normal">The cache subscription that the interview is using</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CurrentQuestion',group:'IRunningInterview',sub:IQuestion,descr:{name:'CurrentQuestion',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">CurrentQuestion</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IQuestion</P>|n<P CLASS=PopupNormal>The Question object is used to represent a question in the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion.html#3ca4a98x4a34004')">IQuestion</a></span></p><br><p class="Normal">Returns the current question.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The interview must be in the <a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">isIdle</a> state for the current question to be returned. Idle indicates that a question has been asked and the interview is awaiting the next post.</p><br><p class="Normal">Returns NULL if a question has not been asked or the interview is not idle.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'HasSampleRecord',group:'IRunningInterview',sub:'',descr:{name:'HasSampleRecord',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">HasSampleRecord</span> As Boolean</p><br><p class="Normal">Indicates whether the interview has a sample record.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InputLocaleId',group:'IRunningInterview',sub:'',descr:{name:'InputLocaleId',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InputLocaleId</span> As Long</p><br><p class="Normal">The locale for input of data to the interview</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewProperties',group:'IRunningInterview',sub:IProperties,descr:{name:'InterviewProperties',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewProperties</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IProperties</P>|n<P CLASS=PopupNormal>A collection of property objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IMRProperties.html#3ca4a98x4a33570')">IProperties</a></span></p><br><p class="Normal">The properties defined for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewScriptingObject',group:'IRunningInterview',sub:IInterview,descr:{name:'InterviewScriptingObject',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewScriptingObject</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IInterview</P>|n<P CLASS=PopupNormal>The Interview object is used to manage the interview.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview.html#3ca4a98x4a25004')">IInterview</a></span></p><br><p class="Normal">The interview scripting object for the running interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewScriptProgram',group:'IRunningInterview',sub:IInterview,descr:{name:'InterviewScriptProgram',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewScriptProgram</span> As IDispatch</p><br><p class="Normal">The script program for the interview</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewStatus',group:'IRunningInterview',sub:'',descr:{name:'InterviewStatus',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span></p><br><p class="Normal">The interview status.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MDMDocument',group:'IRunningInterview',sub:'',descr:{name:'MDMDocument',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MDMDocument</span> As IDispatch</p><br><p class="Normal">The metadata document the interview is based on</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MessagesDocument',group:'IRunningInterview',sub:'',descr:{name:'MessagesDocument',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MessagesDocument</span> As IDispatch</p><br><p class="Normal">The metadata document containing standard texts</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'OutputLocaleId',group:'IRunningInterview',sub:'',descr:{name:'OutputLocaleId',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">OutputLocaleId</span> As Long</p><br><p class="Normal">The locale for output of data from the interview</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ProjectName',group:'IRunningInterview',sub:'',descr:{name:'ProjectName',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ProjectName</span> As String</p><br><p class="Normal">The name of the project</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SessionToken',group:'IRunningInterview',sub:'',descr:{name:'SessionToken',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SessionToken</span> As String</p><br><p class="Normal">This read-only property returns a unique token that identifies the interview.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The session token is generated from a 16 byte GUID that is combined with the 4 byte run number.  The 20 bytes is then base32 encoded to form a 32 character token.</p><br><p class="Normal">The token is case-insensitive so that it can also be used as the mrCache filename.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'TerminateSignal',group:'IRunningInterview',sub:'',descr:{name:'TerminateSignal',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">TerminateSignal</span> As Long</p><br><p class="Normal">The signal value specified in a call to the Terminate() method.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If Terminate has not been called then the <span class="LocalReference">TerminateSignal</span> is 0.</p><br><p class="Normal">If the <span class="LocalReference">TerminateSignal</span> is set, it is used as the return code to sample management.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewerSessionToken',group:'IRunningInterview',sub:'',descr:{name:'InterviewerSessionToken',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewerSessionToken</span> As String</p><br><p class="Normal">This read-only property returns a unique token that identifies the interviewer.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The Interviewer session token should not be set for Web interviews.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'QuotaEngine',group:'IRunningInterview',sub:'',descr:{name:'QuotaEngine',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">QuotaEngine</span> As IDispatch</p><br><p class="Normal">The <span class="LocalReference">QuotaEngine</span> for the interview.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SampleRecordXML',group:'IRunningInterview',sub:'',descr:{name:'SampleRecordXML',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SampleRecordXML</span> As String</p><br><p class="Normal">The Sample Record XML for the interview</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'SampleRecordXMLDocument',group:'IRunningInterview',sub:'',descr:{name:'SampleRecordXMLDocument',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">SampleRecordXMLDocument</span> As IDispatch</p><br><p class="Normal">The Sample Record XML Document for the interview</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The Sample Record XML Document is set as an XML DOM document or element. The Sample Record XML Document is returned as an XML DOM document.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ValidateResponses',group:'IRunningInterview',sub:'',descr:{name:'ValidateResponses',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ValidateResponses</span> As Boolean</p><br><p class="Normal">Automatically validate the responses when a question is asked</p><br><p class="Subheading">Remarks</p><br><p class="Normal">When the Ask method on a Question is invoked, the response to the question is automatically validated if <span class="LocalReference">ValidateResponses</span> is True (the default value).  If <span class="LocalReference">ValidateResponses</span> is set to False, the question can be manually validated using Question.Validation.Validate(<a href="javascript:openBody('ValidateActions.html#3ca5740x46954dc')">vaUpdateErrors</a>)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Add',group:'IRunningInterviews',sub:'',descr:{name:'Add',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Add</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Interview As IRunningInterview</P>|n<P CLASS=PopupNormal>The running interview to add to the collection.</P>|n');" onmouseout="return clearpopup();">Interview</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IRunningInterview</P>|n<P CLASS=PopupNormal>The Running Interview interface exposes the properties and methods of a running interview</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview.html#3ca4a98x468fd88')">IRunningInterview</a></span> )</p><br><p class="Normal">Adds an interview to the running interviews collection.</p><br><p class="Subheading">Parameters</p><br><table class="ArgList"><br><tbody><tr valign="BASELINE"><br><td class="ArgName"><img border="0" src="parmin.gif" alt="Input argument">Interview</td><td class="ArgComment"><p class="Parameter">The running interview to add to the collection.</p><br></td></tr></tbody></table><p class="Subheading">Remarks</p><br><p class="Normal">Adds an interview created by the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Interview As IRunningInterview</P>|n<P CLASS=PopupNormal>The running interview to add to the collection.</P>|n');" onmouseout="return clearpopup();">Interview</span> Engine to the running interviews collection.</p><br><p class="Normal">The interview session token is used as the key to the running interviews collection.  Thus, an error is returned if an interview with same interview session token already exists in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GetTimedOutInterview',group:'IRunningInterviews',sub:'',descr:{name:'GetTimedOutInterview',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">GetTimedOutInterview</span>( ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IRunningInterview</P>|n<P CLASS=PopupNormal>The Running Interview interface exposes the properties and methods of a running interview</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview.html#3ca4a98x468fd88')">IRunningInterview</a></span></p><br><p class="Normal">Get the first timed out interview from the running interviews collection but didn't removed it.</p><br><p class="Subheading">Return Value</p><br><p class="Normal">The interview that has been geted.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If there are no timed out interviews in the running interviews collection, NULL is returned.</p><br><p class="Normal">An interview is considered timed-out when the elapsed time since the last question exceeds the timeout specified in the interview properties.  The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span> property on the running interview can be used to determine if an interview time out has occurred.</p><br><p class="Normal">The Removed and Close method should be called on the interview returned from <span class="LocalReference">GetTimedOutInterview</span>. This ensures that the interview resources are freed.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Remove',group:'IRunningInterviews',sub:'',descr:{name:'Remove',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">Remove</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n<P CLASS=PopupNormal>The index of the interview to remove.  This is either the zero-based integer position or the interview session token.</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IRunningInterview</P>|n<P CLASS=PopupNormal>The Running Interview interface exposes the properties and methods of a running interview</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview.html#3ca4a98x468fd88')">IRunningInterview</a></span></p><br><p class="Normal">Removes the specified interview from the running interviews collection.</p><br><p class="Subheading">Parameters</p><br><table class="ArgList"><br><tbody><tr valign="BASELINE"><br><td class="ArgName"><img border="0" src="parmin.gif" alt="Input argument">Index</td><td class="ArgComment"><p class="Parameter">The index of the interview to remove.  This is either the zero-based integer position or the interview session token.</p><br></td></tr></tbody></table><p class="Subheading">Return Value</p><br><p class="Normal">The interview that has been removed.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The Close method should be called on the interview returned from <span class="LocalReference">Remove</span>. This ensures that the interview resources are freed.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'RemoveTimedOutInterview',group:'IRunningInterviews',sub:'',descr:{name:'RemoveTimedOutInterview',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">RemoveTimedOutInterview</span>( ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IRunningInterview</P>|n<P CLASS=PopupNormal>The Running Interview interface exposes the properties and methods of a running interview</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview.html#3ca4a98x468fd88')">IRunningInterview</a></span></p><br><p class="Normal">Removes the first timed out interview from the running interviews collection.</p><br><p class="Subheading">Return Value</p><br><p class="Normal">The interview that has been removed.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If there are no timed out interviews in the running interviews collection, NULL is returned.</p><br><p class="Normal">An interview is considered timed-out when the elapsed time since the last question exceeds the timeout specified in the interview properties.  The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>InterviewStatus</P>|n<P CLASS=PopupDeclaration>typedef enum InterviewStatus</P>|n<P CLASS=PopupNormal>Interview status codes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('InterviewStatus.html#3ca5740x4693070')">InterviewStatus</a></span> property on the running interview can be used to determine if an interview time out has occurred.</p><br><p class="Normal">The Close method should be called on the interview returned from <span class="LocalReference">RemoveTimedOutInterview</span>. This ensures that the interview resources are freed.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IRunningInterviews',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of interviews in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IRunningInterviews',sub:IRunningInterview,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IRunningInterview</P>|n<P CLASS=PopupNormal>The Running Interview interface exposes the properties and methods of a running interview</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IRunningInterview.html#3ca4a98x468fd88')">IRunningInterview</a></span></p><br><p class="Normal">Gets the specified interview from the collection.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Go',group:'ISavePoint',sub:'',descr:{name:'Go',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Go</span>( )</p><br><p class="Normal">Sets the interview state back to that prior to the question ask.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">For example calling <span class="LocalReference">Go</span> on the save-point “Q1” would cause the interview state to be reset back to how it was prior to the first time that Q1 was asked.</p><br><pre>' Save-point to Q1<br>IOM.SavePoints["Q1"].<span class="LocalReference">Go</span>()<br></pre><br><p class="Normal">Using <span class="LocalReference">Go</span>() on the save-point “Q1-1” would reset the interview state back to how it was prior to the second ask of Q1.  At the point in the interview the “on-path” answer count of Q1 is 1.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Label',group:'ISavePoint',sub:'',descr:{name:'Label',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Label</span> As String</p><br><p class="Normal">Read-only property containing a text label for the save point. (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'ISavePoint',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">A read-only property that returns the save-point ID.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Name</span> uniquely identifies a question asked in the interview.  The name is made up of the question name and the on-path answer count.  For example, the first time Q1 is asked it has no previous answers and the save-point name is just “Q1”.  The second time Q1 is asked, if there is already a previous answer then the save-point name is “Q1-1” where the “-1” indicates Q1 is being asked and there is already one on-path answer for the question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'ISavePoints',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'ISavePoints',sub:ISavePoint,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ISavePoint</P>|n<P CLASS=PopupNormal>The SavePoint object is the used to return the state of an interview to that at a previous question.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ISavePoint.html#3ca4a98x4690d30')">ISavePoint</a></span></p><br><p class="Normal">Get the collection item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'UseQuestionLabels',group:'ISavePoints',sub:'',descr:{name:'UseQuestionLabels',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">UseQuestionLabels</span> As Boolean</p><br><p class="Normal">If True the question labels are used as the labels for the save points</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If True the question labels are used as the labels for the save points. If False the save-point names are used as the labels.  The default is False.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'EndOfInterview',group:'IStandardTexts',sub:'',descr:{name:'EndOfInterview',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">EndOfInterview</span> As String</p><br><p class="Normal">The message displayed in the end of interview page.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default, this property returns the label of the <span class="LocalReference">EndOfInterview</span> standard text question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'InterviewStopped',group:'IStandardTexts',sub:'',descr:{name:'InterviewStopped',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">InterviewStopped</span> As String</p><br><p class="Normal">The message displayed in the interview stopped page.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default, this property returns the label of the <span class="LocalReference">InterviewStopped</span> standard text question.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'CopyTo',group:'IStyle',sub:'',descr:{name:'CopyTo',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">CopyTo</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Destination As IStyle</P>|n');" onmouseout="return clearpopup();">Destination</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span>,<br>                Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal AllCascadedStyles As Boolean = 0</P>|n');" onmouseout="return clearpopup();">AllCascadedStyles</span> As Boolean = 0 )</p><br><p class="Normal">Copies the styles from one style object to another.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The optional <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal AllCascadedStyles As Boolean = 0</P>|n');" onmouseout="return clearpopup();">AllCascadedStyles</span> property is used to switch between copying all of the cascaded styles and just the styles in the derived style object.  By default, the <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal AllCascadedStyles As Boolean = 0</P>|n');" onmouseout="return clearpopup();">AllCascadedStyles</span> parameter is set to False.</p><br><p class="Normal"><b>Note</b>. Default property values are not copied.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Audio',group:'IStyle',sub:IAudioStyle,descr:{name:'Audio',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Audio</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IAudioStyle</P>|n<P CLASS=PopupNormal>The AudioStyle object is used to enable audio playback and record and control the layout of the playback and record controls.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IAudioStyle.html#3ca4a98x4a1ea6c')">IAudioStyle</a></span></p><br><p class="Normal">The <span class="LocalReference">Audio</span> property is used to set audio (play and record) styles.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Cell',group:'IStyle',sub:ICellStyle,descr:{name:'Cell',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Cell</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>ICellStyle</P>|n<P CLASS=PopupNormal>The CellStyle object is used to set presentation styles for the cell in which the interview object is displayed.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ICellStyle.html#3ca4a98x4a219b0')">ICellStyle</a></span></p><br><p class="Normal">The <span class="LocalReference">Cell</span> property is used to set cell styles.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Control',group:'IStyle',sub:IControlStyle,descr:{name:'Control',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Control</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IControlStyle</P>|n<P CLASS=PopupNormal>The ControlStyle object is used to set presentation styles for the interview object control.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IControlStyle.html#3ca4a98x4a22570')">IControlStyle</a></span></p><br><p class="Normal">The <span class="LocalReference">Control</span> property is used to set control styles.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Font',group:'IStyle',sub:IFontStyle,descr:{name:'Font',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Font</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IFontStyle</P>|n<P CLASS=PopupNormal>The FontStyle object is used to set font styles for the interview object.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IFontStyle.html#3ca4a98x4a22a20')">IFontStyle</a></span></p><br><p class="Normal">The <span class="LocalReference">Font</span> property is used to set font styles.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsEmpty',group:'IStyle',sub:'',descr:{name:'IsEmpty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsEmpty</span> As Boolean</p><br><p class="Normal">True if no style properties have been set for the style object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">If <span class="LocalReference">IsEmpty</span> is True then all properties of this objects are either returning their default value or the corresponding property of the parent style object (if applicable).</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Parent',group:'IStyle',sub:IStyle,descr:{name:'Parent',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Parent</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">This is a read-only property that returns the parent style.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The property returns NULL if a parent does not exist for the style object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Align',group:'IStyle',sub:'',descr:{name:'Align',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Align</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>Alignments</P>|n<P CLASS=PopupDeclaration>typedef enum Alignments</P>|n<P CLASS=PopupNormal>Alignment.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('Alignments.html#3ca5740x4a1c0ec')">Alignments</a></span></p><br><p class="Normal">Alignment is in reference to the parent element:</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is used to set the element alignment.</p><br><p class="Normal">Justify alignment is normally applicable to just text based alignment.  It could also be used to specify even spacing for groups of controls.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'BgColor',group:'IStyle',sub:'',descr:{name:'BgColor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">BgColor</span> As String</p><br><p class="Normal">Sets the background color for an element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The background color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Color',group:'IStyle',sub:'',descr:{name:'Color',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Color</span> As String</p><br><p class="Normal">Sets the color for an element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Most often, the <span class="LocalReference">Color</span> property is used to set the label text color.  However, the <span class="LocalReference">Color</span> property is also used to set control color when a particular element does not have a label.  The color can be specified by name (e.g. aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow) or by the RGB-value in hex (e.g. “#000000” is black and “#FFFFFF” is white).</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">partially supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Columns',group:'IStyle',sub:'',descr:{name:'Columns',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Columns</span> As Long</p><br><p class="Normal">Sets the number of columns that a list is displayed over or the columns of a text box.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Columns</span> property is used for Column orientation and the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Rows</P>|n<P CLASS=PopupDeclaration>Property Rows As Long</P>|n<P CLASS=PopupNormal>Sets the number of rows that a list is displayed over or the rows of a multi-line text box.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle_Rows.html#3ca5740x4691a88')">Rows</a></span> property is used for Row orientation.  By default, both of the Column and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Rows</P>|n<P CLASS=PopupDeclaration>Property Rows As Long</P>|n<P CLASS=PopupNormal>Sets the number of rows that a list is displayed over or the rows of a multi-line text box.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle_Rows.html#3ca5740x4691a88')">Rows</a></span> properties are set to 1.</p><br><p class="Normal">When column orientation is selected the Column property sets the number of columns lists are displayed in or the width of the text box for text questions.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Cursor',group:'IStyle',sub:'',descr:{name:'Cursor',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Cursor</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>CursorTypes</P>|n<P CLASS=PopupDeclaration>typedef enum CursorTypes</P>|n<P CLASS=PopupNormal>CursorTypes.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('CursorTypes.html#3ca5740x4a1d670')">CursorTypes</a></span></p><br><p class="Normal">Specifies the type of cursor that should be displayed above the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The cursor can be one of Auto, CrossHair, Default, Pointer, Move, EResize, NEResize, NResize, NWResize, WResize, SWResize, SResize, SEResize, Text, Wait, and Help.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ElementAlign',group:'IStyle',sub:'',descr:{name:'ElementAlign',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ElementAlign</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ElementAlignments</P>|n<P CLASS=PopupDeclaration>typedef enum ElementAlignments</P>|n<P CLASS=PopupNormal>ElementAlignment.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ElementAlignments.html#3ca5740x4a1e104')">ElementAlignments</a></span></p><br><p class="Normal">This property is used to specify whether the element should be included on the next line or just to the left of the previous element:</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default, the element alignment is set to EAlignDefault.  The <span class="LocalReference">ElementAlign</span> property is used to override the default alignment used by the player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Height',group:'IStyle',sub:'',descr:{name:'Height',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Height</span> As String</p><br><p class="Normal">Sets the vertical size of the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The size can be set as a value or a percentage.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Hidden',group:'IStyle',sub:'',descr:{name:'Hidden',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Hidden</span> As Boolean</p><br><p class="Normal">Specifies whether to hide the element.</p><br><p class="Subheading">Remarks</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Image',group:'IStyle',sub:'',descr:{name:'Image',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Image</span> As String</p><br><p class="Normal">The name of the image to use for the element. The image name will typically be the URL to an image file.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ImagePosition',group:'IStyle',sub:'',descr:{name:'ImagePosition',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ImagePosition</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ImagePositions</P>|n<P CLASS=PopupDeclaration>typedef enum ImagePositions</P>|n<P CLASS=PopupNormal>Image Positions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ImagePositions.html#3ca5740x4692bc0')">ImagePositions</a></span></p><br><p class="Normal">The image position relative to the text.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The image position can be ImageLeft, ImageRight, ImageTop, ImageBottom, or ImageOnly.  The image only setting causes the Player to only display the image, even if there was text for the element.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Indent',group:'IStyle',sub:'',descr:{name:'Indent',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Indent</span> As Long</p><br><p class="Normal">This read/write property returns the label for the navigation control.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">This property is used to specify how far to indent the element within the parent element.  The units of measurement will change depending on the Player.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Orientation',group:'IStyle',sub:'',descr:{name:'Orientation',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Orientation</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>Orientations</P>|n<P CLASS=PopupDeclaration>typedef enum Orientations</P>|n<P CLASS=PopupNormal>Orientation.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('Orientations.html#3ca5740x4694340')">Orientations</a></span></p><br><p class="Normal">The <span class="LocalReference">Orientation</span> property is used to set the category list or grid orientation.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The orientation can be either Row or Column.  This property is specific to category formatting.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Rows',group:'IStyle',sub:'',descr:{name:'Rows',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Rows</span> As Long</p><br><p class="Normal">Sets the number of rows that a list is displayed over or the rows of a multi-line text box.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Columns</P>|n<P CLASS=PopupDeclaration>Property Columns As Long</P>|n<P CLASS=PopupNormal>Sets the number of columns that a list is displayed over or the columns of a text box.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle_Columns.html#3ca5740x4691440')">Columns</a></span> property is used for Column orientation and the <span class="LocalReference">Rows</span> property is used for Row orientation.  By default, both of the Column and <span class="LocalReference">Rows</span> properties are set to 1.</p><br><p class="Normal">When row orientation is selected the Row property sets the number of rows lists are displayed in or the height of multi-line text boxes for text questions.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'UseCascadedStyles',group:'IStyle',sub:'',descr:{name:'UseCascadedStyles',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">UseCascadedStyles</span> As Boolean</p><br><p class="Normal">A read/write property that is used to indicate whether the style object should return all cascaded styles, or to return just the styles set on the particular object.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">By default, <span class="LocalReference">UseCascadedStyles</span> is set to True.  This means that unless overridden, styles derived from parent style objects are returned by the style object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'VerticalAlign',group:'IStyle',sub:'',descr:{name:'VerticalAlign',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">VerticalAlign</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>VerticalAlignments</P>|n<P CLASS=PopupDeclaration>typedef enum VerticalAlignments</P>|n<P CLASS=PopupNormal>Vertical Alignment.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('VerticalAlignments.html#3ca5740x46956d0')">VerticalAlignments</a></span></p><br><p class="Normal">This property is used to set the element alignment.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Alignment is in reference to the parent element.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Width',group:'IStyle',sub:'',descr:{name:'Width',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Width</span> As String</p><br><p class="Normal">Sets the horizontal size of the element.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The width can be set as a value or a percentage.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ZIndex',group:'IStyle',sub:'',descr:{name:'ZIndex',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ZIndex</span> As Long</p><br><p class="Normal">Controls the ordering of overlapping elements, and defines which will be displayed 'on top'.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Positive numbers are above the normal elements on the page, and negative numbers are below.</p><br><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">HTML</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">TTY</td><td class="DefinitionBody"><p class="Normal">not supported</p><br></td></tr><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Windows</td><td class="DefinitionBody"><p class="Normal">supported</p><br></td></tr></tbody></table>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IStyles',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IStyles',sub:IStyle,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IStyle</P>|n<P CLASS=PopupNormal>The Style object is used to set presentation styles for interview objects.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IStyle.html#3ca4a98x46911e8')">IStyle</a></span></p><br><p class="Normal">Get the Style object at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Validate',group:'IValidation',sub:'',descr:{name:'Validate',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Validate</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal Action As ValidateActions = vaRaiseError</P>|n');" onmouseout="return clearpopup();">Action</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>ValidateActions</P>|n<P CLASS=PopupDeclaration>typedef enum ValidateActions</P>|n<P CLASS=PopupNormal>Validation Actions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('ValidateActions.html#3ca5740x46954dc')">ValidateActions</a></span> = vaRaiseError )</p><br><p class="Normal">Apply the validation to a question response. This method is typically used during data cleaning to update the question response in one of three ways.</p><br><p class="Subheading">Example</p><br><pre>' Assign the default value:<br>Job.Questions[..].Validation.<span class="LocalReference">Validate</span>(mrAssignDefault)<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Options',group:'IValidation',sub:IValidationOptions,descr:{name:'Options',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Options</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValidationOptions</P>|n<P CLASS=PopupNormal>A collection object that contains ValidationOption objects.  The ValidationOption objects that the collection contains are specific to each question type.  See IValidation.Options for more information.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValidationOptions.html#3ca4a98x4692320')">IValidationOptions</a></span></p><br><p class="Normal">Additional validation options that differ between question types</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Options</span> property is a collection of additional validation options that are specific to each question type.  Currently there are only two validation options; 'AllowThousandsSeparator' which is applicable to Long and Double questions and 'AllowXHTML' which is applicable to Text questions.</p><br><ul><br><li><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">AllowThousandsSeparator</td><td class="DefinitionBody"><p class="IndentedNormal">By default the 'thousands separator character' (e.g. the ',' character in English) is not allowed in responses to Long and Double questions.  Setting the AllowThousandsSeparator option to True will allow the thousands separator character in responses.</p><br></td></tr></tbody></table></li><br><li><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">AllowXHTML</td><td class="DefinitionBody"><p class="IndentedNormal">By default XHTML is not allowed in responses to Text questions. This is done to prevent Cross Site Scripting attacks as any script entered as the response may be executed when the response is re-displayed.  If AllowXHTML is set to True, for example to allow respondents to enter XHTML formating in their response, then custom validation for the text question should be used.</p><br></td></tr></tbody></table></li></ul><br><p class="Subheading">Example</p><br><pre>' Allow the thousands separator character for the Spend question<br>Spend.Validation.<span class="LocalReference">Options</span>["AllowThousandsSeparator"] = True' A short-hand way to specify the same option that takes<br>' advantage of dynamic property expansion<br>Spend.Validation.AllowThousandsSeparator = True<br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Function',group:'IValidation',sub:'',descr:{name:'Function',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Function</span> As String</p><br><p class="Normal">The custom validation function to use</p><br><p class="Subheading">Remarks</p><br><p class="Normal">Custom validation can be performed in addition to the standard validation implemented by the Validation object.  This is done by specifying the name of a function for the <span class="LocalReference">IValidation.Function</span> property.</p><br><p class="Normal">Any function that takes the form “FuncName(Question, IOM, Attempt)” can be used.  The parameters are:</p><br><ul><br><li><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Question</td><td class="DefinitionBody"><p class="IndentedNormal">The Question object that is being validated.</p><br></td></tr></tbody></table></li><br><li><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">IOM</td><td class="DefinitionBody"><p class="IndentedNormal">The Interview object.</p><br></td></tr></tbody></table></li><br><li><table class="DefinitionList"><tbody><tr valign="BASELINE" class="DefinitionRow"><td class="DefinitionLabel">Attempt</td><td class="DefinitionBody"><p class="IndentedNormal">The number of the current custom validation attempt.</p><br></td></tr></tbody></table></li></ul><br><p class="Normal">The custom validation function is automatically called during the validation of a response entered for a Ask() statement.  The custom validation function is called after the standard validation has been performed.  If the question that was asked has child questions, and they also have custom validation functions, then those functions will also be invoked.</p><br><p class="Normal">The custom validation function must return a Boolean value.  True indicates that the validation was successful and the interview should move on to the next question.  False indicates the response is invalid and the question should be re-asked.  If the question has sub-questions with validate functions then the question will be re-asked if any validation function returns False.</p><br><p class="Normal">The custom validation function is also invoked during a call to <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dMethod_s.gif|d ALT=|dMethod|d>Validate</P>|n<P CLASS=PopupDeclaration>Sub Validate( Optional ByVal Action As ValidateActions = vaRaiseError )</P>|n<P CLASS=PopupNormal>Apply the validation to a question response. This method is typically used during data cleaning to update the question response in one of three ways.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValidation_Validate.html#3ca5740x46920c8')">IValidation.Validate</a></span>() when the validate action is <a href="javascript:openBody('ValidateActions.html#3ca5740x46954dc')">vaUpdateErrors</a>.</p><br><p class="Normal">The Attempt parameter indicates the number of times the custom validation function has been called for the particular question.  The first time custom validation is performed the Attempt parameter has the value 1 and it is incremented on each subsequent attempt.  The Attempt count is reset whenever the custom validation function returns True.  The Attempt count can be used to give the respondent a limited number of attempts at the question before just accepting whatever response they gave and continuing with the interview.</p><br><p class="Subheading">Example</p><br><pre>' TimeAllocation is a block of numeric questions.  The interview<br>' will not proceed to the next question until the responses of all<br>' the numeric questions add to 100.<br>TimeAllocation.Validation.<span class="LocalReference">Function</span> = "Validate100Percent"<br>TimeAllocation.Ask()<span class="LocalReference">Function</span> Validate100Percent(Question, IOM, Attempt)<br>Dim SubQuestion, TotalTotal = 0<br>For Each SubQuestion In Question<br>Total = Total + SubQuestion.Response.Value<br>Next<br>If Total = 100 Then<br>Validate100Percent = True<br>Else<br>Question.Errors.AddNew("IncorrectTotal", "Responses don't add up to 100%")<br>Validate100Percent = False<br>End If<br>End <span class="LocalReference">Function</span><br></pre>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MaxValue',group:'IValidation',sub:'',descr:{name:'MaxValue',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MaxValue</span> As Variant</p><br><p class="Normal">This read/write property returns the maximum possible value.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The maximum value is interpreted as follows for the different types:</p><br><ul><br><li><p class="IndentedNormal"><b>Double.</b> The maximum double value (default = 1.79769313486232E308)</p><br></li><br><li><p class="IndentedNormal"><b>Long.</b> The maximum long value (default = 2,147,483,647)</p><br></li><br><li><p class="IndentedNormal"><b>Text.</b> The maximum number of characters (default = 2,147,483,647)</p><br></li><br><li><p class="IndentedNormal"><b>Date.</b> The maximum date value (default = 31 December 9999)</p><br></li><br><li><p class="IndentedNormal"><b>Categorical.</b> The maximum number of categories (default = total categories)</p><br></li><br><li><p class="IndentedNormal"><b>Boolean.</b> <i>not applicable</i></p><br></li></ul>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'MinValue',group:'IValidation',sub:'',descr:{name:'MinValue',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">MinValue</span> As Variant</p><br><p class="Normal">This read/write property returns the minimum possible value.</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The minimum value is interpreted as follows for the different types:</p><br><ul><br><li><p class="IndentedNormal"><b>Double.</b> The minimum double value (default = -1.79769313486232E308)</p><br></li><br><li><p class="IndentedNormal"><b>Long.</b> The minimum long value (default = -2,147,483,648)</p><br></li><br><li><p class="IndentedNormal"><b>Text.</b> The minimum number of characters (default = 0)</p><br></li><br><li><p class="IndentedNormal"><b>Date.</b> The minimum date value (default = 1 January 100)</p><br></li><br><li><p class="IndentedNormal"><b>Categorical.</b> The minimum number of categories (default = 0)</p><br></li><br><li><p class="IndentedNormal"><b>Boolean.</b> <i>not applicable</i></p><br></li></ul><br><p class="Normal">Note that the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n<P CLASS=PopupNormal>This read/write property is used to enable or disable automatic no answer questions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IQuestion_MustAnswer.html#3ca5740x4a3896c')">IQuestion.MustAnswer</a></span> and <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>MustAnswer</P>|n<P CLASS=PopupDeclaration>Property MustAnswer As Boolean</P>|n<P CLASS=PopupNormal>This read/write property is used to enable or disable automatic no response questions.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IInterview_MustAnswer.html#3ca5740x4a258a4')">IInterview.MustAnswer</a></span> properties override the <span class="LocalReference">MinValue</span> property for Text questions.  i.e. if <span class="LocalReference">MinValue</span> is 0 but MustAnswer is True then at least 1 character must be entered.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Precision',group:'IValidation',sub:'',descr:{name:'Precision',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Precision</span> As Long</p><br><p class="Normal">The total number of digits that can be specified for a numeric value</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Precision</span> property can only be set for numeric questions (i.e. questions of type Double or Long).  Attempting to read the property for any other question will return a value of -1.  For a double value, the precision specifies the total number of digits, including those after the decimal point.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Scale',group:'IValidation',sub:'',descr:{name:'Scale',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Scale</span> As Long</p><br><p class="Normal">The number of digits after the decimal point for a double value</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The <span class="LocalReference">Scale</span> property can only be set for questions of type 'Double'. Attempting to read the property for any other question will return a value of -1.  If no <span class="LocalReference">Scale</span> value has been specified then -1 is returned.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'ValidateExpression',group:'IValidation',sub:'',descr:{name:'ValidateExpression',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">ValidateExpression</span> As String</p><br><p class="Normal">This read/write property returns the validation expression.  (Default Property)</p><br><p class="Subheading">Remarks</p><br><p class="Normal">The validation expression is only used for numeric and text types.  For numeric types, it is the range expression that defines the ranges of values that are valid.  For the text type it defines the validation expression defined in metadata.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IValidationOption',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">The name of the validation option.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IValidationOption',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant</p><br><p class="Normal">The current value of the validation option.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IValidationOptions',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of validation options in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IValidationOptions',sub:IValidationOption,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValidationOption</P>|n<P CLASS=PopupNormal>A validation option.  Validation options are specific to each question type.  See IValidation.Options for more information.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValidationOption.html#3ca4a98x46921f4')">IValidationOption</a></span></p><br><p class="Normal">Get the validation option item at the specified location.  (Default Property)</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'AppendChunk',group:'IValue',sub:'',descr:{name:'AppendChunk',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">AppendChunk</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Data As Variant</P>|n');" onmouseout="return clearpopup();">Data</span> As Variant )</p><br><p class="Normal">Appends data to a binary value.  The <span class="LocalReference">AppendChunk</span> method is only supported for values of type <a href="javascript:openBody('DataTypeConstants.html#3ca5740x4a1dd1c')">mtObject</a>.  The Source property 'Stream Binary' must be set to True for the <span class="LocalReference">AppendChunk</span> method to be used, otherwise the error E_NOTIMPL will be generated.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Clear',group:'IValue',sub:'',descr:{name:'Clear',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Sub <span class="LocalReference">Clear</span>( )</p><br><p class="Normal">Clears the current contents of the value.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'GetChunk',group:'IValue',sub:'',descr:{name:'GetChunk',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Function <span class="LocalReference">GetChunk</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal lSize As Long</P>|n');" onmouseout="return clearpopup();">lSize</span> As Long ) As Variant</p><br><p class="Normal">Returns all, or a portion, of the contents of a binary value. The <span class="LocalReference">GetChunk</span> method is only supported for values of type <a href="javascript:openBody('DataTypeConstants.html#3ca5740x4a1dd1c')">mtObject</a>. The Source property 'Stream Binary' must be set to True for the <span class="LocalReference">GetChunk</span> method to be used, otherwise the error E_NOTIMPL will be generated.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Attributes',group:'IValue',sub:IValueAttributes,descr:{name:'Attributes',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Attributes</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValueAttributes</P>|n<P CLASS=PopupNormal>A collection object that contains the attributes relating to a value.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValueAttributes.html#3ca4a98x4692a30')">IValueAttributes</a></span></p><br><p class="Normal">Indicates whether the value should be included in a base aggregate. Normally, a value is included in the base if it is not NULL.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'IsDirty',group:'IValue',sub:'',descr:{name:'IsDirty',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">IsDirty</span> As Boolean</p><br><p class="Normal">Indicates whether the value should be included in an update.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Type',group:'IValue',sub:'',descr:{name:'Type',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Type</span> As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dEnum_s.gif|d ALT=|dEnumerated Type|d>DataTypeConstants</P>|n<P CLASS=PopupDeclaration>typedef enum DataTypeConstants</P>|n<P CLASS=PopupNormal>Used to identify the type of data stored in a Field e.g. Real, Text</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('DataTypeConstants.html#3ca5740x4a1dd1c')">DataTypeConstants</a></span></p><br><p class="Normal">Property that returns the value data type.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IValue',sub:'',descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span>( Optional ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>Optional ByVal IsDirty As Boolean = -1</P>|n');" onmouseout="return clearpopup();">IsDirty</span> As Boolean = -1 ) As Variant</p><br><p class="Normal">The actual value assigned to the value object.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Name',group:'IValueAttribute',sub:'',descr:{name:'Name',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Name</span> As String</p><br><p class="Normal">Property containing the name of the <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dProperty_s.gif|d ALT=|dIDL Property|d>Value</P>|n<P CLASS=PopupDeclaration>Property Value As Variant</P>|n<P CLASS=PopupNormal>The value assigned to the attribute.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValueAttribute_Value.html#3ca5740x46929cc')">Value</a></span> Attribute.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Value',group:'IValueAttribute',sub:IValueAttribute,descr:{name:'Value',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Value</span> As Variant</p><br><p class="Normal">The value assigned to the attribute.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IValueAttributes',sub:'',descr:{name:'Count',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Count</span> As Long</p><br><p class="Normal">The number of items in the collection.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Item',group:'IValueAttributes',sub:IValueAttribute,descr:{name:'Item',descr:`<div class="EverythingUnderTheTitleBar"><p class="Declaration">Property <span class="LocalReference">Item</span>( ByVal <span class="Argument" onmouseover="return popup(this,'<P CLASS=PopupArgumentHeading>ByVal Index As Variant</P>|n');" onmouseout="return clearpopup();">Index</span> As Variant ) As <span class="Summary" onmouseover="return popup(this,'<P CLASS=PopupHeading><IMG BORDER=0 SRC=|dInterface_s.gif|d ALT=|dClasses|d>IValueAttribute</P>|n<P CLASS=PopupNormal>The value attributes object is used to get or set custom attributes on values.</P>|n');" onmouseout="return clearpopup();"><a href="javascript:openBody('IValueAttribute.html#3ca4a98x4692904')">IValueAttribute</a></span></p><br><p class="Normal">Get the collection item at the specified location.</p>     <!-- And so ends the body of the page... --></div>`,info:'',ex:''}},
    {id:'Count',group:'IValueAttributes',sub:'',descr:{name:'Count',descr:``,info:'',ex:''}},
    {id:'Item',group:'IValueAttributes',sub:IValueAttribute,descr:{name:'Item',descr:``,info:'',ex:''}},
    
]

export {
    iomData
}


