let funcData= [
    {
        id:"strings",
        group:"func",
        sub: "func_Len, func_Left, func_Right, func_Mid, func_Find, func_IsEmpty, func_LCase, func_LTrim, func_Rtrim, func_Trim, func_AscW, func_ChrW, func_Hex, func_Oct, func_makeString, func_Split, func_Replace, func_MakeMDMName, func_Format, func_FormatValue, func_RegexReplace, func_TegexTest, func_RegexFind, func_MakeFileName, func_Base64Encode, func_Base64Decode, func_Encrypt, func_Decrypt",
        descr: {
            name: 'strings functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"categorical",
        group:"func",
        sub: `func_AnswerCount, func_GEtAnswer, func_HasAnswer, func_ContainsAny, func_ContainsAll, func_ContainsSome, func_DefinedCategories, func_Intersection, func_Union, func_XUnion, func_Differrence, func_Unique, func_DefinedElements, func_LBound, func_Ubound, func_Redim, func_Factor, func_DefinedFactors, func_DefinedListElements, func_Merge, func_FilterBy, func_ContainsAllExactly, func_ContainsAnyExactly`,
        descr: {
            name: 'categorical functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },

    {
        id:"misc",
        group:"func",
        sub: `func_Band, func_EqualBand, func_CreateObject, func_IIf, func_Eval, func_VarType, func_VarTypeName, func_BitAnd, func_BitOr, func_BitXor, func_BitNot, func_Execute, func_RGB, func_Validate, func_InputBox, func_IsSet, func_IsElementInVersions, func_GetInterface, func_Sleep, func_EngineVersion, func_DBNull, func_IsDBNull, func_IsNullObject, func_IsEqualObject, func_IsOneOf, func_Categorize, func_EvaluateDerivedIteration, func_Decode, func_SampleCategorize, func_CategorizeLoopVariable, func_EvaluateGridSummary, func_JsonSerialize, func_JsonDeSerialize, func_MakeArray, func_HashHMAC, func_Hash, func_GetInputLocatedId, func_GetOutputLocatedId`,
        descr: {
            name: 'misc functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"conversions",
        group:"func",
        sub: `func_CText, func_CDouble, func_CLOng, func_CDate, func_CCategorical, func_Cboolean`,
        descr: {
            name: 'Conversions functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"dates",
        group:"func",
        sub: `func_Now, func_DateNow, func_TimeNow, func_DatePart, func_Year, func_Month, func_Day, func_Hour, func_Minute, func_Second, func_MonthName, func_WeekdayName, func_DateAdd, func_UTCToLocalTime, func_LocalToUTCTime, func_SetTimeZone, func_GetTimeZone, func_GetTimeZoneName, func_GetTimeZoneOffset, func_GetTimeZoneDayLightSaving, func_DateOnly, func_TimeOnly, func_DateDiff, func_BandDate, func_GetTimeZoneCollection`,
        descr: {
            name: 'Dates functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"lists",
        group:"func",
        sub: `func_GetRandomSeed, func_SetRandomSeed, func_Rnd, func_RanInt, func_Ran, func_GetRotationSeed, func_SetRotationSeed, func_Rev, func_SortAsc, func_SortDesc, func_RanSequence, func_RotSequence, func_RevSequence, func_SelectRange, func_FindItem, func_RandomPassword, func_DefineValues`,
        descr: {
            name: 'Lists functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"math",
        group:"func",
        sub: `func_Abs, func_Sgn, func_Int, func_Sqrt, func_Sin, func_Cos, func_Tan, func_Atn, func_Exp, func_Log, func_MaxOf, func_MinOf, func_Pow, func_Round`,
        descr: {
            name: 'Math functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
    {
        id:"dataManagement",
        group:"func",
        sub: `func_FlipGrid, func_CreateGridSummary, func_CopyGrid, func_FlattenGrid, func_SumQuestions, func_CombineIterations, func_replaceCategory, func_RemoveCategory, func_SubstractQuestion`,
        descr: {
            name: 'DataManagement functions',
            descr: '',
            info: ``,
            ex: ``
        }
    },
{id:'Len',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Len</h1><br><p class="body">Returns a Long containing the number of characters in a string,<br>the number of categories in a category list, or the number of elements<br>in an array.</p><br><pre class="syntaxblock"><span class="code-required">Len(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value, categorical value, or array to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Numbers of         characters, categories, or elements in <span class="italic">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For type Text, the return value is the number of characters in <span class="italic">Val</span>. For type Categorical, the return value<br>is the number of categories in <span class="italic">Val</span>. For an array (which can contain values of any type), the return<br>value is the number of elements in <span class="italic">Val</span>. For any other type, an error occurs.</p><br><p class="body">When <span class="italic">Val</span> is NULL, the return<br>value is zero. </p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Len(Val)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">25</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the number of characters in the supplied<br>string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Len(Val)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the number of categories in the supplied<br>category list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Len(Val)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the number of elements in the supplied<br>array of text strings. See  the topic <a href="Tabug_split.htm">Split</a> for more information. </td></tr></tbody></table><p class="body">The following example returns the number of characters stored in<br>the <span class="name">address</span> text variable:</p><br><pre class="codeblock">address.Len()</pre><br><p class="body">The following example returns the number of categories selected<br>by the respondent in response to the <span class="name">remember</span> multiple response question:</p><br><pre class="codeblock">remember.Len()</pre><br>',info:'',ex:''}},
{id:'Left',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Left</h1><br><p class="body">Returns a string containing the first characters from a string,<br>a category list containing the first categories from a category list,<br>or an array containing the first elements from an array.</p><br><pre class="syntaxblock"><span class="code-required">Left(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Length</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value, categorical value, or array to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Length</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Number of characters, categories, or elements to return. If <span class="italic">Length</span> is greater than the number of items<br>available, all of the items         are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The required characters, categories, or elements from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For type Text, the return value is of type Text, and contains <span class="italic">Length</span> characters from the start of <span class="italic">Val</span>. For type Categorical, the return value<br>is of type Categorical, and contains <span class="italic">Length</span> categories from the start of <span class="italic">Val</span>. For an array (which can contain values of any type), the return<br>value is an array, and contains <span class="italic">Length</span> elements from the start of <span class="italic">Val</span>. For any other type, an error occurs.</p><br><p class="body">When <span class="italic">Val</span> is NULL, the return<br>value is NULL.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Length</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Left(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">10</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St John</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the first 10 characters in the supplied<br>string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Left(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the first category in the supplied category<br>list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Left(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{The,quick}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the first two elements in the supplied<br>array. See  the topic <a href="Tabug_split.htm">Split</a> for more information. </td></tr></tbody></table><p class="body">The following example returns the first six characters of the <span class="name">name</span> text variable:</p><br><pre class="codeblock">name.Left(6)</pre><br><p class="body">The following example returns the first three categories stored<br>in the <span class="name">remember</span> multiple response<br>variable:</p><br><pre class="codeblock">remember.Left(3)</pre><br>',info:'',ex:''}},
{id:'Right',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Right</h1><br><p class="body">Returns a string containing the last characters from a string,<br>a category list containing the last categories from a category list,<br>or an array containing the last elements from an array.</p><br><pre class="syntaxblock"><span class="code-required">Right(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Length</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value, categorical value, or array to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Length</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Number of characters, categories, or elements to return. If <span class="italic">Length</span> is greater than the number of items<br>available, all of the items         are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The required characters, categories, or elements from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For type Text, the return value is of type Text, and contains <span class="italic">Length</span> characters from the end of <span class="italic">Val</span>. For type Categorical, the return value<br>is of type Categorical, and contains <span class="italic">Length</span> categories from the end of <span class="italic">Val</span>. For an array (which can contain values of any type), the return<br>value is an array, and contains <span class="italic">Length</span> elements from the end of <span class="italic">Val</span>. For any other type, an error occurs.</p><br><p class="body">When <span class="italic">Val</span> is NULL, the return<br>value is NULL.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Length</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Right(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the last six characters in the supplied<br>string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Right(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,15,6,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the last category in the supplied category<br>list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Right(Val, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{quick,brown,fox}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the last three elements in the supplied<br>array. See  the topic <a href="Tabug_split.htm">Split</a> for more information. </td></tr></tbody></table><p class="body">The following example returns the 10 rightmost characters stored<br>in the <span class="name">address</span> text variable:</p><br><pre class="codeblock">address.Right(10)</pre><br><p class="body">The following example returns the last two categories in the list<br>of categories stored in the <span class="name">remember</span> multiple response variable:</p><br><pre class="codeblock">remember.Right(2)</pre><br>',info:'',ex:''}},
{id:'Mid',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Mid</h1><br><p class="body">Returns a string containing a number of characters from a position<br>in a string, a category list containing a number of categories from<br>a position in a category list, or an array containing a number of<br>elements from a position in an array.</p><br><pre class="syntaxblock"><span class="code-required">Mid(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Start</span> [<span class="code-required">, </span><span class="parameter">Length</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value, categorical value, or array to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Start</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Position in <span class="italic">Val</span> of the<br>first character, category, or element wanted (counting from 0). If <span class="italic">Start</span> is greater than the number of items<br>in <span class="italic">Val</span>, no items are returned.<br>If <span class="italic">Start</span> is less than 0, items<br>are returned from the start of <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Length</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of characters, categories, or elements to<br>return. If <span class="name">Length</span> is omitted, or<br>if there are fewer than <span class="name">Length</span>characters<br>(including the <span class="name">Start</span> character),<br>all characters from <span class="name">Start</span> to the<br>end of the string are returned. If <span class="name">Start</span> + <span class="name">Length</span> is &lt; 1, no items<br>are returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The required characters, categories, or elements from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For type Text, the return value is of type Text, and contains <span class="italic">Length</span> characters from the position <span class="italic">Start</span> in <span class="italic">Val</span>. For type Categorical, the value is of type Categorical, and contains <span class="italic">Length</span> categories from the position <span class="italic">Start</span> in <span class="italic">Val</span>. For an array (which can contain values of any type), the return<br>value is an array, and contains <span class="italic">Length</span> elements from the position <span class="italic">Start</span> in <span class="italic">Val</span>. For any other type,<br>an error occurs.</p><br><p class="body">When <span class="italic">Val</span> is NULL, the return<br>value is NULL.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Start</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Length</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">10</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">15</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the 15 characters following the 10th character<br>in the supplied string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the category following the second category<br>in the supplied category list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is an empty category list, because <span class="italic">Start</span> is greater than the number of categories<br>in the supplied category list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the first two categories in the supplied<br>category list.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is all characters from <span class="name">Start</span> to the end of the string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Mid(Val, Start, Length)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{quick,brown}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value is the two elements following the first element<br>in the supplied array. See  the topic <a href="Tabug_split.htm">Split</a> for more information. </td></tr></tbody></table><p class="body">The following example returns characters 8-17 from the <span class="name">address</span> text variable:</p><br><pre class="codeblock">address.Mid(7, 10)</pre><br><p class="body">The following example returns the fourth category from the list<br>of categories stored in the <span class="name">remember</span> multiple response variable:</p><br><pre class="codeblock">remember.Mid(3, 1)</pre><br><p class="body">For respondents who chose less than four categories, this returns<br>an empty category list ({}).</p><br><p class="body">For an example of using Mid in combination with UCase and Trim,<br>see <a href="Tabug_ucase.htm">UCase</a>. </p><br>',info:'',ex:''}},
{id:'Find',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Find</h1><br><p class="body">Searches a string, a category list, or an array, for a specified<br>substring, subcategory list, or subarray, and if it is found, returns<br>its start position.</p><br><pre class="syntaxblock"><span class="code-required">Find(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Key</span> [<span class="code-required">, </span><span class="parameter">Skip</span> [<span class="code-required">, </span><span class="parameter">Reverse</span> [<span class="code-required">, </span><span class="parameter">IgnoreCase</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value, categorical value, or array to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Key</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value to search for in <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Skip</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of positions to skip in <span class="italic">Val</span> before starting the search. If <span class="italic">Reverse</span> is True, <span class="italic">Skip</span> is the number of positions to skip from the end<br>of <span class="italic">Val</span>. If <span class="italic">Reverse</span> is omitted or False, <span class="italic">Skip</span> is the number of positions to skip from the start<br>of <span class="italic">Val</span>. Treated as 0 if omitted<br>or  is   &lt; 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Reverse</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If True, <span class="italic">Val</span> is searched backwards. If <span class="italic">Reverse</span> is omitted or False, <span class="italic">Val</span> is<br>searched forwards.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreCase</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If False, the comparison is case-sensitive. If <span class="italic">IgnoreCase</span> is omitted or True, the comparison<br>is case-insensitive.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Position in <span class="italic">Val</span>, relative<br>to the start of <span class="italic">Val</span>, of <span class="italic">Key</span> if found, -1 otherwise. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> is Text, <span class="italic">Key</span> is converted to text if necessary and<br>is searched for as a substring of <span class="italic">Val</span>. Unless <span class="italic">IgnoreCase</span> is False,<br>the comparison is case-insensitive.</p><br><p class="body">If <span class="italic">Val</span> is Categorical or an<br>array (which can contain values of any type), <span class="italic">Key</span> can be a long, double, text, date, boolean, or categorical<br>value, or an array. When comparing <span class="italic">Key</span> (or the items in <span class="italic">Key</span>) with<br>the items in <span class="italic">Val</span>, the normal<br>conversion and comparison rules for variant types are used if necessary.<br>Unless <span class="italic">IgnoreCase</span> is False, the<br>comparison of text items (or items converted to text) is case-insensitive.<br>If either item is Null, they are equal only if both are Null. If <span class="italic">Key</span> is a categorical value or an array,<br>it is found only if its items occur as a sequence of consecutive items<br>in <span class="italic">Val</span> and in the same order.</p><br><p class="body">If either <span class="italic">Val</span> or <span class="italic">Key</span> is NULL, the return value is -1 (not<br>found). If <span class="italic">Val</span> is not Text, Categorical,<br>or an array, an error occurs.</p><br><p class="body">How you specify a text string as an argument depends on whether<br>you are using the function in an SQL query or in mrScriptBasic or mrScriptMetadata. In an SQL query, enclose<br>text strings in single quotation marks (&#39 &#39). In mrScriptBasic or mrScriptMetadata, enclose text strings in<br>double quotation marks (" ").</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Key</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">19</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A forward search of a text value, starting from the beginning<br>of the address. The comparison is case-insensitive.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key, , True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3 Glasgow Hill, Glasgow</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">glasgow</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">16</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A backward search of a text value, starting from the end of<br>the address. The comparison is case-insensitive.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,7,8,1,9,10,5,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A forward search of a categorical value, starting from the<br>first category.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key, 7)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,7,8,1,9,10,5,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A forward search of a categorical value, skipping the first<br>7 categories.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key, , , False)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St         John&#39s Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A forward search of a text value, starting from the beginning<br>of the address. The comparison is <span class="italic">case-sensitive</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Find(Val, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A forward search for an array within another array. See  the topic <a href="Tabug_split.htm">Split</a> for more information. </td></tr></tbody></table><p class="body"><br><span class="runinhead">Text variables. </span>These examples<br>use the <span class="name">name</span> and <span class="name">address</span> variables, which are text variables<br>that store respondents&#39 names and addresses, respectively. </p><br><p class="body">The following example selects any respondent whose address contains<br>"London" in upper case, lower case, or a mixture of both cases. Find<br>returns -1 when the search string has not been found. In this example<br>the &lt;&gt; operator is used to test that the return value is not<br>-1, which means that "London" exists somewhere in the text being searched. </p><br><pre class="codeblock">address.Find("London") &lt;&gt; -1</pre><br><p class="body">Find lets you search for a string in a particular position. This<br>is useful when the position of the search string in the text you are<br>searching is important. For example, the following selects respondents<br>whose names begin with the string "Brian":</p><br><pre class="codeblock">Find(name, "Brian") = 0</pre><br><p class="body"><br><span class="runinhead">Categorical variables. </span>These examples use the <span class="name">remember</span> multiple response variable.</p><br><p class="body">This example selects all respondents who chose the <span class="label">Dinosaurs</span> category regardless of its position<br>in the list of categories chosen:</p><br><pre class="codeblock">remember.Find({dinosaurs}) &lt;&gt; -1</pre><br><p class="body">The next example selects respondents for whom the <span class="label">Dinosaurs</span> category is the first category<br>in the list of their responses: </p><br><pre class="codeblock">remember.Find({dinosaurs}) = 0</pre><br>',info:'',ex:''}},
{id:'IsEmpty',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsEmpty</h1><br><p class="body">Returns True if the value is empty. An empty string is one that<br>contains no characters or just contains white spaces. An empty category<br>list is one that contains no categories. A NULL value is deemed to<br>be empty. Unless NULL, other data types are always deemed to be not<br>empty.</p><br><pre class="syntaxblock"><span class="code-required">IsEmpty(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be tested. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> is empty,<br>otherwise False. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is True.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value of Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IsEmpty(Q1)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24 St John&#39s         Road, Barnes</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IsEmpty(Q1)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.IsEmpty()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.IsEmpty()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.IsEmpty()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">17.50</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.IsEmpty()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0.00</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.IsEmpty()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr></tbody></table><p class="body">The <span class="name">address</span> variable is a text<br>variable that stores respondents&#39 addresses. However, for some respondents<br>the address has not been recorded and the variable stores an empty<br>string. You could use the following to exclude those respondents: </p><br><pre class="codeblock">NOT (address.IsEmpty())</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.0 or later for operating<br>on all data types</p><br><p class="body">Data Model 2.10 or earlier<br>for operating on strings and category lists only</p><br>',info:'',ex:''}},
{id:'LCase',group:'func',sub:'',descr:{name:'',descr:'<br><h1>LCase</h1><br><p class="body">Returns a string that has been converted to lower case.</p><br><pre class="syntaxblock"><span class="code-required">LCase(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value to be converted to         lower case. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Lowercase copy of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The input string is converted to lower case, according to the rules<br>of the input locale.</p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is "" and the return value is "".</p><br><h2>Example</h2><br><p class="body">This example uses the LCase function to return a copy of the contents<br>of the <span class="name">address</span> variable converted<br>to lower case:</p><br><pre class="codeblock">address.LCase()</pre><br>',info:'',ex:''}},
{id:'LTrim',group:'func',sub:'',descr:{name:'',descr:'<br><h1>LTrim</h1><br><p class="body">Returns a copy of a string with any leading spaces removed.</p><br><pre class="syntaxblock"><span class="code-required">LTrim(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value from which you want         to remove leading spaces. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Copy of <span class="italic">Val</span> with leading<br>spaces removed.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">LTrim removes white space (such as space and tab characters) that<br>appears at the beginning of the input string. LTrim uses the rules<br>of the input locale when interpreting white space. </p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is "" and the return value is "".</p><br><h2>Example</h2><br><p class="body">This example uses the LTrim function to return a copy of the contents<br>of the <span class="name">address</span> variable with any<br>leading spaces removed:</p><br><pre class="codeblock">address.LTrim()</pre><br>',info:'',ex:''}},
{id:'Rtrim',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RTrim</h1><br><p class="body">Returns a copy of a string with any trailing spaces removed.</p><br><pre class="syntaxblock"><span class="code-required">RTrim(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value from which you want         to remove trailing spaces. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Copy of <span class="italic">Val</span> with trailing<br>spaces removed.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">RTrim removes white space (such as space and tab characters) that<br>appears at the end of the input string. RTrim uses the rules of the<br>input locale when interpreting white space. </p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is "" and the return value is "".</p><br><h2>Example</h2><br><p class="body">This example uses the RTrim function to return a copy of the contents<br>of the <span class="name">address</span> variable with any<br>trailing spaces removed:</p><br><pre class="codeblock">address.RTrim()</pre><br>',info:'',ex:''}},
{id:'Trim',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Trim</h1><br><p class="body">Returns a copy of a string with any leading and trailing spaces<br>removed.</p><br><pre class="syntaxblock"><span class="code-required">Trim(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value from which you want         to remove leading and<br>trailing spaces. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Copy of <span class="italic">Val</span> with leading<br>and trailing spaces removed.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">Trim removes white space (such as space and tab characters) that<br>appears at the beginning and end of the input string. Trim uses the<br>rules of the input locale when interpreting white space. </p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is "" and the return value is "".</p><br><h2>Example</h2><br><p class="body">This example uses the Trim function to return a copy of the contents<br>of the <span class="name">address</span> variable with any<br>leading and trailing spaces removed:</p><br><pre class="codeblock">address.Trim()</pre><br><p class="body">For an example of using Trim in combination with UCase and Mid,<br>see <a href="Tabug_ucase.htm">UCase</a>. </p><br>',info:'',ex:''}},
{id:'AscW',group:'func',sub:'',descr:{name:'',descr:'<br><h1>AscW</h1><br><p class="body">Returns an integer value representing the Unicode character code<br>(sometimes called the <span class="definedword">code point</span>) for a character.</p><br><pre class="syntaxblock"><span class="code-required">AscW(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Unicode character         code for first character of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">A Unicode character code is an integer from 0 to 65535.</p><br><p class="body">This function returns 0 if <span class="italic">Val</span> is empty. If the current data value is NULL, <span class="italic">Val</span> is an empty string and 0 is returned.</p><br><h2>Example</h2><br><p class="body">This mrScriptBasic example uses the AscW function<br>to return the character code for a single character:</p><br><pre class="codeblock">AscW("a")</pre><br><p class="body">The return value is 97.</p><br><p class="body">The next example shows an SQL query that uses the AscW function<br>to return the character code for the first character of the <span class="name">name</span> variable (which stores the respondent&#39s<br>name).</p><br><pre class="codeblock">SELECT AscW(name) FROM vdata</pre><br>',info:'',ex:''}},
{id:'ChrW',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ChrW</h1><br><p class="body">Returns the character that corresponds to a Unicode character code<br>(sometimes called the <span class="definedword">code point</span>).</p><br><pre class="syntaxblock"><span class="code-required">ChrW(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Unicode character code for a         character. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Character         corresponding to <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">Valid Unicode character codes are integers from 0 to 65535. An<br>error occurs if <span class="name">Val</span> is less than<br>0 or greater than 65535.</p><br><p class="body">If the current data value is NULL, <span class="name">Val</span> is 0 and the return value is a string containing a single null character.<br>ChrW cannot distinguish between a 0 received for a NULL value and<br>an actual 0 passed in.</p><br><p class="body">All values in the range 0-65535 are treated as valid Unicode characters,<br>even though some of these values are not currently assigned as Unicode<br>characters. In addition some values correspond to non-printable characters.<br>Note that the returned character will be displayed correctly only<br>if the font you are using supports that character. </p><br><h2>Example</h2><br><p class="body">This example uses the ChrW function to return the character for<br>a specified character code:</p><br><pre class="codeblock">ChrW(97)</pre><br><p class="body">The return value is "a".</p><br>',info:'',ex:''}},
{id:'Hex',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Hex</h1><br><p class="body">Returns a string representing the hexadecimal value of a number.</p><br><pre class="syntaxblock"><span class="code-required">Hex(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Hexadecimal         representation of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> is treated as an unsigned<br>number, so values of -2147483648 to -1 are represented as "80000000"<br>to "FFFFFFFF" respectively. If the current data value is NULL, <span class="italic">Val</span> is 0 and the return value is "0".</p><br><p class="body">This function is similar to the Hex function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">This example uses the Hex function to return the hexadecimal value<br>of 99:</p><br><pre class="codeblock">Dim x, y<br><br>x = 99<br>y = Hex(x)</pre><br><p class="body">The return value is "63".</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'Oct',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Oct</h1><br><p class="body">Returns a string representing the octal value of a number.</p><br><pre class="syntaxblock"><span class="code-required">Oct(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Octal         representation of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> is treated as an unsigned<br>number, so values of -2147483648 to -1 are represented as "20000000000"<br>to "37777777777" respectively. If the current data value is NULL, <span class="italic">Val</span> is 0 and the return value is "0".</p><br><p class="body">This function is similar to the Oct function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">This example uses the Oct function to return the octal value of<br>99:</p><br><pre class="codeblock">Dim x, y<br><br>x = 99<br>y = Oct(x)</pre><br><p class="body">The return value is "143".</p><br>',info:'',ex:''}},
{id:'MakeString',group:'func',sub:'',descr:{name:'',descr:'<br><h1>MakeString</h1><br><p class="body">Returns a text string by concatenating one or more values.</p><br><pre class="syntaxblock"><span class="code-required">MakeString(</span><span class="parameter">[Vals, ...]</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A comma-delimited list of         values to be concatenated<br>together as a string. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">String that is the         concatenation of the values specified<br>in <span class="italic">Vals</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The string arguments can be of any type--each value is coerced<br>to a text value. If no arguments are specified, an empty string is<br>returned. </p><br><h2>Example</h2><br><p class="body">This example shows using the MakeString function to create a text<br>string:</p><br><pre class="codeblock">Dim A, B<br>B = CDate("25 January 2002 12:05")<br>A = MakeString("On ", B.DatePart("d"), "/", B.DatePart("m"))<br>&#39 A now contains "On 25/1"</pre><br>',info:'',ex:''}},
{id:'Split',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Split</h1><br><p class="body">Returns an array that contains substrings.</p><br><pre class="syntaxblock"><span class="code-required">Split(</span><span class="parameter">Val </span>[<span class="code-required">, </span><span class="parameter">Delimiter </span>[<span class="code-required">, </span><span class="parameter">Count </span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value to split. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Delimiter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Delimiter between         substrings. The default<br>is a single space (" "). </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The maximum number of         substrings to return.<br>If omitted or less than zero, all substrings are         returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array         containing the substrings from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function is useful when you are parsing text strings that<br>contain a number of substrings separated by a character such as a<br>comma (,). For example, the lines of an address are often separated<br>by a comma.</p><br><p class="body">If <span class="italic">Val</span> is an empty string,<br>the return value is an empty array. Otherwise, if Delimiter is an<br>empty string or is not found in Val, the return value is an array<br>containing one item, a copy of <span class="italic">Val</span>. If the current data value is NULL, <span class="italic">Val</span> is an empty string and the return value is an empty array.</p><br><p class="body"><br><span class="italic">Note</span>: The Split function returns<br>a categorical value, making it impossible to assign elements of the<br>returned array. It should also be noted that the result from the Split<br>function is not a real categorical value, because the elements of<br>a categorical must be of type <span class="code">Long (int - VT_I4)</span>, not text.  The parser treats the value as a categorical, but an<br>error is returned when attempting to pass the value into a function<br>that expects a real categorical (<span class="code">ContainsAny</span> for example).</p><br><h2>Example</h2><br><p class="body">This mrScriptBasic example uses the Split function<br>to return the first line and the first two lines of an address that<br>is stored in a single variable with the lines separated by commas.<br>It also shows an example of using the function using the default parameters:</p><br><pre class="codeblock">Dim Address, FirstLine, FirstTwoLines, Defaults<br><br>Address = "363 Park Road, Ashford, Kent"<br><br>FirstLine = Address.Split(",", 1)      &#39 Returns {363 Park Road}<br>FirstTwoLines = Address.Split(",", 2)  &#39 Returns {363 Park Road, Ashford}<br>Defaults = Address.Split()             &#39 Returns {363,Park,Road,,Ashford,,Kent}</pre><br>',info:'',ex:''}},
{id:'Replace',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Replace</h1><br><p class="body">Replaces part of a text or categorical value with another value<br>of the same type.</p><br><pre class="syntaxblock"><span class="code-required">Replace(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Key</span><span class="code-required">, </span><span class="parameter">Replacement</span> [<span class="code-required">, </span><span class="parameter">Start</span> [<span class="code-required">, </span><span class="parameter">Count</span> [<span class="code-required">, </span><span class="parameter">IgnoreCase</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Text or Categorical. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Key</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to look for in <span class="italic">Val</span>, of the same type as  <span class="italic">Val</span>. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Replacement</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value with which to replace <span class="italic">Key</span>, of the same type as  <span class="italic">Val</span>. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Start</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Position in <span class="italic">Val</span> (starting from 0), from which to start searching for <span class="italic">Key</span>. If omitted or less than 0, searching<br>starts at the start of <span class="italic">Val</span>. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Maximum number of replacements to make. If omitted<br>or less than 0, all possible replacements are made. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreCase</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to do case-insensitive comparison for <span class="italic">Key</span>. The default is False. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Copy of <span class="italic">Val</span> with <span class="italic">Key</span> replaced with  <span class="italic">Replacement</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> is of type Text, <span class="italic">Key</span> and <span class="italic">Replacement</span> are converted to text values, unless they are already text values<br>or NULL. If <span class="italic">Val</span> is of type Categorical, <span class="italic">Key</span> and <span class="italic">Replacement</span> are converted to categorical values, unless they are already categorical<br>values or NULL. An error occurs if <span class="italic">Key</span> or  <span class="italic">Replacement</span> cannot be converted<br>to the required type.</p><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is NULL. If <span class="italic">Key</span> is NULL,<br>no replacements are made. If <span class="italic">Replacement</span> is NULL, occurrences of  <span class="italic">Key</span> are removed instead of being replaced. If <span class="italic">Val</span> is of any other type, an error occurs.</p><br><h2>Examples</h2><br><p class="body">The following mrScriptBasic example shows the<br>use of the Replace function to replace all the hyphens in a text variable<br>with spaces.</p><br><pre class="codeblock">strVal = strVal.Replace("-", " ")</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'MakeMDMName',group:'func',sub:'',descr:{name:'',descr:'<br><h1>MakeMDMName</h1><br><p class="body">This function replaces characters in a text string that are not<br>allowed in the name of an  MDM object, to produce a valid name.</p><br><pre class="syntaxblock"><br><span class="code-required">MakeMDMName(</span><span class="parameter">Val</span><span class="code-required">)</span><br><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text value to encode.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Copy of <span class="italic">Val</span>  with changes<br>to make it a valid name for an MDM object.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The following changes are made:</p><br><p class="bullet">• Leading and trailing spaces are removed.</p><br><p class="bullet">• Null, blank, or empty names are converted to "No_name__".</p><br><p class="bullet">• Any occurrence of the character # is replaced by<br>#23 (23 is the hexadecimal  representation of the Unicode character<br>code for #).</p><br><p class="bullet">• Any character that is not allowed anywhere in an<br>MDM name is replaced by #  followed by its two-digit hexadecimal character<br>code.</p><br><p class="bullet">• If the resulting text starts with any character that<br>is not allowed at the  start of an MDM name, then the string _#00<br>is inserted at the start of the text.</p><br><p class="body">These conversions ensure that</p><br><p class="bullet">• The resulting text is a valid MDM name.</p><br><p class="bullet">• Different input strings always produce distinct output<br>strings.</p><br><p class="bullet">• It is possible to "decode" the resulting text to<br>get the original  (although no library function is provided to do<br>this).</p><br><h2>Examples</h2><br><p class="body"><br><span class="italic">SPSS username</span> becomes  <span class="italic">SPSS#5Cusername</span><br></p><br><p class="body"><br><span class="italic">user@domain.com</span> becomes  <span class="italic">user@domain#2Ecom</span><br></p><br><p class="body"><br><span class="italic">\\machine\file</span> becomes  <span class="italic">_#00#5C#5Cmachine#5Cfile</span><br></p><br><p class="body"><br><span class="italic">Neither agree nor disagree</span> becomes  <span class="italic">Neither#20agree#20nor#20disagree</span><br></p><br><p class="body"><br><span class="italic">12</span> becomes  <span class="italic">_#0012</span><br></p><br><p class="body"><br><span class="italic">Under $12</span> becomes  <span class="italic">Under#20$12</span><br></p><br>',info:'',ex:''}},
{id:'Format',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Format</h1><br><p class="body">Returns a string that is the result of formatting a value according<br>to one or more specified styles.</p><br><pre class="syntaxblock"><span class="code-required">Format(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Style</span> [<span class="code-required">, </span><span class="parameter">Width</span> [<span class="code-required">, </span><span class="parameter">Locale</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to be formatted.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Style</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. One or more formatting codes. Multiple codes must<br>be separated by semicolons.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Width</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The minimum width of the formatted string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Locale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The output locale to use for regional variations<br>in formatting. If <span class="italic">Locale</span> is omitted<br>or is negative, the current output locale is used for formatting.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> formatted as a text<br>string.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> is formatted according<br>to <span class="italic">Style</span>, as described below.<br>If <span class="italic">Width</span> is supplied and the<br>formatted string is shorter than the absolute value of <span class="italic">Width</span>, the string is padded with space characters<br>to make it up to (the absolute value of) <span class="italic">Width</span> characters. If <span class="italic">Width</span> is negative, spaces are added at the end of the string; otherwise,<br>spaces are added at the start.</p><br><p class="body">An error occurs if <span class="italic">Val</span> is<br>an array with more than one dimension. <span class="italic">Locale</span>, if specified, is used for regional variations in formatting, but<br>not for error messages. Custom formatting is not currently supported.</p><br><p class="body">If the metadata to be used for formatting needs to provided by<br>a separate variable from <span class="italic">Val</span>,<br>use the <a href="Tabug_formatvalue.htm">FormatValue</a> function.</p><br><p class="body"><br><span class="runinhead">Style Code Syntax</span><br></p><br><p class="body"> <br><span class="italic">Style</span> consists of one or more formatting codes.<br>Multiple codes must be separated by semicolons. Each code is of the form <span class="syntax">C[p][=t]</span>, where:</p><br><p class="bullet">• <span class="syntax">C</span> is a letter specifying the type of formatting<br>to do.</p><br><p class="bullet">• <span class="syntax">p</span> is an optional<br>integer that modifies the formatting in some way, depending on <span class="syntax">C</span>.</p><br><p class="bullet">• <span class="syntax">t</span> is<br>an optional text argument whose meaning depends on <span class="syntax">C</span>.</p><br><p class="body">If <span class="syntax">C</span> is an unknown code, the formatting described under<br>None in the table below is used (and no error occurs), using the values of <span class="syntax">p</span> and <span class="syntax">t</span>, if<br>supplied. The argument <span class="syntax">p</span> may not have<br>a plus or minus sign, so it can only be a non-negative integer. If <span class="syntax">p</span> or <span class="syntax">t</span> is inappropriate<br>for <span class="syntax">C</span>, it is ignored (and no error occurs).</p><br><p class="body"><br><span class="runinhead">Applying a Style</span><br></p><br><p class="body">Except for the Count style<br>(s, described in the table below), if <span class="italic">Val</span> is<br>an array or a categorical value, the result is a comma-separated list of the<br>results of applying the given style code (or codes) to each item or element<br>in turn (in this case, “Val” in the table below refers to each<br>individual item or element, not the whole array). No attempt is made to differentiate<br>the separator character from any occurrences of the same character in the<br>individual formatted values. Note that this gives the same result for a categorical<br>value as for an array of long values. Note also that, if an array contains<br>values of different types, the style code (or codes) may be interpreted differently<br>for different items. If <span class="italic">Width</span> is specified,<br>it is applied to the whole list, not to individual items.</p><br><p class="body">Except for<br>special cases described in the table below, the value is converted to the<br>expected type, using the input locale where necessary to interpret strings.<br>For an object, the value of the object’s default property is used (in<br>this case, “Val” below refers to the retrieved value). If any<br>error occurs in retrieving an object’s properties, or in converting<br>a value to the expected type, the result for that value is “”,<br>except where noted below.</p><br><p class="body">Where formatting is affected by locale settings,<br>the system settings for the locale are used, ignoring any “user overrides”<br>(changes made to regional settings by the user currently logged in to the<br>server).</p><br><p class="body">Except for the Count style (s, described below), if <span class="italic">Val</span> is NULL, the result is an empty string ("").</p><br><p class="body"><br><span class="runinhead">Applying Multiple Styles</span><br></p><br><p class="body">If <span class="italic">Style</span> consists of more than one formatting code,<br>each code is applied in turn to <span class="italic">Val</span> as<br>described in “Applying a Style” above. Because the result of<br>applying the first code will always be a text value, subsequent codes should<br>only be those that are relevant to text values, for example, LowerFirst, Count,<br>or UpperAll (l, s, or U, described below).</p><br><p class="body">Any padding required by <span class="italic">Width</span> is done after all codes have been applied.</p><br><p class="body"><br><span class="runinhead">Style Code Definitions</span><br></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Code</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Style Name</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, the same as for Label (b), using <span class="italic">t</span> if supplied.</p><br><p class="body">For any other object, the same<br>as for Value (v), using <span class="italic">t</span> if supplied. </p><br><p class="body">For<br>other types, the same as CText(<span class="italic">Val</span>),<br>ignoring <span class="italic">p</span> and <span class="italic">t</span>.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">a</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Name</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, the Name property. If an error occurs retrieving<br>the name, the result is “”.</p><br><p class="body">For any other object, the<br>result of applying the Name format to the object&#39s default property value.</p><br><p class="body">For<br>other types, the Name of the MDM Element whose value is CLong(<span class="italic">Val</span>).<br>If the MDM Element or its Name cannot be accessed, the Name of the MDM mapped<br>category value whose value is CLong(<span class="italic">Val</span>).<br>If the MDM mapped category value does not exist, the result is the same as<br>for Decimal1 (d), using <span class="italic">p</span> if supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NameFull</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Name (a), but using the FullName instead of the Name<br>for an MDMLabeledObject or MDM Element.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">b</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Label</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, its Label. If an error occurs retrieving<br>the label, the result is “”.</p><br><p class="body">For any other object, the<br>result of applying the Label format to the object’s default property<br>value.</p><br><p class="body">For other types, the Label of the MDM Element (in the current<br>MDM object) whose value is CLong(<span class="italic">Val</span>).<br>If an error occurs retrieving the label, the result is the same as Decimal1<br>(d), using <span class="italic">p</span> if supplied.</p><br><p class="body">Labels<br>are retrieved using the current Context and Language in the metadata. If <span class="italic">t</span> is given, it’s the name of the LabelType<br>to use. If <span class="italic">t</span> is omitted, or specifies<br>a nonexistent LabelType, the current LabelType is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">B</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LabelFull</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Label (b), but using the FullLabel instead of the Label<br>for an MDMLabeledObject or MDM Element. The FullLabel can only be retrieved<br>for the MDM document’s current LabelType, so <span class="italic">t</span> is<br>ignored.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">c</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Currency</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as a currency, using the currency symbol and format specified by<br>the output locale. The number of decimal places is adjusted to <span class="italic">p</span> by rounding <span class="italic">Val</span> (away<br>from zero, for borderline cases), or by adding zeros at the end. If <span class="italic">p</span> = 0, the result has no decimal separator and no<br>fractional part. If <span class="italic">p</span> is omitted, the<br>default for the output locale is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">C</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Currency-Code</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Currency (c), but using the three-character international<br>monetary symbol specified by the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">d</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateShort, Decimal1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, short date format specified by the output locale<br>(ignoring time of day in <span class="italic">Val</span>). </p><br><p class="body">For<br>other types, <span class="italic">Val</span> converted to long and<br>formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt;<br>0. Followed by...</p> <br><p class="bullet">• One or more decimal digits (0-9).</p><br><p class="body">The<br>string length is increased to <span class="italic">p</span>, if given,<br>by inserting zeros before the first digit.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">D</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateLong, Decimal2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, long date format specified by the output locale<br>(ignoring time of day in <span class="italic">Val</span>).</p><br><p class="body">For<br>other types, same as for Decimal1 (d).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">e</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Scientific-Lower</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt;<br>0. Followed by...</p><br><p class="bullet">• One decimal digit (0-9). Followed by...</p><br><p class="bullet">• A decimal point (.). Followed by...</p><br><p class="bullet">• <span class="italic">p</span> decimal digits (0-9). Followed by...</p><br><p class="bullet">• Lower-case<br>e. Followed by...</p><br><p class="bullet">• A plus or minus sign (+ or -). Followed<br>by...</p><br><p class="bullet">• Three decimal digits (0-9).</p><br><p class="body">The part before<br>the e (the mantissa) is <span class="italic">Val</span> scaled by<br>a power of 10 so that its absolute value is &gt;= 1.0 and &lt; 10.0, unless <span class="italic">Val</span> is 0.0. The number of decimal places is adjusted<br>by rounding the mantissa (away from zero, for borderline cases), or by adding<br>zeros at the end. If <span class="italic">p</span> = 0, the mantissa<br>has no decimal separator and no fractional part. If <span class="italic">p</span> is<br>omitted, it has 6 decimal places.</p><br><p class="body">The part after the e (the exponent)<br>is the power of 10 by which the mantissa must be multiplied to give <span class="italic">Val</span>. The exponent length is increased to 3 digits,<br>if necessary, by adding zeros at the left. If <span class="italic">Val</span> is<br>0.0, the mantissa and exponent are both zero. If the absolute value of <span class="italic">Val</span> is &gt; 0.0 and &lt; 1.0, the exponent is negative,<br>otherwise it is positive.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">E</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Scientific-Upper</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for ScientificLower (e), but with an upper-case E.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">f, F</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateTime, FixedPoint</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, long date and time formats specified by the output<br>locale, separated by a space.</p><br><p class="body">For other types, <span class="italic">Val</span> converted<br>to double and formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt; 0. Followed by...</p><br><p class="bullet">• One<br>or more decimal digits (0-9). Followed by...</p><br><p class="bullet">• A decimal<br>separator (specified by the output locale). Followed by...</p><br><p class="bullet">• <span class="italic">p</span> decimal digits.</p><br><p class="body">The number of decimal places<br>is adjusted by rounding <span class="italic">Val</span> (away from<br>zero, for borderline cases), or by adding zeros at the end. If <span class="italic">p</span> = 0, the result has no decimal separator and no<br>fractional part. If <span class="italic">p</span> is omitted, the<br>default for the output locale is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">l</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LowerFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to lower case (if it’s an upper-case<br>letter) according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">L</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LowerAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with all alphabetic<br>characters converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">n, N</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Fixed-Grouped</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as for FixedPoint1 (f), but with digits before the decimal separator<br>grouped according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">p, P</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Percent</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>multiplied by 100.0, formatted as for FixedPoint (f), followed by a percent<br>sign (%).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">s, S</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Count</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an array or categorical value, the number of items/elements<br>it contains.</p><br><p class="body">For text, the number of characters in the string.</p><br><p class="body">For<br>NULL, 0.</p><br><p class="body">For other types, 1.</p><br><p class="body">For all types, the count is formatted<br>as for Decimal1 (d), using <span class="italic">p</span> if supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">t, T</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Time</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to date and formatted<br>according to the time format specified by the output locale (ignoring the<br>date part of <span class="italic">Val</span>).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">u</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">UpperFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to upper case (if it’s a lower-case<br>letter) according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">U</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">UpperAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with all alphabetic<br>characters converted to upper case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">v</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an object value, the value of a specified property, converted<br>to text. If <span class="italic">t</span> is given, it’s the<br>name of the property to use. If <span class="italic">t</span> is<br>omitted, or the value of the specified property can’t be retrieved,<br>the default property of the object is used, if it exists. If no suitable property<br>is found, the result is “”. The first property that returns<br>a value is used, even if the value it returns is “”.</p><br><p class="body">For<br>other types, <span class="italic">Val</span> converted to long and<br>formatted as for Decimal1 (d), using <span class="italic">p</span> if<br>supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">V</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ValueNative</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an object value, the value of a specified property (same as<br>for Value (v)).</p><br><p class="body">For other types, the native value (for the current DataSource<br>in the metadata) of the MDM ElementInstance whose value is CLong(<span class="italic">Val</span>), formatted as for Decimal1 (d), using <span class="italic">p</span> if supplied. If the native value can’t<br>be retrieved, the result is “”.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">w</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TitleFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to upper case, and the rest of the string<br>converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">W</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TitleAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>character of each word (any alphanumeric character that isn’t preceded<br>by an alphanumeric character) converted to upper case, and the rest of the<br>string converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">x</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">HexLower</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to long and formatted<br>as one or more hexadecimal digits (0-9 and a-f).</p><br><p class="body"><br><span class="italic">Val</span> is<br>treated as an unsigned value; this means that if <span class="italic">Val</span> &lt;<br>0, the value formatted is equivalent to <span class="italic">Val</span> +<br>Pow(2, 31). Thus the range of possible non-negative long values (0 to 2147483647)<br>is formatted as “0” to “7fffffff”, and the range<br>of negative values (-2147483648 to -1) is formatted as “80000000”<br>to “ffffffff”. This is consistent with the hexadecimal syntax<br>for expressing integers in mrScript, eg &amp;H80000000 = -2147483648.</p><br><p class="body">The<br>string length is increased to <span class="italic">p</span>, if given,<br>by inserting zeros before the first digit.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">X</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">HexUpper</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for HexLower (x), but with upper-case A-F for the hexadecimal<br>digits.</p><br></td></tr></tbody></table><p class="body">Most of the above style codes are based on format specifiers used<br>in .NET, with some extensions. For locale-specific formatting rules, see <a target="N342AF" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_8rse.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_8rse.asp</a>.</p><br><h2>Examples</h2><br><p class="body"><br><span class="runinhead">1. Using the Format function in mrScriptBasic</span><br></p><br><p class="body">Note: Many of the examples in the table below make use of the Household<br>sample metadata document, <span class="code">household.mdd</span>, that is installed with the DDL.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="56.47840531561462%"><br><col width="20.598006644518275%"><br><col width="22.92358803986711%"><br></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Notes</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Format(CDate("2004-12-02 15:49:31"), "f", , 1046)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"quinta-feira, 2 de dezembro de 2004 15:49:31"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Brazilian Portuguese DateTime format</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Format(CDate("2004-12-02 15:49:31"), "f", , 1052) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"2004-12-02 3:49:31.MD "</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Albanian DateTime format</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Format(MDM.Fields["person.trip.purpose"], "a")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"purpose"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Name property</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Format(MDM.Fields["person.trip.purpose"], "A")</',info:'',ex:''}},
{id:'FormatValue',group:'func',sub:'',descr:{name:'',descr:'<br><h1>FormatValue</h1><br><p class="body">Returns a string that is the result of formatting a value according<br>to one or more specified styles. The FormatValue function is identical<br>to the <a href="Tabug_format.htm">Format</a> function, except that the metadata<br>to be used for formatting is provided by one variable, while the value<br>to be formatted may come from elsewhere.</p><br><pre class="syntaxblock"><span class="code-required">FormatValue(</span><span class="parameter">ValFormat</span><span class="code-required">, </span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Style</span> [<span class="code-required">, </span><span class="parameter">Width</span> [<span class="code-required">, </span><span class="parameter">Locale</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">ValFormat</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A variable that provides the metadata to be used for formatting.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to be formatted.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Style</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. One or more formatting codes. Multiple codes must<br>be separated by semicolons.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Width</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The minimum width of the formatted string.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Locale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The output locale to use for regional variations<br>in formatting. If <span class="italic">Locale</span> is omitted<br>or is negative, the current output locale is used for formatting.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> formatted as a text<br>string.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> is formatted according<br>to <span class="italic">Style</span>, as described below.<br>For those formatting codes that can use metadata information, such<br>as Name, Label, and ValueNative (a, b, and V, described in the table<br>below), <span class="italic">Val</span> is formatted using<br>the metadata information provided by <span class="italic">ValFormat</span>. That is, <span class="italic">Val</span> is formatted<br>as if it were the current value of the <span class="italic">ValFormat</span> variable.</p><br><p class="body"> If <span class="italic">Width</span> is supplied and<br>the formatted string is shorter than the absolute value of <span class="italic">Width</span>, the string is padded with space characters<br>to make it up to (the absolute value of) <span class="italic">Width</span> characters. If <span class="italic">Width</span> is negative, spaces are added at the end of the string; otherwise,<br>spaces are added at the start.</p><br><p class="body"><br><span class="runinhead">Style Code Syntax</span><br></p><br><p class="body"> <br><span class="italic">Style</span> consists of one or more formatting codes.<br>Multiple codes must be separated by semicolons. Each code is of the form <span class="syntax">C[p][=t]</span>, where:</p><br><p class="bullet">• <span class="syntax">C</span> is a letter specifying the type of formatting<br>to do.</p><br><p class="bullet">• <span class="syntax">p</span> is an optional<br>integer that modifies the formatting in some way, depending on <span class="syntax">C</span>.</p><br><p class="bullet">• <span class="syntax">t</span> is<br>an optional text argument whose meaning depends on <span class="syntax">C</span>.</p><br><p class="body">If <span class="syntax">C</span> is an unknown code, the formatting described under<br>None in the table below is used (and no error occurs), using the values of <span class="syntax">p</span> and <span class="syntax">t</span>, if<br>supplied. The argument <span class="syntax">p</span> may not have<br>a plus or minus sign, so it can only be a non-negative integer. If <span class="syntax">p</span> or <span class="syntax">t</span> is inappropriate<br>for <span class="syntax">C</span>, it is ignored (and no error occurs).</p><br><p class="body"><br><span class="runinhead">Applying a Style</span><br></p><br><p class="body">Except for the Count style<br>(s, described in the table below), if <span class="italic">Val</span> is<br>an array or a categorical value, the result is a comma-separated list of the<br>results of applying the given style code (or codes) to each item or element<br>in turn (in this case, “Val” in the table below refers to each<br>individual item or element, not the whole array). No attempt is made to differentiate<br>the separator character from any occurrences of the same character in the<br>individual formatted values. Note that this gives the same result for a categorical<br>value as for an array of long values. Note also that, if an array contains<br>values of different types, the style code (or codes) may be interpreted differently<br>for different items. If <span class="italic">Width</span> is specified,<br>it is applied to the whole list, not to individual items.</p><br><p class="body">Except for<br>special cases described in the table below, the value is converted to the<br>expected type, using the input locale where necessary to interpret strings.<br>For an object, the value of the object’s default property is used (in<br>this case, “Val” below refers to the retrieved value). If any<br>error occurs in retrieving an object’s properties, or in converting<br>a value to the expected type, the result for that value is “”,<br>except where noted below.</p><br><p class="body">Where formatting is affected by locale settings,<br>the system settings for the locale are used, ignoring any “user overrides”<br>(changes made to regional settings by the user currently logged in to the<br>server).</p><br><p class="body">Except for the Count style (s, described below), if <span class="italic">Val</span> is NULL, the result is an empty string ("").</p><br><p class="body"><br><span class="runinhead">Applying Multiple Styles</span><br></p><br><p class="body">If <span class="italic">Style</span> consists of more than one formatting code,<br>each code is applied in turn to <span class="italic">Val</span> as<br>described in “Applying a Style” above. Because the result of<br>applying the first code will always be a text value, subsequent codes should<br>only be those that are relevant to text values, for example, LowerFirst, Count,<br>or UpperAll (l, s, or U, described below).</p><br><p class="body">Any padding required by <span class="italic">Width</span> is done after all codes have been applied.</p><br><p class="body"><br><span class="runinhead">Style Code Definitions</span><br></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Code</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Style Name</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, the same as for Label (b), using <span class="italic">t</span> if supplied.</p><br><p class="body">For any other object, the same<br>as for Value (v), using <span class="italic">t</span> if supplied. </p><br><p class="body">For<br>other types, the same as CText(<span class="italic">Val</span>),<br>ignoring <span class="italic">p</span> and <span class="italic">t</span>.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">a</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Name</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, the Name property. If an error occurs retrieving<br>the name, the result is “”.</p><br><p class="body">For any other object, the<br>result of applying the Name format to the object&#39s default property value.</p><br><p class="body">For<br>other types, the Name of the MDM Element whose value is CLong(<span class="italic">Val</span>).<br>If the MDM Element or its Name cannot be accessed, the Name of the MDM mapped<br>category value whose value is CLong(<span class="italic">Val</span>).<br>If the MDM mapped category value does not exist, the result is the same as<br>for Decimal1 (d), using <span class="italic">p</span> if supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NameFull</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Name (a), but using the FullName instead of the Name<br>for an MDMLabeledObject or MDM Element.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">b</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Label</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an MDMLabeledObject, its Label. If an error occurs retrieving<br>the label, the result is “”.</p><br><p class="body">For any other object, the<br>result of applying the Label format to the object’s default property<br>value.</p><br><p class="body">For other types, the Label of the MDM Element (in the current<br>MDM object) whose value is CLong(<span class="italic">Val</span>).<br>If an error occurs retrieving the label, the result is the same as Decimal1<br>(d), using <span class="italic">p</span> if supplied.</p><br><p class="body">Labels<br>are retrieved using the current Context and Language in the metadata. If <span class="italic">t</span> is given, it’s the name of the LabelType<br>to use. If <span class="italic">t</span> is omitted, or specifies<br>a nonexistent LabelType, the current LabelType is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">B</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LabelFull</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Label (b), but using the FullLabel instead of the Label<br>for an MDMLabeledObject or MDM Element. The FullLabel can only be retrieved<br>for the MDM document’s current LabelType, so <span class="italic">t</span> is<br>ignored.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">c</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Currency</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as a currency, using the currency symbol and format specified by<br>the output locale. The number of decimal places is adjusted to <span class="italic">p</span> by rounding <span class="italic">Val</span> (away<br>from zero, for borderline cases), or by adding zeros at the end. If <span class="italic">p</span> = 0, the result has no decimal separator and no<br>fractional part. If <span class="italic">p</span> is omitted, the<br>default for the output locale is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">C</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Currency-Code</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for Currency (c), but using the three-character international<br>monetary symbol specified by the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">d</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateShort, Decimal1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, short date format specified by the output locale<br>(ignoring time of day in <span class="italic">Val</span>). </p><br><p class="body">For<br>other types, <span class="italic">Val</span> converted to long and<br>formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt;<br>0. Followed by...</p> <br><p class="bullet">• One or more decimal digits (0-9).</p><br><p class="body">The<br>string length is increased to <span class="italic">p</span>, if given,<br>by inserting zeros before the first digit.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">D</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateLong, Decimal2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, long date format specified by the output locale<br>(ignoring time of day in <span class="italic">Val</span>).</p><br><p class="body">For<br>other types, same as for Decimal1 (d).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">e</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Scientific-Lower</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt;<br>0. Followed by...</p><br><p class="bullet">• One decimal digit (0-9). Followed by...</p><br><p class="bullet">• A decimal point (.). Followed by...</p><br><p class="bullet">• <span class="italic">p</span> decimal digits (0-9). Followed by...</p><br><p class="bullet">• Lower-case<br>e. Followed by...</p><br><p class="bullet">• A plus or minus sign (+ or -). Followed<br>by...</p><br><p class="bullet">• Three decimal digits (0-9).</p><br><p class="body">The part before<br>the e (the mantissa) is <span class="italic">Val</span> scaled by<br>a power of 10 so that its absolute value is &gt;= 1.0 and &lt; 10.0, unless <span class="italic">Val</span> is 0.0. The number of decimal places is adjusted<br>by rounding the mantissa (away from zero, for borderline cases), or by adding<br>zeros at the end. If <span class="italic">p</span> = 0, the mantissa<br>has no decimal separator and no fractional part. If <span class="italic">p</span> is<br>omitted, it has 6 decimal places.</p><br><p class="body">The part after the e (the exponent)<br>is the power of 10 by which the mantissa must be multiplied to give <span class="italic">Val</span>. The exponent length is increased to 3 digits,<br>if necessary, by adding zeros at the left. If <span class="italic">Val</span> is<br>0.0, the mantissa and exponent are both zero. If the absolute value of <span class="italic">Val</span> is &gt; 0.0 and &lt; 1.0, the exponent is negative,<br>otherwise it is positive.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">E</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Scientific-Upper</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for ScientificLower (e), but with an upper-case E.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">f, F</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DateTime, FixedPoint</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For a date value, long date and time formats specified by the output<br>locale, separated by a space.</p><br><p class="body">For other types, <span class="italic">Val</span> converted<br>to double and formatted as follows:</p><br><p class="bullet">• A minus sign (-) if <span class="italic">Val</span> &lt; 0. Followed by...</p><br><p class="bullet">• One<br>or more decimal digits (0-9). Followed by...</p><br><p class="bullet">• A decimal<br>separator (specified by the output locale). Followed by...</p><br><p class="bullet">• <span class="italic">p</span> decimal digits.</p><br><p class="body">The number of decimal places<br>is adjusted by rounding <span class="italic">Val</span> (away from<br>zero, for borderline cases), or by adding zeros at the end. If <span class="italic">p</span> = 0, the result has no decimal separator and no<br>fractional part. If <span class="italic">p</span> is omitted, the<br>default for the output locale is used.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">l</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LowerFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to lower case (if it’s an upper-case<br>letter) according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">L</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">LowerAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with all alphabetic<br>characters converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">n, N</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Fixed-Grouped</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>formatted as for FixedPoint1 (f), but with digits before the decimal separator<br>grouped according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">p, P</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Percent</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to double and<br>multiplied by 100.0, formatted as for FixedPoint (f), followed by a percent<br>sign (%).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">s, S</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Count</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an array or categorical value, the number of items/elements<br>it contains.</p><br><p class="body">For text, the number of characters in the string.</p><br><p class="body">For<br>NULL, 0.</p><br><p class="body">For other types, 1.</p><br><p class="body">For all types, the count is formatted<br>as for Decimal1 (d), using <span class="italic">p</span> if supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">t, T</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Time</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to date and formatted<br>according to the time format specified by the output locale (ignoring the<br>date part of <span class="italic">Val</span>).</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">u</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">UpperFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to upper case (if it’s a lower-case<br>letter) according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">U</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">UpperAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with all alphabetic<br>characters converted to upper case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">v</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an object value, the value of a specified property, converted<br>to text. If <span class="italic">t</span> is given, it’s the<br>name of the property to use. If <span class="italic">t</span> is<br>omitted, or the value of the specified property can’t be retrieved,<br>the default property of the object is used, if it exists. If no suitable property<br>is found, the result is “”. The first property that returns<br>a value is used, even if the value it returns is “”.</p><br><p class="body">For<br>other types, <span class="italic">Val</span> converted to long and<br>formatted as for Decimal1 (d), using <span class="italic">p</span> if<br>supplied.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">V</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ValueNative</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">For an object value, the value of a specified property (same as<br>for Value (v)).</p><br><p class="body">For other types, the native value (for the current DataSource<br>in the metadata) of the MDM ElementInstance whose value is CLong(<span class="italic">Val</span>), formatted as for Decimal1 (d), using <span class="italic">p</span> if supplied. If the native value can’t<br>be retrieved, the result is “”.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">w</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TitleFirst</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>alphanumeric character converted to upper case, and the rest of the string<br>converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">W</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TitleAll</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">CText(<span class="italic">Val</span>), with the first<br>character of each word (any alphanumeric character that isn’t preceded<br>by an alphanumeric character) converted to upper case, and the rest of the<br>string converted to lower case according to the rules for the output locale.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">x</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">HexLower</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body"><br><span class="italic">Val</span> converted to long and formatted<br>as one or more hexadecimal digits (0-9 and a-f).</p><br><p class="body"><br><span class="italic">Val</span> is<br>treated as an unsigned value; this means that if <span class="italic">Val</span> &lt;<br>0, the value formatted is equivalent to <span class="italic">Val</span> +<br>Pow(2, 31). Thus the range of possible non-negative long values (0 to 2147483647)<br>is formatted as “0” to “7fffffff”, and the range<br>of negative values (-2147483648 to -1) is formatted as “80000000”<br>to “ffffffff”. This is consistent with the hexadecimal syntax<br>for expressing integers in mrScript, eg &amp;H80000000 = -2147483648.</p><br><p class="body">The<br>string length is increased to <span class="italic">p</span>, if given,<br>by inserting zeros before the first digit.</p><br></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">X</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">HexUpper</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><p class="body">Same as for HexLower (x), but with upper-case A-F for the hexadecimal<br>digits.</p><br></td></tr></tbody></table><p class="body">Most of the above style codes are based on format specifiers used<br>in .NET, with some extensions. For locale-specific formatting rules, see <a target="N34720" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_8rse.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_8rse.asp</a>.</p><br><h2>Examples</h2><br><p class="body"><br><span class="runinhead">1. Using the FormatValue function in<br>an SQL query</span><br></p><br><p class="body">This example shows the use of the FormatValue function in an SQL<br>query that can be run against the Museum sample data set provided<br>with the IBM® SPSS®<br>Data Collection Developer Library (DDL). The query lists the categories in the museums variable, and for<br>each category shows the total number of male and female respondents<br>who selected that category:</p><br><pre class="codeblock">SELECT FormatValue(museums, GROUPBY.COL[0], &#39b&#39) Museum,<br>    SUM(gender = {male}) Male,<br>    SUM(gender = {female}) Female<br>FROM vdata GROUP BY museums ON DefinedCategories(museums)</pre><br><p class="body">In the above example, the FormatValue function is effectively used<br>to display the label of each category in the set returned by <span class="code">DefinedCategories(museums)</span>. Because the result<br>of <span class="code">DefinedCategories(museums)</span> is<br>a set of category values with no connection to the metadata for the<br>museums variable, it is not possible to use the <a href="Tabug_format.htm">Format</a> function to return the label of each category in the<br>set. Instead, the FormatValue function is used so that the museums<br>variable can be specified as providing the metadata for the formatting<br>of the category values returned by <span class="code">DefinedCategories(museums)</span>.</p><br><p class="body">Here is the result set of running the example query:</p><br><pre class="codeblock">Museum                            Male Female<br>--------------------------------- ---- ------<br>National Museum of Science         209    124<br>Museum of Design                    49     43<br>Institute of Textiles and Fashion   31     16<br>Archeological Museum                18      8<br>National Art Gallery                 7     12<br>Northern Gallery                    11     10<br>Other                               16     21<br>(null)                               0      0</pre><br>',info:'',ex:''}},
// {id:'RegexReplace',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'TegexTest',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'RegexFind',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'MakeFileName',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'Base64Encode',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'Base64Decode',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'Encrypt',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'Decrypt',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
{id:'AnswerCount',group:'func',sub:'',descr:{name:'',descr:'<br><h1>AnswerCount</h1><br><p class="body">Use the <span class="syntax">AnswerCount</span> function<br> to define a quota based on the number of answers chosen         <br> from a multiple response list. </p><br><p class="body">The syntax is:</p><br><pre class="syntaxcompactblock"><br><span class="parameter">variable</span>.AnswerCount()<span class="parameter">numeric condition</span><br><br></pre><br><p class="body">For example, to define a quota for respondents<br>          who can name more than five brands of fizzy drinks:</p><br><pre class="syntaxcompactblock">fizzy.AnswerCount() &gt; 5<br></pre><br>',info:'',ex:''}},
{id:'GetAnswer',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetAnswer</h1><br><p class="body">Returns a specified category in a category list.</p><br><pre class="syntaxblock"><span class="code-required">GetAnswer(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Index</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Index</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Position of category to         retrieve from <span class="italic">Val</span>, starting from 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The category         at the requested position in <span class="italic">Val</span>, if found, or an empty Categorical value<br>if it is not found.         </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Index </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">GetAnswer(Q1,         Index)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,3,2,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.GetAnswer(Index)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,3,2,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3}</td></tr></tbody></table><p class="body">The following example tests whether the <span class="label">Fossils</span> category is in the first position in the list<br>of responses stored for each respondent in the <span class="name">remember</span> multiple response variable: </p><br><pre class="codeblock">remember.GetAnswer(0) = {FOSSILS}</pre><br>',info:'',ex:''}},
{id:'HasAnswer',group:'func',sub:'',descr:{name:'',descr:'<br><h1>HasAnswer</h1><br><p class="body">Identifies whether a specified category is in a category list.</p><br><pre class="syntaxblock"><span class="code-required">HasAnswer(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answer</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answer</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Category to look for in <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> contains the<br>category, False otherwise. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is False.</p><br><p class="body">The HasAnswer function has been superseded by <a href="Tabug_containsall.htm">ContainsAll</a>, <a href="Tabug_containsany.htm">ContainsAny</a>, and <a href="Tabug_containssome.htm">ContainsSome</a>. However, HasAnswer has been retained for backwards compatibility.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Response </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Filter </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.HasAnswer(Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">10</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">HasAnswer(Q1,         Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr></tbody></table><p class="body">The following example selects respondents who chose the category<br>with the <script type="text/javascript"><br>    var N2211E_term = "Definition of Mapped category value";<br><br>    var N2211E_def = "A numeric value that the assigns to each unique category name in the metadata.";<br></script><a href="javascript:void(0)" style="cursor:hand; cursor:pointer" class="glossary-ref" onclick="popup(N2211E_term,N2211E_def,event);" title="Definition of Mapped category value">mapped category value</a> of 31 (which is the <span class="label">Dinosaurs</span> category) in response to the <span class="name">remember</span> question. In a multiple response variable, HasAnswer returns True<br>regardless of whether any other category was chosen in response to<br>the question. This example therefore selects all respondents who chose<br>the <span class="label">Dinosaurs</span> category regardless<br>of whether they also chose any other category.</p><br><pre class="codeblock">remember.HasAnswer(31)</pre><br>',info:'',ex:''}},
{id:'ContainsAny',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ContainsAny</h1><br><p class="body">Identifies whether a category list contains one or more categories<br>in a given list.</p><br><pre class="syntaxblock"><span class="code-required">ContainsAny(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answers</span> [<span class="code-required">, </span><span class="parameter">Exactly</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type         Categorical or Text, specifying<br>a set of categories to look for in <span class="italic">Val</span>. If <span class="italic">Answers</span> is empty, the function<br>returns False. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Exactly </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If True, the         function returns False if <span class="italic">Val</span> contains any categories that are not<br>in <span class="italic">Answers</span>. If <span class="italic">Exactly</span> is omitted or False, the function<br>returns True if any of the         categories in <span class="italic">Answers</span> are in <span class="italic">Val</span>, even if <span class="italic">Val</span> contains other<br>categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> contains the<br>categories as specified, otherwise False.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is False.<br>If <span class="italic">Answers</span> is NULL, the return<br>value is False.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Response </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Filter </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAny(Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,13}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAny(Filter,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,13}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAny(Filter,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{11,4,2,8,6,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsAny(Answers,         Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr></tbody></table><p class="body">Like <a href="Tabug_containsall.htm">ContainsAll</a> and <a href="Tabug_containssome.htm">ContainsSome</a>, ContainsAny<br>is typically used to filter multiple response data. The Museum sample<br>data set contains a multiple response variable called <span class="name">remember</span>, which records the galleries that<br>respondents remember viewing. You could use the following example<br>to create a filter to select respondents who chose either or both<br>of the <span class="label">Fossils</span> and <span class="name">Dinosaurs</span> categories in response to the question:</p><br><pre class="codeblock">remember.ContainsAny({fossils, dinosaurs})</pre><br><p class="body">This filter will select respondents who chose either one or both<br>of the two categories regardless of whether they chose any additional<br>categories. For example, it will select respondents who chose any<br>of the following:</p><br><p class="bullet">• The <span class="name">Fossils</span> category<br>only.</p><br><p class="bullet">• The <span class="name">Dinosaurs</span> category<br>only.</p><br><p class="bullet">• The <span class="name">Fossils</span> and <span class="label">Dinosaurs</span> categories only.</p><br><p class="bullet">• The <span class="name">Fossils</span> category<br>and any other category. </p><br><p class="bullet">• The <span class="name">Dinosaurs</span> category<br>and any other category.</p><br><p class="body">To restrict the filter to respondents who chose either or both<br>of the two specified categories and no others, set <span class="italic">Exactly</span> to True:</p><br><pre class="codeblock">remember.ContainsAny({fossils, dinosaurs}, True)</pre><br>',info:'',ex:''}},
{id:'ContainsAll',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ContainsAll</h1><br><p class="body">Identifies whether a category list contains all of the categories<br>in a given list.</p><br><pre class="syntaxblock"><span class="code-required">ContainsAll(</span><span class="parameter">Val</span>, <span class="parameter">Answers</span> [<span class="code-required">, </span><span class="parameter">Exactly</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type         Categorical or Text, specifying<br>a set of categories to look for in <span class="italic">Val</span>. If <span class="italic">Answers</span> is empty, the function<br>returns True, unless <span class="italic">Exactly</span> is<br>True and <span class="italic">Val</span> is not empty. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Exactly</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If True, the         function returns True only if <span class="italic">Val</span> contains all of the categories in <span class="italic">Answers</span> and no others. If <span class="italic">Exactly</span> is omitted or False, the function<br>returns True if all of the         categories in <span class="italic">Answers</span> are in <span class="italic">Val</span>, even if <span class="italic">Val</span> contains other<br>categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> contains all<br>of the categories in <span class="italic">Answers</span>,<br>otherwise False. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is False.<br>If <span class="italic">Answers</span> is NULL, the return<br>value is False.</p><br><p class="body">This function is equivalent to the &gt;= <a href="Tabug_expression_comparison_operators.htm">comparison<br>operator</a> for Categorical values,<br>except that the NULL behavior is different. See  the topic <a href="Tabug_null_values.htm">Null Values</a> for more information.  However, using the &gt;= operator<br>is generally faster than using the ContainsAll function.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Response </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Filter </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsAll(Response, Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7}         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAll(Filter,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7} </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAll(Filter, True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,7,11,4,8,2}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7} </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Response.ContainsAll(Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,6,4,8,11,7,20}         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False </td></tr></tbody></table><p class="body">Like <a href="Tabug_containsany.htm">ContainsAny</a> and <a href="Tabug_containssome.htm">ContainsSome</a>, ContainsAll<br>is typically used to filter multiple response data. The Museum sample<br>data set contains a multiple response variable called <span class="name">remember</span>, which records the galleries that<br>respondents remember viewing. You could use the following example<br>to create a filter to select respondents who chose the <span class="label">Fossils</span> and <span class="name">Dinosaurs</span> categories in response to the question:</p><br><pre class="codeblock">remember.ContainsAll({fossils, dinosaurs})</pre><br><p class="body">This filter will select respondents who chose both <span class="label">Fossils</span> and <span class="name">Dinosaurs</span> regardless of whether they chose any additional categories. To restrict<br>the filter to respondents who chose <span class="label">Fossils</span> and <span class="name">Dinosaurs</span> and no other categories,<br>set <span class="italic">Exactly</span> to True:</p><br><pre class="codeblock">remember.ContainsAll({fossils, dinosaurs}, True)</pre><br>',info:'',ex:''}},
{id:'ContainsSome',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ContainsSome</h1><br><p class="body">Identifies whether a category list contains some of the categories<br>in a given list.</p><br><pre class="syntaxblock"><span class="code-required">ContainsSome(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answers</span> [<span class="code-required">, </span><span class="parameter">Min</span>] [<span class="code-required">, </span><span class="parameter">Max</span>] [<span class="code-required">, </span><span class="parameter">Exactly</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type         Categorical or Text, specifying<br>a set of categories to look for in <span class="italic">Val</span>. If <span class="italic">Answers</span> is empty, the function<br>returns True (unless <span class="italic">Exactly</span> is<br>True and <span class="italic">Val</span> is not empty). </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The minimum number of         categories in <span class="italic">Answers</span> that must be in <span class="italic">Val</span> for the function to return True. If<br>omitted, the minimum is         one.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The maximum number of         categories in <span class="italic">Answers</span> that must be in <span class="italic">Val</span> for the function to return True. If<br>omitted, the maximum is the         number of categories in <span class="italic">Answers</span>. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Exactly</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If True, the         function returns True only if<span class="italic"> Val</span> contains the specified number of categories<br>and no others. If <span class="italic">Exactly</span> is<br>omitted or False, the function returns True if the specified     <br>   number of categories in <span class="italic">Answers</span> are in<span class="italic"> Val</span>, even if <span class="italic">Val</span> contains other categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> contains the<br>specified categories, otherwise False. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is False.<br>If <span class="italic">Answers</span> is NULL, the return<br>value is False.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Response </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Filter </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response,         Filter)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,10,11}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response, Filter, 1, 3,         False)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,10,11}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response, Filter, 1, 3,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,10,11}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response, Filter, 1, 2,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,10,11,3,1}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response, Filter, 1, 3,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ContainsSome(Response, Filter, 1, 2,         True)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr></tbody></table><p class="body">Like <a href="Tabug_containsall.htm">ContainsAll</a> and <a href="Tabug_containsany.htm">ContainsAny</a>, ContainsSome<br>is typically used to filter multiple response data. The Museum sample<br>data set contains a multiple response variable called <span class="name">remember</span>, which records the galleries that<br>respondents remember viewing. You could use the following example<br>to create a filter to select respondents who chose two or more of<br>four specified categories in response to the question:</p><br><pre class="codeblock">remember.ContainsSome({fossils, dinosaurs, birds, whales}, 2)</pre><br><p class="body">To restrict the filter to respondents who chose at least two, but<br>not more than three, of the four categories, set <span class="italic">Max</span> to 3:</p><br><pre class="codeblock">remember.ContainsSome({fossils, dinosaurs, birds, whales}, 2, 3)</pre><br><p class="body">To restrict the filter to respondents who chose at least two, but<br>not more than three, of the four categories and no others, set <span class="italic">Exactly</span> to True:</p><br><pre class="codeblock">remember.ContainsSome({fossils, dinosaurs, birds, whales}, 2, 3, True)</pre><br>',info:'',ex:''}},
{id:'DefinedCategories',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DefinedCategories</h1><br><p class="body">Returns a set of categories of a categorical variable.</p><br><pre class="syntaxblock"><span class="code-required">DefinedCategories(</span><span class="parameter">Val</span> [<span class="code-required">,</span> <span class="parameter">Answers</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value, used only to specify which MDM object to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Variant value of type         Categorical or Text,<br>specifying a set of categories. If omitted, all categories       <br> from the VariableInstance are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         category numbers as defined in the VariableInstance.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> may refer to any type<br>of MDM object that has elements,  for example, Field, Array , Grid<br>or VariableInstance, or it may be an Elements list itself.</p><br><p class="body">If <span class="italic">Answers</span> is of type Text,<br>it is assumed to be a category expression and is resolved to a list<br>of categories. If <span class="italic">Answers</span> is<br>of type Categorical and contains category names, they are converted<br>to category numbers.</p><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value. If Answers is NULL, the return value is<br>all of the categories defined in the current variable.</p><br><h2>Example</h2><br><p class="body">This example shows how the DefinedCategories function can be used<br>in an SQL query on a multiple response variable to define groups based<br>on the categories.</p><br><pre class="codeblock">SELECT groupby.col[0] AS Museums,<br>    BASE(museums) AS &#39Base&#39<br>FROM vdata<br>WHERE museums IS NOT NULL<br>GROUP BY museums ON museums.DefinedCategories()</pre><br><p class="body">Here is the result set:</p><br><pre class="syntaxblock">Museums                               Base    <br>------------------------------------- ------- <br>{national_museum_of_science}          333     <br>{museum_of_design}                    92<br>{institute_of_textiles_and_fashion}   47<br>{archeological_museum}                26<br>{national_art_gallery}                19<br>{northern_gallery}                    21<br>{other}                               37<br>{not_answered}                        0 <br></pre><br>',info:'',ex:''}},
{id:'Intersection',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Intersection</h1><br><p class="body">Returns the intersection of two or more category lists--that is,<br>it returns the categories that appear in all of the category lists.<br>The categories are returned in the order in which they appear in the<br>first category list.</p><br><pre class="syntaxblock"><span class="code-required">Intersection(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Vals</span>, ...]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">One or more variant values of type         Categorical or Text.<br>Each value specifies a set of categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         categories that are in all of <span class="italic">Val</span> and <span class="italic">Vals</span>, in the order in which they occur in <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value. If an item in <span class="italic">Vals</span> is NULL, the item is ignored.</p><br><p class="body">This function is equivalent to the * <a href="Tabug_expressions_operator_arithmetic.htm">arithmetic<br>operator</a> for Categorical values,<br>except that Intersection can operate on named categories and the NULL<br>behavior is different. See  the topic <a href="Tabug_null_values.htm">Null Values</a> for more information.  However, using the * operator is generally faster than using the<br>Intersection function.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Intersection(Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,10,3,5,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{9,6}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Intersection(Q1,         Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td></tr></tbody></table><p class="body"></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q3 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Intersection(Q2, Q3)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,6,8,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,3,4,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,7,8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Intersection(Q1,         Q2, Q3)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,6,8,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4,6,7,8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,8,2}</td></tr></tbody></table><p class="body">Like <a href="Tabug_difference.htm">Difference</a> and <a href="Tabug_xunion.htm">XUnion</a>, Intersection is useful when<br>categorical variables have identical or overlapping response lists.<br>The <span class="name">biology</span> and <span class="name">education</span> variables are single response categorical variables<br>that have identical category lists (<span class="label">Yes</span>, <span class="label">No</span>, and <span class="label">Not answered</span>). You could use the Intersection function<br>to return the categories that are in both of the category lists. In<br>the following example, the = operator tests whether the result is<br>the <span class="label">Yes</span> category. You could therefore<br>use this example to select respondents who chose the <span class="label">Yes</span> category in response to both questions.</p><br><pre class="codeblock">biology.Intersection(education) = {yes}</pre><br>',info:'',ex:''}},
{id:'Union',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Union</h1><br><p class="body">Returns the union of two or more category lists--that is, it returns<br>all of the categories that are in any one or more of the category<br>lists.</p><br><pre class="syntaxblock"><span class="code-required">Union(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Vals</span>, ...]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">One or more variant values of type         Categorical or Text.<br>Each value specifies a set of categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">All of the         categories in <span class="italic">Val</span> , followed by any other categories that are in <span class="italic">Vals</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If an item in <span class="italic">Vals</span> is NULL,<br>the item is ignored. If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and<br>the return value is the union of all non-NULL items in <span class="italic">Vals</span>.</p><br><p class="body">This function is equivalent to the + <a href="Tabug_expressions_operator_arithmetic.htm">arithmetic<br>operator</a> for Categorical values,<br>except that Union can operate on named categories and the NULL behavior<br>is different. See  the topic <a href="Tabug_null_values.htm">Null Values</a> for more information.  However,<br>using the + operator is generally faster than using the Union function.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Union(Q1,         Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,3,2,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,7,5}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,3,2,4,7}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Union(Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,2,9,6,1,7}</td></tr></tbody></table><p class="body"></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q3 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Union(Q2, Q3)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,8,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,4,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,7,8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,8,2,3,4,1,7}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Union(Q1,         Q2, Q3)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,8,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,4,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6,8,2,3,4}</td></tr></tbody></table><p class="body">The following example uses Union to combine the results of two<br>single response categorical variables that have similar category lists<br>and tests whether the result includes the <span class="label">Yes</span> category. For example, you could use this example<br>to select respondents who chose <span class="label">Yes</span> in response to at least one of the questions.</p><br><pre class="codeblock">Union(biology, education) &gt;= {yes}</pre><br>',info:'',ex:''}},
{id:'XUnion',group:'func',sub:'',descr:{name:'',descr:'<br><h1>XUnion</h1><br><p class="body">Returns the exclusive union of two category lists--that is, it<br>returns all of the categories that are in either one of the category<br>lists, but not in both.</p><br><pre class="syntaxblock"><span class="code-required">XUnion(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answers</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type         Categorical or Text, specifying<br>a set of categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         categories that are in either <span class="italic">Val</span> or <span class="italic">Answers</span> but not in both. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is <span class="italic">Answers</span>. If <span class="italic">Answers</span> is NULL, the return value is <span class="italic">Val</span>.</p><br><p class="body">This function is equivalent to the / <a href="Tabug_expressions_operator_arithmetic.htm">arithmetic<br>operator</a> for Categorical values,<br>except that it can operate on named categories and the NULL behavior<br>is different. See  the topic <a href="Tabug_null_values.htm">Null Values</a> for more information.  However,<br>using the / operator is generally faster than using the XUnion function.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">XUnion(Q1,         Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,5,9,10,23,5,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,16,4,10}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,9,23,6,16,4}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.XUnion(         Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,5,9,}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,3,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td></tr></tbody></table><p class="body">Like the <a href="Tabug_difference.htm">Difference</a> and <a href="Tabug_intersection.htm">Intersection</a> functions,<br>XUnion is useful when categorical variables have identical or overlapping<br>category lists. For example the <span class="name">biology</span> and <span class="name">education</span> variables have<br>identical response lists. In the following example, XUnion is used<br>to return any categories that are in either one of the category lists,<br>but not in both and the &gt;= operator tests whether the result contains<br>the <span class="label">Yes</span> category. For example,<br>you could use this expression to select respondents who chose the <span class="name">Yes</span> category in response to either one of<br>the questions, but not to both.</p><br><pre class="codeblock">XUnion(biology, education) &gt;= {yes}</pre><br>',info:'',ex:''}},
{id:'Differrence',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Difference</h1><br><p class="body">Returns the difference of two category lists--that is, it returns<br>the categories that are in the first category list but not in the<br>second. The categories are returned in the order in which they appear<br>in the first category list.</p><br><pre class="syntaxblock"><span class="code-required">Difference(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answers</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type         Categorical or Text, specifying<br>a set of categories. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         categories that are in <span class="italic">Val</span> but not in <span class="italic">Answers</span>, in the order in which they appear in <span class="italic">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value. If <span class="italic">Answers</span> is NULL, the return value is <span class="italic">Val</span>.</p><br><p class="body">This function is equivalent to the subtract (-) <a href="Tabug_expressions_operator_arithmetic.htm">arithmetic<br>operator</a> for Categorical values,<br>except that Difference can operate on named categories and the NULL<br>behavior is different. See  the topic <a href="Tabug_null_values.htm">Null Values</a> for more information.  However, using the subtract (-) operator is generally faster than<br>using the Difference function.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q2 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Difference(Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,5,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Difference(Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3,4,5,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,5,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Difference(Q1,         Q2)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{1,2,3,4,5,6}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,4,1,2,5}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td></tr></tbody></table><p class="body">Like <a href="Tabug_intersection.htm">Intersection</a> and <a href="Tabug_xunion.htm">XUnion</a>, Difference is useful when<br>categorical variables have identical or overlapping category lists.<br>For example, the <span class="name">remember</span> and <span class="name">interest</span> variables are categorical variables<br>that have similar category lists. <span class="name">remember</span> is a multiple response variable that records which galleries the<br>respondents remember viewing, and <span class="name">interest</span> is a single response variable that records which gallery respondents<br>found most interesting. In the following example, the Difference function<br>is used to remove the responses given to the <span class="name">interest</span> question from the responses given to the <span class="name">remember</span> question. The &gt;= operator then<br>tests whether the resulting list of categories includes the <span class="label">Fossils</span> category. You could use this expression<br>to create a filter to select respondents who remember the <span class="label">Fossils</span> gallery, but who did not find it<br>the most interesting gallery.</p><br><pre class="codeblock">Difference(remember, interest) &gt;= {FOSSILS}</pre><br><p class="body"></p><br>',info:'',ex:''}},
{id:'Unique',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Unique</h1><br><p class="body">Returns a category list with any duplicate categories removed.</p><br><pre class="syntaxblock"><span class="code-required">Unique(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The         categories in <span class="italic">Val</span>, but with any duplicates removed. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value.</p><br><p class="body">Note that <span class="italic">Val</span> cannot consist<br>of a category expression.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Q1 </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Q1.Unique()</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,4,3,5,2,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,1,6,4,3,2}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Unique(Q1)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,1,2}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,1,2}</td></tr></tbody></table>',info:'',ex:''}},
{id:'DefinedElements',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DefinedElements</h1><br><p class="body">Returns a set of elements of a categorical variable.</p><br><pre class="syntaxblock"><span class="code-required">DefinedElements(</span><span class="parameter">Val</span> [<span class="code-required">,</span> <span class="parameter">Types</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value, used only to specify which MDM object to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Types</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Flags specifying         which types of Element objects<br>to include. The default is (Category +         Base).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         category numbers as defined in the VariableInstance.</td></tr></tbody></table><p class="body">The possible values for <span class="italic">Types</span> are shown in the following table.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Category elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Base elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Subtotal elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Summary data elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">16</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Derived elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">32</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Subheading elements</td></tr></tbody></table><p class="body">The flags may be used in any combination, to select elements of<br>more than one type. For example,  to select all Category and Base<br>elements, use 1 + 2 = 3.</p><br><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> may refer to any type<br>of MDM object that has elements,  for example, Field, Array , Grid<br>or VariableInstance, or it may be an Elements list itself.</p><br><p class="body">If the current value is NULL, <span class="italic">Val</span> is an empty Categorical value ({}) and the return value is also<br>an empty Categorical value. </p><br><p class="body">Like <a href="Tabug_definedcategories.htm">DefinedCategories</a>, DefinedElements<br>is typically used to define groups in SQL queries. However, whereas<br>DefinedCategories defines groups based on categories only, you can<br>use DefinedElements to define groups based on any element type that<br>stores case data or a combination of these element types. </p><br><h2>Examples</h2><br><p class="body">The following query creates groups based on all categories and<br>any base elements in the <span class="name">gender</span> and <span class="name">gender.Ex</span> variables in the<br>Museum IBM® SPSS® Quanvert™ sample data base. The <span class="name">gender.Ex</span> variable is included in the GROUP<br>BY statement because Quanvert DSC stores special<br>elements in a separate variable that has an .<span class="name">Ex</span> suffix. See Quanvert DSC in the IBM® SPSS®<br>Data Collection Developer Library for more information.</p><br><pre class="codeblock">SELECT groupby.col[0] AS Gender, <br>    SUM(visits) AS &#39Sum of visits&#39 <br>FROM vdata <br>WHERE visits &gt; 0 <br>GROUP BY gender.EX + gender <br>    ON gender.Ex.Definedelements() + gender.Definedelements() <br></pre><br><p class="body">Here is the result set:</p><br><pre class="codeblock">Gender     Sum of visits<br>{base}     2131<br>{male}     1309<br>{female}   822</pre><br>',info:'',ex:''}},
{id:'LBound',group:'func',sub:'',descr:{name:'',descr:'<br><h1>LBound</h1><br><p class="body">Returns the smallest available subscript for the indicated dimension<br>of an array.  By default, the lower bound is returned for the first<br>dimension of the array.</p><br><pre class="syntaxblock"><span class="code-required">LBound(</span><span class="parameter">List</span> [<span class="code-required">, </span><span class="parameter">Dimension</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array or Categorical         value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Dimension</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array dimension to use. The         default is 1. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Lower bound of the         list.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function returns the numeric index of the first item in (a<br>particular dimension of) an array. If <span class="italic">Dimension</span> is greater than the number of dimensions in the array, the last<br>dimension is used, and if <span class="italic">Dimension</span> is less than 1, the first dimension is used. A Categorical value<br>is treated as a one-dimensional array. For arrays created in mrScriptBasic and the IBM®<br>SPSS® Data Collection Data Model, the<br>lower bound is always 0.</p><br><p class="body">This function is similar to the LBound function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example defines a<br>two-dimensional array that has 10 rows and an undefined number of<br>columns and assigns a value to the third column in the fourth row.<br>LBound is then used to return the lower bound values of the two dimensions.<br>However, because the array was created in mrScriptBasic, the return value for both dimensions is 0.</p><br><pre class="codeblock">Dim MyArray[10][], a, b<br><br>MyArray[3][2] = 28<br><br>a = LBound(MyArray, 1)       &#39 Returns 0<br>b = LBound(MyArray, 2)       &#39 Returns 0</pre><br><div class="copyright">Licensed Materials - Property<br>of IBM © Copyright IBM Corporation 2000, 2011</div><br><div class="keywords">Function library,Function library,Function library</div><br><div class="keywords">LBound,LBound,LBound</div><br><div class="keywords">LBound,LBound,LBound</div><br><div class="keywords">LBound function,LBound function,LBound function</div><br><br><br></body>',info:'',ex:''}},
{id:'Ubound',group:'func',sub:'',descr:{name:'',descr:'<br><h1>UBound</h1><br><p class="body">Returns the largest available subscript for the indicated dimension<br>of an array.  By default, the upper bound is returned for the first<br>dimension of the array.</p><br><pre class="syntaxblock"><span class="code-required">UBound(</span><span class="parameter">List</span> [<span class="code-required">, </span><span class="parameter">Dimension</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array or Categorical         value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Dimension</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array dimension to use. The         default is 1. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Upper bound of the         list.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function returns the numeric index of the last item in (a<br>particular dimension of) an array. If <span class="italic">Dimension</span> is greater than the number of dimensions in the array, the last<br>dimension is used, and if <span class="italic">Dimension</span> is less than 1, the first dimension is used. A Categorical value<br>is treated as a one-dimensional array.</p><br><p class="body">This function is similar to the UBound function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example defines a<br>two-dimensional array that has 10 rows and an undefined number of<br>columns and assigns a value to the third column in the fourth row.<br>UBound is then used to return the upper bound values of the two dimensions.</p><br><pre class="codeblock">Dim MyArray[10][], x, y<br><br>MyArray[3][2] = 28<br><br>x = UBound(MyArray, 1)    &#39 Returns 9 <br>y = UBound(MyArray, 2)    &#39 Returns 2</pre><br><div class="copyright">Licensed Materials - Property<br>of IBM © Copyright IBM Corporation 2000, 2011</div><br><div class="keywords">Function library,Function library,Function library</div><br><div class="keywords">UBound,UBound,UBound</div><br><div class="keywords">UBound,UBound,UBound</div><br><div class="keywords">UBound function,UBound function,UBound function</div><br><br><br></body>',info:'',ex:''}},
{id:'ReDim',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ReDim</h1><br><p class="body">Re-sizes an array to a given size. By default, the array contents<br>are preserved, unless <span class="italic">Preserve</span> is set to False.</p><br><pre class="syntaxblock"><span class="code-required">ReDim(</span><span class="parameter">List</span>, <span class="parameter">Size</span> [<span class="code-required">, </span><span class="parameter">Preserve</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array or Categorical         value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Size</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">New size of the array. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Preserve</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Defines whether to keep the         existing contents. The<br>default is True. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Always         zero.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function changes the size of the last dimension of an array.<br>If <span class="italic">Preserve</span> is False, all items<br>in all dimensions are cleared. A Categorical value is treated as a<br>one-dimensional array.</p><br><p class="body">This function is similar to the ReDim function in Visual Basic.</p><br><h2>Examples</h2><br><p class="body">The following mrScriptBasic example uses ReDim<br>to redefine a categorical value without clearing it. <a href="Tabug_ubound.htm">UBound</a> is used to return the upper bound value before and after<br>calling ReDim.</p><br><pre class="codeblock">Dim MyCategorical, x, y<br><br>MyCategorical = {1, 3, 5, 8}<br><br>x = UBound(MyCategorical)   &#39 Returns 3<br><br>ReDim(MyCategorical, 2)<br><br>y = UBound(MyCategorical)   &#39 Returns 1</pre><br><p class="body">In this next example, the <span class="italic">Size</span> parameter is set to 4 and the <span class="italic">Preserve</span> parameter is set to False.</p><br><pre class="codeblock">Dim MyCategorical, x, y<br><br>MyCategorical = {1, 3, 5, 8}<br><br>ReDim(MyCategorical, 4, False)<br><br>z = UBound(MyCategorical)   &#39 Returns 3</pre><br><div class="copyright">Licensed Materials - Property<br>of IBM © Copyright IBM Corporation 2000, 2011</div><br><div class="keywords">Function library,Function library,Function library</div><br><div class="keywords">ReDim,ReDim,ReDim</div><br><div class="keywords">ReDim,ReDim,ReDim</div><br><div class="keywords">ReDim function,ReDim function,ReDim function</div><br><br><br></body>',info:'',ex:''}},
{id:'Factor',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Factor</h1><br><p class="body">Returns the factor defined for an element of a categorical variable.</p><br><pre class="syntaxblock"><span class="code-required">Factor(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The element to look up.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Factor number as defined on the element.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> contains more than<br>one element, only the factor for the first element is returned. If <span class="italic">Val</span> is {}, the return value is NULL. If<br>the current data value is NULL, <span class="italic">Val</span> is {} and the return value is NULL.</p><br><p class="body">If the first "element" in <span class="italic">Val</span> is actually (the MDM value of) an element list, the sublist is expanded<br>until an actual element is found, if any. If the element does not<br>have a factor defined, the return value is NULL. Note that the factor<br>can be a Long or Double value.</p><br>',info:'',ex:''}},
{id:'DefinedFactors',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DefinedFactors</h1><br><p class="body">Returns a set of factor numbers as defined on the categories in<br>a variable.</p><br><pre class="syntaxblock"><span class="code-required">DefinedFactors(</span><span class="parameter">Val</span> [<span class="code-required">,</span> <span class="parameter">Answers</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value, used only to specify which MDM object to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Variant value of type         Categorical or Text,<br>specifying a set of categories to look for. If omitted, all categories<br>        from the object are used. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Set of         factor numbers as defined in on the categories,<br>matching the order of the categories in <span class="italic">Answers</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> may refer to any type<br>of MDM object that has elements,  for example, Field, Array , Grid<br>or VariableInstance, or it may be an Elements list itself.</p><br><p class="body">If <span class="italic">Answers</span> is of type Text,<br>it is assumed to be a category expression and is resolved to a list<br>of categories. If <span class="italic">Answers</span> is<br>of type Categorical and contains category names, they are converted<br>to category numbers.</p><br><p class="body">The function returns a factor of 0 for sublists and for categories<br>with no factor defined. Factors can be long or double values.</p><br><p class="body">To sort the returned values, use <span class="italic">SortAsc</span> or <span class="italic">SortDesc</span>.</p><br>',info:'',ex:''}},
{id:'DefinedListElements',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DefinedListElements</h1><br><p class="body">Returns a set of elements of a categorical variable.</p><br><pre class="syntaxblock"><span class="code-required">DefinedListElements(</span><span class="parameter">Val</span><span class="code-required">,</span> <span class="parameter">Answers</span> [<span class="code-required">,</span> <span class="parameter">Types</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value, used only to specify which MDM object to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Answers</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text or Categorical value specifying element lists in <span class="italic">Val</span>. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Types</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Flags specifying which types of Element objects to<br>include. Default is (Category + Base). </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Element numbers from the specified lists.</td></tr></tbody></table><p class="body">The possible values for <span class="italic">Types</span> are shown in the following table.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Category elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Base elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Subtotal elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Summary data elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">16</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Derived elements</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">32</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Subheading elements</td></tr></tbody></table><p class="body">These values may be used in any combination, to select elements<br>of more than one type. For example,  to select all Category and Base<br>elements, use 1 + 2 = 3.</p><br><h2>Remarks</h2><br><p class="body"><br><span class="italic">Val</span> may refer to any type<br>of MDM object that has elements,  for example, Field, Array, Grid<br>or VariableInstance.</p><br><p class="body">If <span class="italic">Answers</span> is of type Text,<br>it is assumed to be a category  expression, except that it only applies<br>to category lists (Elements objects in MDM), and is resolved  to a<br>list of lists. (It may contain both names of Elements objects and<br> their numeric values.) If <span class="italic">Answers</span> is of type Categorical, only  lists with the same value as the categories<br>in <span class="italic">Answers</span> are used. If <span class="italic">Answers</span> is NULL, all lists in  <span class="italic">Val</span> are used. If <span class="italic">Answers</span>  is of any other type, an error occurs.</p><br><p class="body">The return value is the union of the elements from the selected<br>lists, including elements from any  sublists they contain. Any list<br>name or value that is not found among  <span class="italic">Val</span>&#39s elements is silently ignored (with no error reported).</p><br>',info:'',ex:''}},
{id:'Merge',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Merge</h1><br><p class="body">Returns the union of a number of categorical values; that is, returns<br>the categories that are in any of the input categorical values.</p><br><pre class="syntaxblock"><span class="code-required">Merge(</span><span class="parameter">[Vals, ...]</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">One or more values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The union of categorical values from <span class="italic">Vals</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">Values in <span class="italic">Vals</span> are converted<br>to categorical values if necessary, and the return value is their<br>union. NULL values are ignored. If a value cannot be converted to<br>a categorical type, an error occurs. If <span class="italic">Vals</span> is empty (no arguments are supplied), or all the values are NULL,<br>the return value is NULL. This function differs from using the + operator<br>to get the union of categorical values, by ignoring NULL values instead<br>of giving a NULL result if any NULL values are present. It differs<br>from the <a href="Tabug_union.htm">Union</a> function by not supporting the use of category<br>expressions.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example combines<br>the results of three categorical variables to produce a merged categorical<br>variable.</p><br><pre class="codeblock">Merge(Q1, Q2, Q3)</pre><br></body>',info:'',ex:''}},
{id:'FilterBy',group:'func',sub:'',descr:{name:'',descr:'<br><h1>FilterBy</h1><br><p class="body">An alias to the Intersection function.</p><br>',info:'',ex:''}},
{id:'ContainsAllExactly',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ContainsAllExactly</h1><br><p class="body">This function is identical to <a href="Tabug_containsall.htm">ContainsAll</a>, except that it is used for a list of all non-category elements<br>that are calculated against <span class="code">&lt;var&gt;</span>, where <span class="name">HasNoData</span> is false or<br>omitted. This function is used when the list is not empty.</p><br><pre class="syntaxblock"><span class="code-required">ContainsAllExactly(</span><span class="parameter">Val</span>, <span class="parameter">Answers</span> [<span class="code-required">, </span><span class="parameter">Exactly</span>]<span class="code-required">)</span><br></pre><br>',info:'',ex:''}},
{id:'ContainsAnyExactly',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ContainsAnyExactly</h1><br><p class="body">This function is identical to <a href="Tabug_containsany.htm">ContainsAny</a>, except that it is used for a list of all non-category elements<br>that are calculated against <span class="code">&lt;var&gt;</span>, where <span class="name">HasNoData</span> is false or<br>omitted. This function is used when the list is not empty.</p><br><pre class="syntaxblock"><span class="code-required">ContainsAnyExactly(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Answers</span> [<span class="code-required">, </span><span class="parameter">Exactly</span>]<span class="code-required">)</span><br></pre><br>',info:'',ex:''}},
{id:'CText',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CText</h1><br><p class="body">Converts a value of any data type to a Text value.</p><br><pre class="syntaxblock"><span class="code-required">CText(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text         representation of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><p class="body"><br><span class="runinhead">Boolean.</span> The return value is "True" or "False" or their locale equivalents.</p><br><p class="body"><br><span class="runinhead">Long or Double. </span>The string contains the number formatted<br>according to the locale.</p><br><p class="body"><br><span class="runinhead">Date.</span> The string contains the date formatted according<br>to the locale. </p><br><p class="body"><br><span class="runinhead">Text. </span><span class="italic">Val</span> is returned unchanged. </p><br><p class="body"><br><span class="runinhead">Categorical. </span>The string is of the form "{1,2,0}", where<br>the numbers are the values of the categories in <span class="italic">Val</span> (formatted using digits only, ignoring the locale).</p><br><p class="body"><br><span class="runinhead">Object.</span> If the object has a default property, the value<br>of that property is converted. Otherwise an error occurs.</p><br><p class="body"><br><span class="runinhead">NULL values. </span>If <span class="italic">Val</span> is NULL, the return value is an empty<br>string ("").</p><br><p class="body">This function is similar to CStr in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,7}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6004.67</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6004.67</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14 April         2001</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14/04/2001</td></tr></tbody></table><p class="body">For an mrScriptBasic example of using CText, see <a href="dmgr_cleaning_example1.htm">1. More Than One Response To a Single Response Question</a>.</p><br>',info:'',ex:''}},
{id:'CDouble',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CDouble</h1><br><p class="body">Converts a value of any data type to a Double value.</p><br><pre class="syntaxblock"><span class="code-required">CDouble(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double         value derived from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><p class="body"><br><span class="runinhead">Boolean.</span> The return value is 1.0 (True) or 0.0 (False).</p><br><p class="body"><br><span class="runinhead">Long. </span>The return value is equal to <span class="italic">Val</span>, with a fractional part of zero.</p><br><p class="body"><br><span class="runinhead">Double. </span><span class="italic">Val </span>is<br>returned unchanged. </p><br><p class="body"><br><span class="runinhead">Date.</span> The return value is the floating-point number used<br>internally to represent the date. </p><br><p class="body"><br><span class="runinhead">Text. </span>The string is parsed according to the locale to<br>extract the value. An error occurs if the string does not contain<br>a properly formatted double.</p><br><p class="body"><br><span class="runinhead">Categorical.</span> An error occurs.</p><br><p class="body"><br><span class="runinhead">Object. </span>If the object has<br>a default property, the value of that property is converted. Otherwise<br>an error occurs.</p><br><p class="body"><br><span class="runinhead">NULL values. </span>If <span class="italic">Val</span> is NULL, the return value is 0.0.</p><br><p class="body">This function is similar to CDbl in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1.0</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345.0</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">56.798</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">56.798</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14 April 2001         20:30:02</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">36995.8541898148</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Fossils</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,3,1,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr></tbody></table>',info:'',ex:''}},
{id:'CLong',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CText</h1><br><p class="body">Converts a value of any data type to a Text value.</p><br><pre class="syntaxblock"><span class="code-required">CText(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text         representation of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><p class="body"><br><span class="runinhead">Boolean.</span> The return value is "True" or "False" or their locale equivalents.</p><br><p class="body"><br><span class="runinhead">Long or Double. </span>The string contains the number formatted<br>according to the locale.</p><br><p class="body"><br><span class="runinhead">Date.</span> The string contains the date formatted according<br>to the locale. </p><br><p class="body"><br><span class="runinhead">Text. </span><span class="italic">Val</span> is returned unchanged. </p><br><p class="body"><br><span class="runinhead">Categorical. </span>The string is of the form "{1,2,0}", where<br>the numbers are the values of the categories in <span class="italic">Val</span> (formatted using digits only, ignoring the locale).</p><br><p class="body"><br><span class="runinhead">Object.</span> If the object has a default property, the value<br>of that property is converted. Otherwise an error occurs.</p><br><p class="body"><br><span class="runinhead">NULL values. </span>If <span class="italic">Val</span> is NULL, the return value is an empty<br>string ("").</p><br><p class="body">This function is similar to CStr in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,7}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4,7}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">345</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6004.67</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6004.67</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14 April         2001</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14/04/2001</td></tr></tbody></table><p class="body">For an mrScriptBasic example of using CText, see <a href="dmgr_cleaning_example1.htm">1. More Than One Response To a Single Response Question</a>.</p><br>',info:'',ex:''}},
{id:'CDate',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CDate</h1><br><p class="body">Converts a value of any data type to a Date value.</p><br><pre class="syntaxblock"><span class="code-required">CDate(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date value         derived from <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The converted dates are held in Microsoft variant date standard<br>format. Converting other data types to a date is likely to give meaningless<br>results.</p><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><p class="body"><br><span class="runinhead">Boolean.</span> The return value is likely to be meaningless.</p><br><p class="body"><br><span class="runinhead">Long. </span>The day is <span class="italic">Val</span> days after 30 December 1899 (or before, if <span class="italic">Val</span> is negative) and the time is 00:00:00.</p><br><p class="body"><br><span class="runinhead">Double. </span>The return value is the date and time resulting<br>from using <span class="italic">Val</span> as the internal<br>representation of the date.</p><br><p class="body"><br><span class="runinhead">Date. </span><span class="italic">Val </span>is returned<br>unchanged.</p><br><p class="body"><br><span class="runinhead">Text.</span> The string is parsed according to the locale to<br>extract the value. An error occurs if the string does not contain<br>a properly formatted date.</p><br><p class="body"><br><span class="runinhead">Categorical.</span> An error occurs.</p><br><p class="body"><br><span class="runinhead">Object. </span>If the object has<br>a default property, the value of that property is converted. Otherwise<br>an error occurs.</p><br><p class="body"><br><span class="runinhead">NULL values. </span>If <span class="italic">Val</span> is NULL, the return value is 30 December<br>1899 00:00:00.</p><br><p class="body">This function is similar to CDate in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">37430</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6/23/2002</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">37429.56</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6/22/2002 1:26:24         PM</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">14 April 2001         20:30:02</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4/14/2001 8:30:02 PM</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Fossils</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{5,3,1,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr></tbody></table>',info:'',ex:''}},
{id:'CCategorical',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CCategorical</h1><br><p class="body">Converts a value of any data type to a Categorical value.</p><br><pre class="syntaxblock"><span class="code-required">CCategorical(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value derived from <span class="italic">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Data type of <span class="italic">Val</span></th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Long</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value contains a single category whose value is <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Text</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The function parses the string as a comma-separated list of<br>either category values or names. Category values must be of the form<br>"{1,2,0}", and the return value contains each listed value, in the<br>order given. Category names must be of the form "{married,single,widowed,other}",<br>which the function will convert to a list of category values. You<br>can omit the braces if the value to be converted is a single category<br>value or name. Note that <span class="italic">Val</span> cannot<br>consist of a category expression.<br><br><br> The conversion of category names to values is<br>possible only when the case data is opened with an MDM document, or<br>when a script has an open MDM document available to it. For more information<br>about opening a MDM document in a script, see <a href="funclib_value_resolution.htm">Value Resolution</a>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Categorical</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> is returned unchanged. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Double, Date, or Boolean</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An error occurs.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Object</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If the object has a default property, the value of that property<br>is converted. Otherwise an error occurs.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">NULL value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If <span class="italic">Val</span> is NULL, the return<br>value is an empty Categorical value ({}).</td></tr></tbody></table><p class="body"></p><br><p class="body">There is no equivalent function in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,8,9,3,1}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,8,9,3,1}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">459</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{459}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,8}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text<span class="superscript">1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dinosaurs,birds,mammals}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{31,35,38}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{24}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Some text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr></tbody></table><p class="body"></p><br><p class="body"><br><span class="superscript">1</span> This example assumes<br>that the museum sample MDM document is available to the function.</p><br>',info:'',ex:''}},
{id:'CBoolean',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CCategorical</h1><br><p class="body">Converts a value of any data type to a Categorical value.</p><br><pre class="syntaxblock"><span class="code-required">CCategorical(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value to be converted.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value derived from <span class="italic">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The result of the conversion depends on the data type of <span class="italic">Val</span>, as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Data type of <span class="italic">Val</span></th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Long</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The return value contains a single category whose value is <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Text</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The function parses the string as a comma-separated list of<br>either category values or names. Category values must be of the form<br>"{1,2,0}", and the return value contains each listed value, in the<br>order given. Category names must be of the form "{married,single,widowed,other}",<br>which the function will convert to a list of category values. You<br>can omit the braces if the value to be converted is a single category<br>value or name. Note that <span class="italic">Val</span> cannot<br>consist of a category expression.<br><br><br> The conversion of category names to values is<br>possible only when the case data is opened with an MDM document, or<br>when a script has an open MDM document available to it. For more information<br>about opening a MDM document in a script, see <a href="funclib_value_resolution.htm">Value Resolution</a>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Categorical</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> is returned unchanged. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Double, Date, or Boolean</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An error occurs.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Object</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If the object has a default property, the value of that property<br>is converted. Otherwise an error occurs.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">NULL value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If <span class="italic">Val</span> is NULL, the return<br>value is an empty Categorical value ({}).</td></tr></tbody></table><p class="body"></p><br><p class="body">There is no equivalent function in Visual Basic.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Data Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Value</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,8,9,3,1}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,8,9,3,1}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">459</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{459}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{3,6,8}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text<span class="superscript">1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dinosaurs,birds,mammals}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{31,35,38}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">24</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{24}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Some text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Error</td></tr></tbody></table><p class="body"></p><br><p class="body"><br><span class="superscript">1</span> This example assumes<br>that the museum sample MDM document is available to the function.</p><br>',info:'',ex:''}},
{id:'Band',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Band</h1><br><p class="body">Calculates categories (called <span class="definedword">bands</span>) for a numeric variable and returns the appropriate category for<br>a specified value in the numeric variable.</p><br><pre class="syntaxblock"><span class="code-required">Band(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Min</span>, <span class="parameter">Size</span> [<span class="code-required">, </span><span class="parameter">Count</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Long or         Double. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double value specifying the         (inclusive) lower boundary<br>of the first band. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Size</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double value specifying the         size of each band. If <span class="italic">Size</span> &lt;= 0.0, an empty categorical value<br>is returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of bands         to define. If omitted<br>or &lt; 0, the number of bands is unlimited. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value containing the number of the band into which<br>        the value falls, if it is in the specified range; an empty<br>categorical value         otherwise. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The first band is numbered 1.</p><br><p class="body">The numeric value is considered to fall into band N if</p><br><pre class="syntaxblock">    Val &lt; (Min + N * Size) and<br>    Val &gt;= (Min + (N - 1) * Size) and<br>      N &lt;= Count (if given)</pre><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is an empty Categorical value ({}). </p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Val </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Band(Val, 1.0, 5.0,         10)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">30</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Band(Val, 1.0,         5.0, 10)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">300</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Band(Val,         1.0, 5.0, 100)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">300</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{60}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Band(Val, 1.0, 50,         10)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">300</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{6}</td></tr></tbody></table><p class="body">The following example could be used to create a derived categorical<br>case data variable from the <span class="name">visits</span> numeric variable, which records the number of times respondents<br>have previously visited the museum. This example would create categories<br>corresponding to 1-5 visits, 6-10 visits, 11-15 visits, etc.  </p><br><pre class="codeblock">visits.Band(1, 5) </pre><br>',info:'',ex:''}},
{id:'EqualBand',group:'func',sub:'',descr:{name:'',descr:'<br><h1>EqualBand</h1><br><p class="body">Calculates a specified number of equal categories (called bands)<br>for a numeric variable and returns the appropriate category for a<br>specified value in the numeric variable.</p><br><pre class="syntaxblock"><span class="code-required">EqualBand(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Count</span><span class="code-required">, </span><span class="parameter">Min</span><span class="code-required">, </span><span class="parameter">Max</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Long or         Double. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The number of bands to define         between <span class="italic">Min</span> and <span class="italic">Max</span>. If <span class="italic">Count</span> &lt; 1, an empty<br>categorical value is returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double value specifying the         (inclusive) lower bound<br>of the first band. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double value specifying the         (exclusive) upper bound<br>of the last band. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical value containing the         number of the band<br>into which the value falls, if it is in the specified range;     <br>   an empty categorical value otherwise. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The first band is numbered 1.</p><br><p class="body">The numeric value is considered to fall into band N if</p><br><pre class="syntaxblock">    Val &lt; Min + N * (Max - Min) / Count and<br>    Val &gt;= Min + (N - 1) * (Max - Min) / Count </pre><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is an empty Categorical value ({}). </p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Val </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">EqualBand(Val, 30, 0,         400)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">300</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{23}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">EqualBand(Val, 10, 50,         400)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">300</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8}</td></tr></tbody></table><p class="body">The following example could be used to create a derived categorical<br>case data variable from the <span class="name">visits</span> numeric variable, which records the number of times respondents<br>have previously visited the museum. This example would create ten<br>categories. Respondents who have visited between 1 and 10 times would<br>be in the first category, those who have visited between 11 and 20<br>times would be in the second category, etc. </p><br><pre class="codeblock">visits.EqualBand(10, 1, 100)</pre><br>',info:'',ex:''}},
{id:'CreateObject',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CreateObject</h1><br><p class="body">Creates and returns a reference to an Automation object.</p><br><pre class="syntaxblock"><span class="code-required">CreateObject(</span><span class="parameter">Class</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Class</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The COM class name of the object         to be created. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The created         object.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the object cannot be created, an error occurs.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>CreateObject function as follows: </p><br><p class="bullet">• <span class="runinhead">Line 5. </span>The<br>CreateObject function is used to create a IBM SPSS Data Collection OLE DB Provider DataLinkHelper object so that the <span class="italic">DisplayWizard</span> method can be used to display<br>the Data Link Properties dialog box. See <a href="displaydatalink_overview.htm">Displaying the Data Link Properties<br>Dialog Box</a> for more information.</p><br><p class="bullet">• <span class="runinhead">Line 12. </span>The CreateObject function is used to create an ADO <span class="italic">Connection</span> object, which is then used to<br>open a connection to the data source and to return a recordset by<br>executing a query against VDATA. </p><br><p class="bullet">• <span class="runinhead">Line 17. </span>The CreateObject function is used to create a Word Application object,<br>so that the recordset can be inserted into a Word document.</p><br><pre class="codeblock">Dim Wizard, ConnectionString, wordApp, wordDoc<br><br>&#39 Use the Display wizard to open the Data Link Properties<br>&#39 dialog box to get the connection string<br>Set Wizard = CreateObject("mrOleDB.DataLinkHelper")                 &#39 Line 5<br>ConnectionString = Wizard.DisplayWizard()<br><br>If Len(ConnectionString) &gt; 0 Then<br>   &#39 Create a connection and use it to create a recordset <br>   &#39 by executing a query against VDATA<br>   Dim adoConnection, adoRS<br>   Set adoConnection = CreateObject("ADODB.Connection")             &#39 Line 12<br>   adoConnection.Open(ConnectionString)<br>   Set adoRS = adoConnection.Execute("SELECT age, gender FROM VDATA WHERE Serial &lt; 10")<br> <br>   &#39 Copy the recordset into Word<br>   Set wordApp = CreateObject("Word.Application")                   &#39 Line 17<br>   wordApp.Visible = true<br>   Set wordDoc = wordApp.Documents.Add()<br>   wordDoc.ActiveWindow.Selection.Text = adoRS.GetString()<br>End if</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.4 or later</p><br>',info:'',ex:''}},
{id:'IIf',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IIf</h1><br><p class="body">Returns the value passed as the <span class="italic">TruePart</span> parameter if the expression evaluates to True, otherwise returns<br>the value passed as the <span class="italic">FalsePart</span> parameter.</p><br><pre class="syntaxblock"><span class="code-required">IIf(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">TruePart</span><span class="code-required">, </span><span class="parameter">FalsePart</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">TruePart</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value of any type, to be returned         if <span class="italic">Val</span> is True. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">FalsePart</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value of any type, to be returned         if <span class="italic">Val</span> is False. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Either <span class="italic">TruePart</span> or <span class="italic">FalsePart</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> is True, the function<br>returns the value of <span class="italic">TruePart</span>. Otherwise, it returns the value of <span class="italic">FalsePart</span>.</p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is False and the return value is <span class="italic">FalsePart</span>. <span class="italic">TruePart</span> or <span class="italic">FalsePart</span> (or both) may be NULL.</p><br><h2>Examples</h2><br><p class="body">This example uses IIf to test the value of the <span class="name">visits</span> variable and return the text "Frequent visitor"<br>if it has a value greater than 5 and a blank string otherwise: </p><br><pre class="codeblock">IIf(visits &gt; 5, "Frequent visitor", "")</pre><br><p class="body">The next example uses IIf in a data manipulation statement that<br>is being used to clean "dirty" case data. The WHERE clause restricts<br>the data manipulation to cases for which more than one response has<br>been selected for a particular question. The <a href="rev.htm">Rev</a> function is<br>used to return {0} and {1} in alternating calls. Depending on the<br>result, <a href="sortasc.htm">SortAsc</a> and <a href="sortdesc.htm">SortDesc</a> are called alternately<br>to return the first or last response in the list of responses. Note<br>that the <a href="answercount.htm">AnswerCount</a> function is used to test whether more than<br>one response was selected. </p><br><pre class="codeblock">UPDATE vdata<br>SET rating_ent[{Fossils}].Column = IIf(Rev({0,1}, 1, 2) = {0},<br>    rating_ent[{Fossils}].Column.SortAsc(1),<br>    rating_ent[{Fossils}].Column.SortDesc(1))<br>WHERE rating_ent[{Fossils}].Column.AnswerCount() &gt; 1</pre><br><h2>Usage considerations</h2><br><p class="body">The following behavior should be kept in mind when using the <span class="name">IIF</span> function:</p><br><p class="body">Both <span class="name">TruePart</span> and the <span class="name">FalsePart</span> are evaluated,<br>regardless of which one is actually returned. For example:</p><br><pre class="codeblock">value = 10<br>result = IIf(value = 10, TrueFunction, FalseFunction)</pre><br><p class="body">Although <span class="name">TrueFunction</span> is the function intended to be called, <span class="name">IIf</span> will cause both <span class="name">TrueFunction</span> and <span class="name">FalseFunction</span> to be run.</p><br><pre class="codeblock">a = 10<br>b = 0<br>result = IIf(b &lt;&gt; 0, a / b, 0) </pre><br><p class="body">While the above example intends to avoid raising an error by performing<br>a division by zero, whenever <span class="code">b</span> is<br>zero, the error will actually happen. This is due to the fact that<br>the code in the sample will be read as:</p><br><pre class="codeblock">a = 10<br>b = 0<br>_temp1 = a / b &#39 Error if b = 0<br>_temp2 = 0<br>_temp3 = b &lt;&gt; 0<br>result = IIf(_temp3, _temp1 , _temp2) </pre><br><p class="body">This issue makes the <span class="code">IIf()</span> call<br>less useful than the conditional operator. </p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Eval',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Eval</h1><br><p class="body">Evaluates an expression and returns the result.</p><br><pre class="syntaxblock"><span class="code-required">Eval(</span><span class="parameter">Expr</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Expr</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Expression to evaluate. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The result of         evaluating the expression.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The input and output locales and the variables in use in the calling<br>program are passed to this function and used to parse and evaluate<br>the expression. When used in an SQL statement, the values of variables<br>that aren&#39t available in the calling program are taken to be NULL.<br>However, this does not apply when you use the function in mrScriptBasic.</p><br><p class="body">The state of the calling program is shared with the new expression,<br>so that any calls to other functions such as <a href="rot.htm">Rot</a> and <a href="ran.htm">Ran</a> have the same effect as they would if they were called directly<br>by the calling program. </p><br><p class="body">The type of the return value depends on the type of the expression.<br>If <span class="italic">Expr</span> is empty, the return<br>value is NULL. In a scripting environment, the return value is the<br>value of the first statement in the script.</p><br><p class="body">How you specify a text string as an argument depends on whether<br>you are using the function in an SQL query or in mrScriptBasic or mrScriptMetadata. In an SQL query, enclose<br>text strings in single quotation marks (&#39 &#39). In IBM® SPSS® Data Collection<br>Survey Tabulation, mrScriptBasic, and mrScriptMetadata,<br>enclose text strings in double quotation marks (" ").</p><br><p class="body">This function is similar to the Eval function in VBScript.</p><br><h2>Examples</h2><br><p class="body">In mrScriptBasic, you can build up a text string<br>and pass it to the Eval function as if the string were an actual expression.<br>For example, in the following mrScriptBasic code,<br>Eval returns 3:</p><br><pre class="codeblock">Dim Total   <br>Total = Eval("1 + 2")</pre><br><p class="body">If the text string passed to Eval contains the name of a function,<br>Eval returns the return value of the function. For example, in the<br>following code, Eval returns the current date and time returned by<br>the <a href="now.htm">Now</a> function:</p><br><pre class="codeblock">Dim Time<br>Time = Eval("Now()")  </pre><br><p class="body">The following example returns 97, which is the value returned by<br>the <a href="ascw.htm">AscW</a> function for the "a" character:</p><br><pre class="codeblock">Dim MyCheck   <br>MyCheck  = Eval("AscW(""a"")")</pre><br><p class="body">If the text string passed to Eval in a scripting environment contains<br>more than one statement, Eval executes the statements from left to<br>right but returns the result of the first statement only. For example,<br>the following code includes the <span class="italic">mr.CrLf </span>mrScriptBasic constant, which inserts a carriage return/line feed character<br>into a text string. When the code is executed, Eval tests whether<br>the initial values of <span class="name">x</span> and <span class="name">y</span> have the same value and returns True or<br>False accordingly, and then sets the value of <span class="name">x</span> to 5. </p><br><pre class="codeblock">Dim Test<br>Test = Eval("x = y" + mr.CrLf + "x = 5")</pre><br><p class="body">Notice that this result is different from executing the code outside<br>of the Eval function in mrScriptBasic, where first <span class="name">x</span> would be set to the value of <span class="name">y</span> and then <span class="name">x</span> would be set to 5: </p><br><pre class="codeblock">x = y<br>x = 5</pre><br><p class="body">This is because when <span class="code">x = y</span> is<br>the first statement passed to Eval, it is interpreted as an expression<br>that tests whether <span class="name">x</span> and <span class="name">y</span> have the same value, whereas <span class="code">x = y</span> is generally interpreted in mrScriptBasic as an assignment statement, where the value<br>of <span class="name">y</span> is assigned to <span class="name">x</span>.</p><br><p class="body">Outside of the Eval function, the equivalent code would be:  </p><br><pre class="codeblock">If x = y Then<br>End If<br>x = 5</pre><br><p class="body">However, if you passed similar code to the Eval function you would<br>get an error: </p><br><pre class="codeblock">Test = Eval("If x = y Then" + mr.CrLf + "End If" + mr.CrLf + "x = 5") &#39 Gives an error</pre><br><p class="body">You should therefore take care to make sure that the string passed<br>to Eval is suitable.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'VarType',group:'func',sub:'',descr:{name:'',descr:'<br><h1>VarType</h1><br><p class="body">Returns a numeric value indicating the type of a variable.</p><br><pre class="syntaxblock"><span class="code-required">VarType(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The type of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is a number representing the type of <span class="italic">Val</span>, as shown in the following table.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None (<span class="italic">Val</span> is NULL)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">7</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td></tr></tbody></table><p class="body">An error occurs if <span class="italic">Val</span> has<br>any other type.</p><br><p class="body">This function is similar to the VarType function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>VarType function to determine the type of a variable:</p><br><pre class="codeblock">Dim MyVar, MyTest<br><br>MyVar = 34<br>MyTest = VarType(MyVar)     &#39 Returns 1<br><br>MyVar = "Hullo"<br>MyTest = VarType(MyVar)     &#39 Returns 2<br><br>MyVar = {1, 2, 3, 4}<br>MyTest = VarType(MyVar)     &#39 Returns 3</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'VarTypeName',group:'func',sub:'',descr:{name:'',descr:'<br><h1>VarTypeName</h1><br><p class="body">Returns a string indicating the type of a variable.</p><br><pre class="syntaxblock"><span class="code-required">VarTypeName(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The type of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is a string representing the type of <span class="italic">Val</span>, as shown in the following table.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"None"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None (<span class="italic">Val</span> is NULL)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Long"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Text"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Categorical"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Object"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Date"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Double"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Boolean"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td></tr></tbody></table><p class="body">An error occurs if <span class="italic">Val</span> has<br>any other type.</p><br><p class="body">This function is similar to the TypeName function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>VarTypeName function to determine the type of a variable:</p><br><pre class="codeblock">Dim MyTest, MyVar<br><br>MyVar = 34<br>MyTest = VarTypeName(MyVar)     &#39 Returns "Long"<br><br>MyVar = "Hullo"<br>MyTest = VarTypeName(MyVar)     &#39 Returns "Text"<br><br>MyVar = {1, 2, 3, 4}<br>MyTest = VarTypeName(MyVar)     &#39 Returns "Categorical"</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'BitAnd',group:'func',sub:'',descr:{name:'',descr:'<br><h1>BitAnd</h1><br><p class="body">Performs a bitwise AND on two or more numeric values and returns<br>the result.</p><br><pre class="syntaxblock"><span class="code-required">BitAnd(</span><span class="parameter">Val1</span> [<span class="code-required">, </span><span class="parameter">Vals</span>, ...]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">All values AND-ed together.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Vals</span> is a list if variants,<br>which are converted to Long before they are used. If one or more of<br>them cannot be converted to a Long value, an error occurs.</p><br><p class="body">The return value is a number with only the bits set that are set<br>in <span class="italic">Val1</span> and in all the other<br>value arguments. If the current data value is NULL, <span class="italic">Val1</span> is 0 and the return value is 0. If<br>no other arguments are supplied, the return value is <span class="italic">Val1</span>.</p><br><p class="body">This function is similar to using <span class="code">And</span> as a bitwise operator in Visual Basic.</p><br><h2>Example</h2><br><p class="body">BitAnd is useful for testing whether certain bits have been set.<br>For example, some properties store a numeric value in which the bits<br>are used to record true or false values that represent whether various<br>flags have been set. A type definition is typically used to define<br>the various flags. For example, the <span class="italic">Element.Flag</span> property in the MDM is used to record whether a category is one<br>or more of various special category types, such as <span class="name">Other Specify</span>, <span class="name">Don&#39t know</span>, or <span class="name">Exclusive</span> (which means that<br>the category is single-choice when it is used in a multiple response<br>question). The values are defined in the <span class="italic">CategoryFlagConstants</span> type definition and because the <span class="italic">Flag</span> is used as a bit field, it can store<br>more than one "value". </p><br><p class="body">The following mrScriptBasic code snippet loops<br>through a variable&#39s categories and uses the BitAnd function to test<br>each one to see whether it is defined as exclusive: </p><br><pre class="codeblock">Dim myCategory<br>For each myCategory in Field.ElementInstances<br>   If BitAnd(myCategory.Flag, CategoryFlagConstants.flExclusive) Then<br>      &#39 This is an exclusive category...         <br>   End If<br>Next</pre><br><p class="body">For an example of using BitAnd in combination with other bit functions,<br>see <a href="bitor.htm">BitOr</a> and <a href="bitnot.htm">BitNot</a>. For an example of using BitAnd when cleaning data<br>in a DataManagementScript (DMS) file, see <a href="dmgr_cleaning_example2.htm">4. Cleaning Other Question Types</a>.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br><p class="body">Data Model 2.9 or later for combining more than<br>two values.</p><br>',info:'',ex:''}},
{id:'BitOr',group:'func',sub:'',descr:{name:'',descr:'<br><h1>BitOr</h1><br><p class="body">Performs a bitwise OR on two or more numeric values and returns<br>the result.</p><br><pre class="syntaxblock"><span class="code-required">BitOr(</span><span class="parameter">Val1</span> [<span class="code-required">, </span><span class="parameter">Vals</span>, ...]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">All values OR-ed together.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Vals</span> is a list if variants,<br>which are converted to Long before they are used. If one or more of<br>them cannot be converted to a Long value, an error occurs.</p><br><p class="body">The return value is a number with only the bits set that are set<br>in <span class="italic">Val1</span> or in at least one of<br>the other value arguments. If the current data value is NULL, <span class="italic">Val1</span> is 0 and the return value is the combination<br>of the other value arguments. If no other arguments are supplied,<br>the return value is <span class="italic">Val1</span>.</p><br><p class="body">This function is similar to using <span class="code">Or</span> as a bitwise operator in Visual Basic.</p><br><h2>Example</h2><br><p class="body">BitOr is used to combine bit patterns and can be used to test more<br>than one bit at the same time. Like the other bit functions, BitOr,<br>is useful when working with properties that store a numeric value<br>in which the bits are used to record true or false values that represent<br>whether various flags have been set. Typically a type definition is<br>used to define the various flags. </p><br><p class="body">This mrScriptBasic example refers to the MDM <span class="italic">ObjectTypeValue</span> property, which is used<br>to record an object&#39s types. The values are defined in the <span class="italic">ObjectTypesConstants</span> type definition. The<br>example uses BitOr in combination with <a href="bitand.htm">BitAnd</a> to test<br>for two bit patterns that correspond to the <span class="italic">mtArray</span> and <span class="italic">mtGrid</span> constants in the <span class="italic">ObjectTypesConstants</span> type definition:</p><br><pre class="codeblock">Dim MyObject<br><br>For Each MyObject In MDM.Fields <br>   If BitAnd(MyObject.ObjectTypeValue, _<br>         BitOr(ObjectTypesConstants.mtArray, ObjectTypesConstants.mtGrid)) Then<br>      &#39 This is an an Array or Grid object ...         <br>   End If<br>Next</pre><br><p class="body">This is equivalent to:</p><br><pre class="codeblock">For Each MyObject In MDM.Fields <br>   If BitAnd(MyObject.ObjectTypeValue, ObjectTypesConstants.mtArray) OR _<br>         BitAnd(MyObject.ObjectTypeValue, ObjectTypesConstants.mtGrid) Then<br>      &#39 This is an an Array or Grid object ...         <br>   End If<br>Next</pre><br><p class="body">BitOr is also useful for making sure that certain bits are set,<br>without affecting the other bits. For example:</p><br><pre class="codeblock">Dim ElemFlags<br><br>ElemFlags = BitOr(MDM.Fields["remember"].Categories["Not_answered"].Flag, _<br>   CategoryFlagConstants.flExclusive)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br><p class="body">Data Model 2.9 or later for combining more than<br>two values.</p><br>',info:'',ex:''}},
{id:'BitXor',group:'func',sub:'',descr:{name:'',descr:'<br><h1>BitXor</h1><br><p class="body">Performs a bitwise XOR (exclusive OR) on two or more numeric values<br>and returns the result.</p><br><pre class="syntaxblock"><span class="code-required">BitXor(</span><span class="parameter">Val1</span> [<span class="code-required">, </span><span class="parameter">Vals</span>, ...]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">All values exclusively OR-ed together.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Vals</span> is a list of variants,<br>which are converted to Long before being used. If one or more of them<br>cannot be converted to a long value, an error occurs.</p><br><p class="body">The return value is a number with only the bits set that are set<br>in an odd number of the input values <span class="italic">Val1</span> and the other value arguments. If the current data value is NULL, <span class="italic">Val1</span> is 0 and the return value is the combination<br>of the other value arguments. If no other arguments are supplied,<br>the return value is <span class="italic">Val1</span>. If<br>only <span class="italic">Val1</span> and one other value<br>are supplied, the bits set in the return value are those bits that<br>are set in  <span class="italic">Val1</span> or in the other<br>value, but not in both.</p><br><p class="body">This function is similar to using Xor as a bitwise operator in<br>Visual Basic.</p><br><h2>Example</h2><br><p class="body">BitXor can be used for reversing certain bits in a bit pattern.<br>Like the other bit functions, BitXor, is useful when working with<br>properties that store a numeric value in which the bits are used to<br>record true or false values that represent whether various flags have<br>been set. Typically a type definition is used to define the various<br>flags. However, be aware that switching bits on and off individually<br>is not generally recommended when using the bit field properties in<br>the IBM® SPSS® Data Collection object models.  </p><br><p class="body">This mrScriptBasic example clears the bit that<br>represents the <span class="italic">vtFilter</span> usage<br>type constant if it is set and sets it if it is not set:</p><br><pre class="codeblock">MyVariable.UsageType = BitXor(MyVariable.UsageType, VariableUsageConstants.vtFilter)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br><p class="body">Data Model 2.9 or later for combining more than<br>two values.</p><br>',info:'',ex:''}},
{id:'BitNot',group:'func',sub:'',descr:{name:'',descr:'<br><h1>BitNot</h1><br><p class="body">Performs a bitwise NOT on a numeric value and returns the result.</p><br><pre class="syntaxblock"><span class="code-required">BitNot(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Ones-complement of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is a number with only the bits set that are not<br>set in <span class="italic">Val</span>. If the current data<br>value is NULL, <span class="italic">Val</span> is 0 and the<br>return value is -1.</p><br><p class="body">This function is similar to using <span class="code">Not</span> as a bitwise operator in Visual Basic.</p><br><h2>Example</h2><br><p class="body">BitNot enables you to refer to all of the bits in a bit pattern<br>apart from one specific bit or group of bits. This is particularly<br>useful when you want to clear certain bits without affecting the other<br>bits. Like the other bit functions, BitNot, is useful when working<br>with properties that store a numeric value in which the bits are used<br>to record true or false values that represent whether various flags<br>have been set. Typically a type definition is used to define the various<br>flags. </p><br><p class="body">For example, the <span class="italic">Element.Flag</span> property in the MDM is used to record whether a category is one<br>or more of various special category types, such as <span class="name">Other Specify</span>, <span class="name">Don&#39t know</span>, or <span class="name">Exclusive</span> (which means that<br>the category is single-choice when it is used in a multiple response<br>question). The values are defined in the <span class="italic">CategoryFlagConstants</span> type definition and because the <span class="italic">Flag</span> is used as a bit field, it can store<br>more than one "value". </p><br><p class="body">This mrScriptBasic example uses BitNot in combination<br>with <a href="bitand.htm">BitAnd</a> to get a category&#39s flags, but without the<br>bit pattern that  corresponds to the <span class="italic">flExclusive</span> flag:</p><br><pre class="codeblock">Dim ElemFlags<br><br>ElemFlags = BitAnd(MDM.Fields["remember"].Categories["Not_answered"].Flag, _<br>   BitNot(CategoryFlagConstants.flExclusive))</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'Execute',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Execute</h1><br><p class="body">Executes one or more specified statements.</p><br><pre class="syntaxblock"><span class="code-required">Execute(</span><span class="parameter">Script</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Script</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Statements to execute. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Always         zero.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Script</span> is parsed (using the<br>first available parser) and executed. This function can be used from<br>scripts only and you will get an error if you attempt to use it in<br>an expression that is executed by the IBM®<br>SPSS® Data Collection Data Model.</p><br><p class="body">The input and output locales and the variables in use in the calling<br>program are passed to this function and used when parsing and executing<br>the script. The state of the calling program is shared with the new<br>program, so that any calls to other functions such as <a href="rot.htm">Rot</a> and <a href="ran.htm">Ran</a> have the same effect as they would if they were called<br>directly by the calling program. </p><br><p class="body">This function is similar to the Execute function in VBScript.</p><br><h2>Example</h2><br><p class="body">In the following mrScriptBasic example, Execute<br>assigns the value returned by the <a href="datenow.htm">DateNow</a> function to the <span class="name">MyDate</span> variable.</p><br><pre class="codeblock">Dim MyDate<br>Execute("MyDate = DateNow()")</pre><br><h2>Requirements</h2><br><p class="body">Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'RGB',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RGB</h1><br><p class="body">Returns a number representing an RGB color value.</p><br><pre class="syntaxblock"><span class="code-required">RGB(</span><span class="parameter">Red</span><span class="code-required">, </span><span class="parameter">Green</span><span class="code-required">, </span><span class="parameter">Blue</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Red</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Red value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Green</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Green value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Blue</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Blue value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Color         value.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is an RGB color value using the given intensities<br>of red, green and blue. If any of the input values is less than 0,<br>it is converted to 0. If any of the input values is greater than 255,<br>it is converted to 255.</p><br><p class="body">This function is similar to the RGB function in Visual Basic.</p><br><h2>Example</h2><br><p class="body">This example shows how the RGB function can be used to return a<br>whole number that represents the RGB value for the color yellow: </p><br><pre class="codeblock">Dim Yellow<br><br>Yellow = RGB(255, 255, 0)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.6 or later</p><br>',info:'',ex:''}},
{id:'Validate',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Validate</h1><br><p class="body">Validates a specified value based on specified minimum and maximum<br>values and optionally a validating expression.</p><br><pre class="syntaxblock"><span class="code-required">Validate(</span><span class="parameter">Val</span> [<span class="code-required">,</span> <span class="parameter">Min</span> [<span class="code-required">,</span> <span class="parameter">Max</span> [<span class="code-required">,</span> <span class="parameter">Expr</span> [<span class="code-required">,</span> <span class="parameter">Describe</span> ] ] ] ]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to test.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The minimum value allowed. The<br>default is           -1.79769313486232e308.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The maximum value allowed. The<br>default is           1.79769313486232e308.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Expr</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Expression for a text,           numeric, or date<br>value. For a numeric or date value, the expression can specify   <br>       one or more valid ranges. For a text value, the expression<br>defines a           regular expression that can be           used to validate the text. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Describe</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to generate a description for a failed test.<br>The default is False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> fits the conditions,<br>False otherwise.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The following table explains the conditions in which Validate returns<br>False. In all other cases, Validate returns True. Note that if <span class="italic">Val</span> is Null or a Boolean or Object value, <span class="italic">Min</span>, <span class="italic">Max</span> and <span class="italic">Expr</span> are ignored, and the<br>return value is  always True.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">When Val is:            </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Validate returns<br>False when:</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span> is<br>supplied and <span class="italic">Val</span> has fewer than <span class="italic">Min</span> characters.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span> is<br>supplied and <span class="italic">Val</span> has more than <span class="italic">Max</span> characters.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Expr</span> is<br>supplied and <span class="italic">Val</span> doesn’t<br>match the regular expression (see below). Note that the          <br>whole text value needs to match the expression in order to pass  <br>        validation.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Numeric (Long or           Double)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span> is<br>supplied and <span class="italic">Val</span> &lt; <span class="italic">Min</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span> is<br>supplied and <span class="italic">Val</span> &gt; <span class="italic">Max</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Expr</span> is<br>supplied and <span class="italic">Val</span> isn’t<br>in any of the defined valid ranges (see           below).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span> is<br>supplied and <span class="italic">Val</span> has fewer than <span class="italic">Min</span> responses.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span> is<br>supplied and <span class="italic">Val</span> has more than <span class="italic">Max</span> responses.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Min</span> is<br>supplied and <span class="italic">Val</span> is earlier than<br>the date whose internal representation is <span class="italic">Min</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Max</span> is<br>supplied and <span class="italic">Val</span> is later than<br>the date whose internal representation is <span class="italic">Max</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Expr</span> is<br>supplied and <span class="italic">Val</span> isn&#39t in any<br>of the defined valid ranges (see           below).</td></tr></tbody></table><p class="body">Since the <span class="italic">Expr</span> argument is<br>a string, it must be enclosed in double quotation marks (double quotation<br>marks in a script or filter in IBM® SPSS® Data Collection<br>Survey Tabulation, single<br>quotation marks in an SQL query). If the expression itself<br>contains quotation marks, they should be duplicated within the string.<br>For example, in a script, the function call <span class="code">Name.Validate(2, 80, "[^""]*") </span>will result in the <span class="italic">Expr</span> argument<br>having the value [^"]*.</p><br><p class="body">If <span class="italic">Describe</span> is True and Validate<br>returns False, it generates an error message describing the failed<br>validation (formatted using the<br>output locale) and stores it on the current thread. This means that any calling code that<br>instantiates the Function Library objects and calls the Validate function<br>directly can immediately inspect the thread&#39s error information if<br>the validation fails. Note that the next call to a function will clear<br>the stored error information, so it must be inspected as soon as possible<br>after the call to Validate. It is not possible to access the error<br>message when Validate is called in SQL or mrScriptBasic.</p><br><p class="body"><br><span class="runinhead">Range expression syntax</span><br></p><br><p class="body">When you use the <span class="italic">Expr</span> parameter<br>to define a range expression to be used to validate a numeric or date<br>value, the expression can contain one or more ranges, separated by<br>commas. The syntax for a range is as follows:</p><br><p class="bullet">• An optional negation operator, which is the caret<br>symbol (^).</p><br><p class="bullet">• An optional lower bound value.</p><br><p class="bullet">• An optional upper bound value.</p><br><p class="bullet">•  If both values are supplied, they must be separated<br>by the range operator, which is two periods with no space in between<br>(..). </p><br><p class="bullet">• The range operator can appear when either or both<br>values are missing.</p><br><p class="bullet">• A range lower or upper bound value is a sequence<br>of characters that can be interpreted as a floating point number (if <span class="italic">Val</span> is Long or Double), or as a date or<br>a floating point number (if <span class="italic">Val</span> is a Date), according to the given input locale. </p><br><p class="bullet">• Any value can optionally be enclosed in single or<br>double quotation marks. This is necessary if the value contains either<br>a comma or a pair of periods, in order that they are not interpreted<br>as separators between ranges or between range values.</p><br><p class="body">The following table provides some examples.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Range Expression</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">﻿5 ..           25</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> must be &gt;= 5 and<br>&lt;= 25.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">^ 5 ..           25</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> must not be &gt;=<br>5 and &lt;= 25 (in other words, it must be &lt;           5 or &gt;<br>25).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">.. 10, 20, 30 .., ^70</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> must be &lt;= 10,<br>or 20, or &gt;= 30, but not           70.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">&#3910,5&#39 .. "11,5", ^ &#3911,0&#39</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">With a           Danish (or similar) input locale, <span class="italic">Val</span> must be &gt;= 10.5 and &lt;= 11.5, but<br>not           11.0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">&#39Jan           1, 1960&#39 .. 1980-12-31 23:59:59</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> must be (a date) later<br>than or equal to 00:00:00 on January 1st           1960 and before<br>or equal to 23:59:59 on December 31st           1980.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">..</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any value is           allowed.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">^                                     </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">No           value is allowed.</td></tr></tbody></table><p class="body"><br><span class="runinhead">Regular expression syntax</span><br></p><br><p class="body">Regular expressions are a concise and flexible notation that can<br>be used for defining and validating patterns of text. The Function<br>Library  uses the Boost technology for regular expressions. For further<br>information about the syntax, see <a target="N3A6C1" href="http://www.boost.org/libs/regex/doc/syntax.html">http://www.boost.org/libs/regex/doc/syntax.html</a>. For a deeper understanding of regular expressions, see <span class="italic">Mastering Regular Expressions, 2nd Edition</span> by Jeffrey E. F. Friedl, published by O&#39Reilly (see <a target="N3A6C8" href="http://www.oreilly.com/catalog/regex2/">http://www.oreilly.com/catalog/regex2/</a>).</p><br><p class="body">When a regular expression contains characters, it usually means<br>that the text being searched must match those characters. However,<br>regular expressions use a number of characters that have a special<br>meaning. The following table provides a summary of the most common<br>special characters used in regular expressions. (The special characters<br>are shown in bold and are case sensitive--for example, <span class="code">\U</span> is not the same as <span class="code">\\u</span>.) Note that the whole text value needs to match the<br>expression in order to pass validation.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Regular Expression</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">﻿<span class="input">.</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any character (including           newline).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">[</span>abcn<span class="input">-</span>z<span class="input">]</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any of the characters a, b, c, n, o, p, ...,           z.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\w</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any alphanumeric character (including accents) or         <br> underscore (_).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\l</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any lower-case character (including           accents).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\\u</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any upper-case character (including           accents).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\d</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Any numeric character.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\s</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A whitespace character.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">xxx<span class="input">|</span>yyy</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Either xxx or yyy.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">(</span>xxx<span class="input">)</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grouping (subexpression).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">x<span class="input">*</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Zero or more occurrences of           x.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">x<span class="input">+</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">One or more occurrences of           x.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">x<span class="input">?</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Zero or one occurrences of           x.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">(</span>xxx<span class="input">){</span><span class="italic">m</span><span class="input">}</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Exactly <span class="italic">m</span> occurrences<br>of xxx.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">(</span>xxx<span class="input">){</span><span class="italic">m</span><span class="input">,</span><span class="italic">n</span><span class="input">}</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">At least <span class="italic">m</span> and at most <span class="italic">n</span> occurrences of xxx.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="input">\</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The escape character that you use to match           characters<br>that have a special meaning in regular expressions, such as the  <br>        following characters , . ? { } [ ] ( ) $ ^ *. For example,<br>to match the {           character, you would specify \{.</td></tr></tbody></table><h2>Examples</h2><br><p class="body"><br><span class="runinhead">1. Validating a numeric variable</span><br></p><br><p class="body">The following SQL example provides a simple example of using the<br>Validate function to test whether the value in a numeric variable<br>is within a given range. In this example, the range has been specified<br>using the <span class="italic">Min</span> and <span class="italic">Max</span> parameters.</p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    Visits,<br>    Validate(Visits, 5, 10) AS Valid<br>FROM vdata<br>WHERE Visits IS NOT NULL</pre><br><p class="body">Here are the results for the first five respondents in the result<br>set:</p><br><pre class="codeblock">Respondent.Serial  Visits   Valid<br>-----------------  ------   ------<br>1                  1        False<br>4                  6        True<br>5                  2        False<br>6                  1        False<br>7                  1        False</pre><br><p class="body">We could achieve exactly the same results by specifying a range<br>expression in the <span class="italic">Expr</span> parameter<br>instead of using the <span class="italic">Min</span> and <span class="italic">Max</span> parameters:</p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    Visits,<br>    Visits.Validate(, , &#395..10&#39) AS Valid <br>FROM vdata<br>WHERE Visits IS NOT NULL</pre><br><p class="body">Notice that this time instead of passing the name of the variable<br>(<span class="name">Visits</span>) as a parameter, we have<br>preceded the function call with the variable&#39s name and omitted the<br>variable parameter. This is an alternative way of calling the function. </p><br><p class="body">Using the <span class="italic">Expr</span> parameter enables<br>you to specify quite complex requirements. When you are filtering<br>data, using the Validate function and a range expression can be easier<br>than defining the filter using a complex expression. For example,<br>in the following example, Validate has been used in the WHERE clause<br>to select respondents for whom the <span class="name">Visits</span> variable has a value from 5 to 10, with the exception of 7, or a<br>value of 50 or more.</p><br><pre class="codeblock">SELECT Respondent.Serial, Visits<br>FROM vdata <br>WHERE Visits IS NOT NULL<br>    AND Validate(Visits, , , &#395..10, ^7, 50..&#39)</pre><br><p class="body">Note that IS NOT NULL has been used to exclude respondents for<br>whom the <span class="name">Visits</span> variable stores<br>Null. If we remove this from the WHERE clause, all the respondents<br>for whom the <span class="name">Visits</span> variable stores<br>Null will be included, because Validate always returns True when the<br>value is Null.</p><br><p class="body"><br><span class="runinhead">2. Validating a text variable</span><br></p><br><p class="body">You can use the Validate function to check whether a text response<br>meets certain requirements. For example, you can check that it has<br>a specified number of characters, is all uppercase, is a valid product<br>or postal code, etc. The following example, uses Validate to test<br>whether an input text is a valid email address. (It doesn&#39t check<br>that the email address actually exists, it just checks that the text<br>is a valid combination of characters--in this case, any combination<br>of alphanumeric, hyphen, and period characters followed by the at<br>sign (@), followed by any combination of alphanumeric, hyphen, and<br>period characters.) </p><br><pre class="codeblock">Dim Valid<br>Valid = Validate("John-Smith@SPSS.com", , , "[-.\w]+\@[-.\w]+")</pre><br><p class="body">The next example tests that a product code is made up of two uppercase<br>letters followed by a hyphen (-) followed by eight numbers.</p><br><pre class="codeblock">Dim Valid<br>Valid = Validate("ID-86442000", , , "\u{2}-\d{8}")</pre><br><p class="body">The next example is an SQL query that can be run on the Museum<br>sample data. This query uses Validate to check that the texts stored<br>in the <span class="name">Name</span> variable are between<br>one and 45 characters long and are composed of one or more words separated<br>by single spaces, with no punctuation. </p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    Name,<br>    Name.Validate(1, 45, &#39\w+(\s\w+)+&#39) <br>FROM vdata</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.5 or later for using<br>the optional Describe argument</p><br><p class="body">Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'InputBox',group:'func',sub:'',descr:{name:'',descr:'<br><h1>InputBox</h1><br><p class="body">Displays a dialog containing a specified message, a text box for<br>input, an OK button, and a Cancel button.</p><br><pre class="syntaxblock"><span class="code-required">InputBox(</span><span class="parameter">Prompt</span>[<span class="code-required">, </span><span class="parameter">Default</span>[<span class="code-required">, </span><span class="parameter">Title</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Prompt</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Message to display in the dialog box. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Default</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Initial contents of the dialog box. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Title</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Text to display in the title bar. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Final contents of the text box, or an empty string.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The user may change the contents of the text box. If the user clicks<br>OK or presses the Enter key, the current contents of the text box<br>are returned. If the user clicks Cancel or presses the Escape key,<br>the return value is "". If <span class="italic">Default</span> is omitted, the text box is initially empty. If <span class="italic">Title</span> is omitted or is "", the dialog&#39s<br>title will be "IBM® SPSS® Data Collection".</p><br><p class="body">The dialog&#39s height is adjusted (up to the height of the screen)<br>to include as much as  possible of the <span class="italic">Prompt</span> text. All text entered in the text box is returned. This is different<br>from the Visual Basic InputBox, which displays only 1023  characters<br>of the prompt, allows only 1023 characters of input, and returns only<br>254 of  the input characters.</p><br><p class="body">The dialog is modal, meaning that the InputBox function does not<br>return until the user closes it, for example, by clicking OK or Cancel.<br>However, if the dialog is being called from a Windows application,<br>the application is not suspended while the dialog is open.</p><br><h2>Examples</h2><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'IsSet',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsSet</h1><br><p class="body">Returns True if an integer value matches a specified mask.</p><br><pre class="syntaxblock"><span class="code-required">IsSet(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Mask</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Data value to test. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Mask</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Pattern of bits to check. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Whether all the bits set in <span class="italic">Mask</span> are set in <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Mask</span> is zero (no bits set),<br>the return value is True. If the current data value is NULL, <span class="italic">Val</span> is 0 and the return value is False.</p><br><p class="body">This function is equivalent to the expression:</p><br><pre class="codeblock">BitAnd(Val, Mask) = Mask<br></pre><br><h2>Example</h2><br><p class="body">The following example selects only records where Respondent.Serial<br>is an odd number.</p><br><pre class="codeblock">SELECT * FROM vdata<br>WHERE Respondent.Serial.IsSet(1)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'IsElementInVersions',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsElementInVersions</h1><br><p class="body">Tests whether an element or list exists in all specified versions<br>of a variable.</p><br><pre class="syntaxblock"><br><span class="code-required">IsElementInVersions(</span><span class="parameter">Val</span><span class="code-required">,</span> <span class="parameter">Elem</span><span class="code-required">,</span> <span class="parameter">Versions</span><span class="code-required">)</span><br><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value, used only to specify which MDM object to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Elem</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text or Categorical value specifying an element or Elements<br>list in  <span class="italic">Val</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Versions</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Names of versions to check.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">(return)</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Whether the element/list exists in all specified versions of<br> <span class="italic">Val</span>.</td></tr></tbody></table><p class="body"><br><span class="italic">Val</span> may refer to any type<br>of MDM object that has elements,  for example, Field, Array, Grid<br>or VariableInstance, or it may be an Elements list itself.</p><br><p class="body">If <span class="italic">Elem</span> is of type Text, it<br>is assumed to be the full name  or numeric value of either a single<br>Element or an Elements list. If <span class="italic">Elem</span> is of type Long, it is assumed to be the numeric value of an Element<br>or Elements list. If  <span class="italic">Elem</span> is<br>of type Categorical, its first value is used to  specify the Element<br>or Elements list. If <span class="italic">Elem</span> is<br>empty or NULL,  the return value is False. If <span class="italic">Elem</span> is of any other type, an  error occurs. If <span class="italic">Elem</span> specifies a value that does not correspond<br> to an Element or Elements list in the MDM document, the return value<br>is False.</p><br><p class="body"><br><span class="italic">Versions</span> is a version expression<br>as used in the Open method  of an MDM Document. If <span class="italic">Versions</span> is omitted or blank, all versions<br> of <span class="italic">Val</span> that are currently selected<br>in the MDM document are used.</p><br>',info:'',ex:''}},
{id:'GetInterface',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetInterface</h1><br><p class="body">Returns an alternate interface for an object.</p><br><pre class="syntaxblock"><span class="code-required">GetInterface(</span><span class="parameter">Object</span>, <span class="parameter">InterfaceID</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Object</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The object to query for the alternate interface.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">InterfaceID</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">String</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The identifier of the interface as a string. This is a string<br>representation of the Interface ID in the form {xxxxxx-...-xxxx}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The alternate interface for the object.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error is returned if the object does not support the requested<br>interface.</p><br><p class="body">The results may be unpredictable if the alternate interface does<br>not derive from IDispatch.</p><br>',info:'',ex:''}},
{id:'Sleep',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Sleep</h1><br><p class="body">Suspends the thread in which it is called.</p><br><pre class="syntaxblock"><span class="code-required">Sleep(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Number of milliseconds to suspend the thread for.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function suspends the thread in which the function is called<br>for at least the time specified by <span class="italic">Val</span>. If there are other threads in the process, they will continue to<br>execute. After <span class="italic">Val</span> milliseconds<br>have elapsed, the next time the system is ready to resume the thread<br>that was suspended, it will continue execution and this function will<br>return.</p><br><p class="body">The return value is not useful.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example suspends<br>the thread for at least two seconds:</p><br><pre class="codeblock">Sleep(2000)</pre><br>',info:'',ex:''}},
{id:'EngineVersion',group:'func',sub:'',descr:{name:'',descr:'<br><h1>EngineVersion</h1><br><p class="body">Returns part or all of the engine&#39s version number.</p><br><pre class="syntaxblock"><span class="code-required">EngineVersion(</span>[<span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Number</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Which parts of the version number to return, according<br>to the list of options below. Treated as 0 if omitted or not a valid<br>option.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Number</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. If True, a number is returned. If <span class="italic">Number</span> is omitted or False, a string is<br>returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Part or all of the engine&#39s version number.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The possible values for <span class="italic">Val</span> are:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The whole version number as a string in the form "major.minor.revision.build".</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Major version number.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Minor version number.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Revision number.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Build number.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Major and Minor version numbers as a string in the form<br>"major.minor".</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Major, Minor and Revision numbers as a string in the form<br>"major.minor.revision".</td></tr></tbody></table><p class="body">If <span class="italic">Number</span> is True, a number<br>is returned only when <span class="italic">Val</span> is<br>set to 1, 2, 3 or 4. In all other cases, a string is returned. If<br>the current data value is NULL, <span class="italic">Val</span> is 0.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example sets a variable<br>to the Major and Minor version numbers of the mrScriptBasic engine:</p><br><pre class="codeblock">Dim MyVariable<br><br>MyVariable = EngineVersion(5)    &#39 Returns 1.4 (for example)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.0 or later</p><br>',info:'',ex:''}},
{id:'DBNull',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DBNull</h1><br><p class="body">Returns a NULL data value for use with ADO.</p><br><pre class="syntaxblock"><span class="code-required">DBNull()</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant of type VT_NULL, containing a NULL data value.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">ADO requires nulls to be variants of type VT_NULL. By default, mrScriptBasic uses type VT_EMPTY when setting nulls, and therefore<br>this function must be used when setting nulls for use with ADO.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example sets a variable<br>to a null value that can be used with ADO:</p><br><pre class="codeblock">Dim MyADOVariable<br><br>MyADOVariable = DBNull()</pre><br>',info:'',ex:''}},
{id:'IsDBNull',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsDBNull</h1><br><p class="body">Returns true if a value is a NULL data value that can be used by<br>ADO.</p><br><pre class="syntaxblock"><span class="code-required">IsDBNull(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to test.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> is a NULL<br>data value that can be used by ADO, False otherwise.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">ADO requires nulls to be variants of type VT_NULL. By default, mrScriptBasic uses type VT_EMPTY when setting nulls, and therefore<br>this function can be used to test if a NULL data value can be used<br>by ADO.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example tests a variable<br>to see if its value is a NULL data value that can be used by ADO:</p><br><pre class="codeblock">If MyVariable.IsDBNull() Then<br>    ...                        &#39 Can be used with ADO<br>End If</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.0 or later</p><br>',info:'',ex:''}},
{id:'IsNullObject',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsNullObject</h1><br><p class="body">Returns true if an variable is NULL, without testing the default<br>property of the object being referenced.</p><br><pre class="syntaxblock"><span class="code-required">IsNullObject(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to test.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val</span> is NULL, False<br>otherwise.</td></tr></tbody></table><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>IsNullObject function to test if a variable is NULL:</p><br><pre class="codeblock">Dim Identifier, Identifiers<br>Set Identifier = CreateObject("mrEvaluate.Identifier")<br>Set Identifiers = CreateObject("mrEvaluate.Identifiers")<br><br>Identifier.Name = "MyID"<br>Identifier.Value = NULL<br>Identifiers.Add(Identifier)<br><br>Set Identifier = Identifiers.FindItem("MyID")<br><br>If Identifier.IsNullObject() Then<br>    Debug.Log("MyID not found")<br>Else<br>    Debug.Log("MyID found")<br>End If</pre><br><p class="body">This script will correctly output the message "MyID found" because<br>the value of <span class="name">Identifier</span> is not<br>NULL. However, if <span class="name">Identifier</span> was<br>tested using the following line instead, the message "MyID not found"<br>would be output: </p><br><pre class="codeblock">If Identifier Is Null Then</pre><br><p class="body">This is because although <span class="name">Identifier</span> is not NULL, the value of its default property (<span class="name">Identifier.Value</span>) is NULL.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.5 or later</p><br>',info:'',ex:''}},
{id:'IsEqualObject',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsEqualObject</h1><br><p class="body">Returns True if two values refer to the same object.</p><br><pre class="syntaxblock"><span class="code-required">IsEqualObject(</span><span class="parameter">Val1</span>, <span class="parameter">Val2</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The first value to test. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val2</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The second value to test. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="italic">Val1</span> and <span class="italic">Val2</span> refer to the same object or are both<br>NULL, otherwise False.</td></tr></tbody></table><h2>Example</h2><br><p class="body">The following mrScriptBasic example tests two<br>variables to see if they refer to the same object:</p><br><pre class="codeblock">If MyVariable1.IsEqualObject(MyVariable2) Then<br>    ...                          &#39 The same object, or both NULL<br>Else<br>    ...                          &#39 Not the same object<br>End If</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.5 or later</p><br>',info:'',ex:''}},
{id:'IsOneOf',group:'func',sub:'',descr:{name:'',descr:'<br><h1>IsOneOf</h1><br><p class="body">Returns true if a value is equal to at least one of the other listed<br>values.</p><br><pre class="syntaxblock"><span class="code-required">IsOneOf(</span><span class="parameter">Val1</span> [, <span class="parameter">Vals, ...</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to test. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if <span class="name">Val1</span> is equal to<br>one or more of <span class="name">Vals</span>, otherwise<br>False.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="name">Val1</span> is NULL and at least<br>one of <span class="name">Vals</span> is NULL, the return<br>value is True. If <span class="name">Vals</span> is not supplied,<br>the return value is False.</p><br><p class="body">In SQL statements, the IsOneOf function can be used in place of<br>the IN operator, which is not supported by the IBM®<br>SPSS® Data Collection Data Model.</p><br><h2>Example</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function Call</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val1</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Vals</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IsOneOf(Val1, Vals)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7}, {3}, {4}, {8}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IsOneOf(Val1, Vals)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"song"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Cuckoo", "song", "is", "summer", "song"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val1.IsOneOf(Vals)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">17.9</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">17, 17.4, 17.98</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">False</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Val1.IsOneOf(Vals)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL, 0, 1, -1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True</td></tr></tbody></table><p class="body"></p><br><p class="body">The following example shows the use of the IsOneOf function in<br>an SQL query, which will be executed against the Short Drinks sample<br>data set provided with the IBM® SPSS®<br>Data Collection Developer Library:</p><br><pre class="codeblock">SELECT respondent.serial AS &#39Serial&#39, gender, occup<br>FROM vdata<br>WHERE occup.IsOneOf(&#39sailor&#39, &#39doctor&#39, &#39soldier&#39, &#39postman&#39)</pre><br><p class="body">Here is the result set:</p><br><pre class="codeblock">Serial gender   occup<br>====== ======== =======<br>100    {male}   postman<br>115    {female} doctor</pre><br><h2>Requirements</h2><br><p class="body">Data Model 4.0 or later</p><br>',info:'',ex:''}},
{id:'Categorize',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Categorize</h1><br><p class="body">Converts the value of a Numeric, Text, or Date value to a Categorical<br>value according to the definition of the specified categorical variable.</p><br><pre class="syntaxblock"><span class="code-required">Categorize(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">CategorizedVariable</span><span class="code-required">)</span><br></pre><br><p class="body"><br><span class="italic">Note</span>: The categories must<br>be created before the Categorize function can be used. The function<br>does not create categories.</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Long, Double, Text, or Date </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">CategorizedVariable</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the categorical variable, which will be used to<br>ensure the generated category name exists.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The converted categorical value related to <span class="name">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The conversion is based on the definition of the categorical variable<br>named in the <span class="name">CategorizedVariable</span> parameter. The conversion process starts by generating an MDM name<br>from the value <span class="name">Val</span>. The <span class="name">MDMName</span> function is used for this process.<br>When a generated category name does not exist in the specified categorical<br>variable, the ‘Other’ category is returned (if it exists),<br>otherwise the empty <span class="code">categorical,{}</span>, is returned.</p><br><p class="body">If  the value is Null or an empty string, ‘NA’ is<br>returned (if it exists) on the specified variable, otherwise NULL<br>is returned.</p><br><h2>Example</h2><br><pre class="codeblock">_Queue "Sample queue"<br>    categorical [1..1]<br>     {<br>        FRESH "Fresh",<br>        ACTIVE "Active",<br>        TIMEDOUT "Timed Out",<br>        NA "No Answer" na,<br>        other "Other" other<br>    };<br></pre><br><p class="body">The following result is returned:</p><br><pre class="codeblock">Result = Categorize(Val, "_Queue")</pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="46%"><br><col width="54%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Result</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Active"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ACTIVE}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">" "</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{NA}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"NoAnswer"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{other}</td></tr></tbody></table>',info:'',ex:''}},
{id:'EvaluateDerivedIteration',group:'func',sub:'',descr:{name:'',descr:'<br><h1>EvaluateDerivedIteration</h1><br><p class=""body"">Used by the derived grid feature to look up the value for the variable<br>at the parent level with the same name as the supplied <span class=""name"">LevelID</span> variable. The function takes the name<br>of the <span class=""name"">LevelID</span> and returns the<br>value of that variable down-levelled into the grid level.</p><br><pre class=""syntaxblock""><span class=""code-required"">""EvaluateDerivedIteration(LevelID)</span><br></pre><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col><col></colgroup><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Parameter</span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Type </span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Remarks </span></td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""italic"">LevelID</span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Text</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The variable that identifies the current iteration in the grid.<br> This is typically the <span class=""name"">LevelID</span> variable.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">(return)</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The value of variable at the parent level that has the same<br>name as the current iteration.</td></tr></tbody></table><h2>Remarks</h2><br><p class=""body"">The <span class=""name"">EvaluateDerivedIteration</span> function is used to obtain the value of the variable at the parent<br>level that has the same name as the current iteration. The function<br>is used when creating derived grids, where each iteration of the grid<br>is a parent level variable.</p><br><p class=""body"">The function can be useful in the following situations:</p><br><p class=""bullet"">• You want to create grids from flat data, and you<br>do not want end users to create these grids on their own.</p><br><p class=""bullet"">• You are scripting tables and want grids, but do not<br>want to set them up in the user interface.</p><br><p class=""body"">When setting up derived grids, keep the following tips in mind:</p><br><p class=""bullet"">• The nested variable should have a source type of <span class=""name"">sExpression</span>.</p><br><p class=""bullet"">• The category list of the nested variable should contain<br>the union of the categories referenced by the parent level variables,<br>and the <span class=""name"">noDeriveElements</span> property<br>should be set up.</p><br><p class=""bullet"">• The grid categories (iterators) must match the actual<br>""next level up"" question names. This ensures that the <span class=""name"">LevelID</span> can be matched to a question name.</p><br><p class=""bullet"">• The <span class=""name"">mlExpand</span> property<br>must be set. You cannot use this function on an unbounded level; the<br>iterator must be categorical.</p><br><h2>Examples</h2><br><p class=""body"">The following example creates a new derived grid variable that<br>is based on three top level variables:</p><br><pre class=""codeblock"">NEWGRID """" loop {<br>	Rating_BrandA ""BrandA"",<br>	Rating_BrandB ""BrandB"",<br>	Rating_BrandC ""BrandC<br>} fields<br>(<br>	Rating ""how do you rate this brand?"" categorical [1]<br>	{ use \\ratingList -  } expression (""EvaluateDerivedIteration(LevelID)"");<br>) expand grid;</pre><br><p class=""bullet"">• The category names (category ID&#39s) for the grid iterator<br>match the question names of the top level questions they look up.</p><br><p class=""bullet"">• The expression <span class=""italic"">EvaluateDerivedIteration(LevelID)</span> is added to the Rating question inside the grid.</p><br><h2>Requirements</h2><br><p class=""body"">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Decode',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Decode</h1><br><p class=""body"">Provides the same functionality as an <span class=""code"">IF-THEN-ELSE</span> statement (used for <span class=""code"">OnNextCase</span> events).</p><br><pre class=""syntaxblock""><span class=""code-required"">Decode(</span>Expression, search, result, [search,result]...[,default]<span class=""code-required"">)</span><br></pre><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col><col></colgroup><thead><tr><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Parameter </th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Type</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Remarks</th></tr></thead><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Expression </td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The value to compare.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Search</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The value that is compared against Expression.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Result</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The returned value if Expression is equal to <span class=""name"">Search</span>.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">defaultValue</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Optional. If no matches are found, it returns the default.<br>If the default is omitted, then the decode statement returns null.</td></tr></tbody></table><p class=""body""><br><span class=""italic"">Note</span>: There are variable pairs<br>for <span class=""name"">Search</span> and <span class=""name"">Result</span>.</p><br><h2>Remarks</h2><br><p class=""body"">The function searches <span class=""name"">Expression</span> and returns the related <span class=""name"">Result</span> if <span class=""name"">Search</span> is found. Otherwise,<br>the function returns <span class=""name"">defaultvalue</span>. If <span class=""name"">defaultvalue</span> is not set,<br>the function returns <span class=""code"">null</span>.</p><br><p class=""body"">There are restrictions when using this function:</p><br><p class=""bullet"">• <span class=""name"">Expression</span> can<br>include the following types: Long, Double, Text, Date, Categorical,<br>Boolean.</p><br><p class=""bullet"">• <span class=""name"">Expression</span> and <span class=""name"">Search</span> should be the same data type; the function<br>will issue an error if they are different.</p><br><h2>Example</h2><br><pre class=""codeblock"">Decode(Expression, ""USA"", ""America"", <br>		    ""UK"", ""UnitedKindom"", <br>		    ""OtherCountries"")</pre><br><p class=""body"">The following table shows the <span class=""name"">Expression</span> and retrieved result values:</p><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col></colgroup><thead><tr><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Expression</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Result by Decode()</th></tr></thead><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“USA”</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“America”</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“UK”</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“UnitedKindom”</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“German”</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“OtherCountries”</td></tr></tbody></table><pre class=""codeblock"">Decode(Expression, 1, ""Red"", <br>		    2, ""Yellow"")</pre><br><p class=""body"">The following table shows the <span class=""name"">Expression</span> and retrieved result values:</p><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col></colgroup><thead><tr><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Expression</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Result by Decode()</th></tr></thead><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">1</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“Red”</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">2</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">“Yellow”</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">3</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">null</td></tr></tbody></table>',info:'',ex:''}},
{id:'SampleCategorize',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SampleCategorize</h1><br><p class="body">A simple version of the <a href="Tabug_categorize.htm">Categorize</a> function that<br>is used with the Sample Reporting MDSC (Phone Reports). </p><br><pre class="syntaxblock"><span class="code-required">SampleCategorize(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">CategorizedVariable</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Long, Double, Text, or Date </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">CategorizedVariable</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the categorical variable, which will be used to<br>ensure the generated category name exists.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If the generated category name exists in the metadata, the<br>category is returned, otherwise NULL is returned.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">Similar to <a href="Tabug_categorize.htm">Categorize</a>, the conversion process starts by generating<br>an MDM name from the value <span class="code">Val</span>.<br>The <span class="name">MDMName</span> function is used for<br>this process. If the generated category name exists in the metadata,<br>the category is returned, otherwise NULL is returned.</p><br><p class="body">Unlike Categorize, SampleCategorize does not return <span class="code">NA</span> or <span class="code">Other</span> based on a variable definition.</p><br><h2>Example</h2><br><pre class="codeblock">_Queue "Sampe queue"<br>    categorical [1..1]<br>     {<br>        FRESH "Fresh",<br>        ACTIVE "Active",<br>        TIMEDOUT "Timed Out",<br>        NA "No Answer" na,<br>        other "Other" other<br>    };<br></pre><br><p class="body">The following result is returned:</p><br><pre class="codeblock">Result = SampleCategorize(Val, "_Queue")</pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="46%"><br><col width="54%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Val</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Result</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Active"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ACTIVE}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">" "</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"NoAnswer"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td></tr></tbody></table>',info:'',ex:''}},
{id:'CategorizeLoopVariable',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CategorizeLoopVariable</h1><br><p class="body">Converts the value of a Numeric, Text, or Date value to a Categorical<br>value according to the definition of the specified categorical loop<br>variable.</p><br><pre class="syntaxblock"><span class="code-required">CategorizeLoopVariable(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">CategorizedVariable</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variant value of type Long, Double, Text, or Date </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">CategorizedVariable</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the categorical loop variable, which will be used<br>to ensure the generated category name exists and to check if <span class="definedword">Other</span> and <span class="definedword">NA</span> should be used.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The converted categorical value related to <span class="name">Val</span>. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The function looks up in the parent level of the current level<br>for the <span class="name">CategorizedVariable</span> and<br>checks to see if the parent supports <span class="name">IArray</span> or the parent is the document level. If no parent level exists for<br>the given <span class="name">CategorizedVariable</span>,<br>an error is returned. </p><br><p class="body">The conversion is based on the definition of the categorical loop<br>variable named in the <span class="name">CategorizedVariable</span> parameter. The conversion process starts by generating an MDM name<br>from the value <span class="name">Val</span>. The <span class="name">MDMName</span> function is used for this process.</p><br><p class="bullet">• When a generated category name does not exist in<br>the specified categorical loop variable, the ‘Other’<br>category is returned (if it exists), otherwise the empty categorical, <span class="code">{}</span>, is returned.</p><br><p class="bullet">• If the value is an empty string and ‘NA’<br>is not defined, an empty categorical, <span class="code">{}</span>, is returned.</p><br><p class="bullet">• If the value is Null and ‘NA’ is not<br>defined, NULL is returned.</p><br><h2>Example</h2><br><pre class="codeblock">Model "Model"<br>loop [1..3] fields -<br>(<br>    DBID "DBID"<br>    text [1..20]<br>    {<br>        Audi1 "Audi1" factor("Audi1"),<br>        BMW1 "BMW1" factor("BMW1"),<br>        Ferrari1 "Ferrari1" factor("Ferrari1")<br>    };<br><br>) column expand;<br></pre><br><p class="body">The following is the metadata script for the derived variable in<br>the <span class="code">“Model”</span> helper<br>fields:</p><br><pre class="codeblock">DBCodes "q1 label"<br>categorical<br>{<br>    BMW1 "BMW1"<br>        [<br>            Value = 6<br>        ]<br>    fix keycode("Ctrl+1") factor("BMW1"),<br>    other("Other" "Other"<br>        [<br>            IsUserDefined = true,<br>            IsForeverHidden = true<br>        ]<br>    text ) keycode("Ctrl+2")<br>} expression("SUM(Model.(CategorizeLoopVariable(DBID,""Model.DBCodes"")))", NoDeriveElements) usagetype("HelperField");<br></pre><br><p class="body">The following result is returned:</p><br><pre class="codeblock">Result = CategorizeLoopVariable(DBID, "Model.DBCodes")</pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="29.581993569131832%"><br><col width="36.01286173633441%"><br><col width="34.40514469453376%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">DBID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Result (NA if defined)</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Result (NA is not defined)</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"BMW1"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{BMW1}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{BMW1}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"Audi1"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{other}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{other}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">" "</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{NA}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{NA}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td></tr></tbody></table>',info:'',ex:''}},
{id:'EvaluateDerivedIteration',group:'func',sub:'',descr:{name:'',descr:'<br><h1>EvaluateDerivedIteration</h1><br><p class=""body"">Used by the derived grid feature to look up the value for the variable<br>at the parent level with the same name as the supplied <span class=""name"">LevelID</span> variable. The function takes the name<br>of the <span class=""name"">LevelID</span> and returns the<br>value of that variable down-levelled into the grid level.</p><br><pre class=""syntaxblock""><span class=""code-required"">""EvaluateDerivedIteration(LevelID)</span><br></pre><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col><col></colgroup><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Parameter</span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Type </span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""runinhead"">Remarks </span></td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left""><span class=""italic"">LevelID</span></td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Text</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The variable that identifies the current iteration in the grid.<br> This is typically the <span class=""name"">LevelID</span> variable.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">(return)</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">None</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The value of variable at the parent level that has the same<br>name as the current iteration.</td></tr></tbody></table><h2>Remarks</h2><br><p class=""body"">The <span class=""name"">EvaluateDerivedIteration</span> function is used to obtain the value of the variable at the parent<br>level that has the same name as the current iteration. The function<br>is used when creating derived grids, where each iteration of the grid<br>is a parent level variable.</p><br><p class=""body"">The function can be useful in the following situations:</p><br><p class=""bullet"">• You want to create grids from flat data, and you<br>do not want end users to create these grids on their own.</p><br><p class=""bullet"">• You are scripting tables and want grids, but do not<br>want to set them up in the user interface.</p><br><p class=""body"">When setting up derived grids, keep the following tips in mind:</p><br><p class=""bullet"">• The nested variable should have a source type of <span class=""name"">sExpression</span>.</p><br><p class=""bullet"">• The category list of the nested variable should contain<br>the union of the categories referenced by the parent level variables,<br>and the <span class=""name"">noDeriveElements</span> property<br>should be set up.</p><br><p class=""bullet"">• The grid categories (iterators) must match the actual<br>""next level up"" question names. This ensures that the <span class=""name"">LevelID</span> can be matched to a question name.</p><br><p class=""bullet"">• The <span class=""name"">mlExpand</span> property<br>must be set. You cannot use this function on an unbounded level; the<br>iterator must be categorical.</p><br><h2>Examples</h2><br><p class=""body"">The following example creates a new derived grid variable that<br>is based on three top level variables:</p><br><pre class=""codeblock"">NEWGRID """" loop {<br>	Rating_BrandA ""BrandA"",<br>	Rating_BrandB ""BrandB"",<br>	Rating_BrandC ""BrandC<br>} fields<br>(<br>	Rating ""how do you rate this brand?"" categorical [1]<br>	{ use \\ratingList -  } expression (""EvaluateDerivedIteration(LevelID)"");<br>) expand grid;</pre><br><p class=""bullet"">• The category names (category ID&#39s) for the grid iterator<br>match the question names of the top level questions they look up.</p><br><p class=""bullet"">• The expression <span class=""italic"">EvaluateDerivedIteration(LevelID)</span> is added to the Rating question inside the grid.</p><br><h2>Requirements</h2><br><p class=""body"">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
// {id:'EvaluateGridSummary',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'JsonSerialize',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'JsonDeSerialize',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'MakeArray',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'HashHMAC',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'Hash',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'GetInputLocatedId',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
// {id:'GetOutputLocatedId',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
{id:'Now',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Now</h1><br><p class="body">Returns the current local date and time in a particular time zone.</p><br><pre class="syntaxblock"><span class="code-required">Now(</span>[<span class="parameter"> Val</span> [<span class="parameter">, IgnoreDaylightSaving</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying local time zone to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The current local date and time in the time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server,<br>or -1 to specify UTC time. If <span class="code">Val</span> is a Text value, it is the name of a time zone defined in the registry<br>on the server, or "UTC" to specify UTC time. If <span class="code">Val</span> is omitted, NULL or empty, the time zone associated<br>with the program in which the function is called is used. By default,<br>the program&#39s time zone is the local time zone of the server, but<br>this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs (thus this function can<br>be used to determine whether a specific value represents a valid time<br>zone).</p><br><h2>Example</h2><br><p class="body">This example returns the current local date and time for the program&#39s<br>time zone:</p><br><pre class="codeblock">Now()</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br><p class="body">Date<br>Model 2.10 or later for the time zone and daylight saving arguments.</p><br>',info:'',ex:''}},
{id:'DateNow',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DateNow</h1><br><p class="body">Returns the current local date in a particular time zone.</p><br><pre class="syntaxblock"><span class="code-required">DateNow(</span>[<span class="parameter"> Val</span> [<span class="parameter">, IgnoreDaylightSaving</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying local time zone to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The current local date in the time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the current local date in the time zone, with<br>the time of day set to 00:00:00. If <span class="code">Val</span> is a Long value, it is the index value of a time zone defined in<br>the registry on the server, or -1 to specify UTC time. If <span class="code">Val</span> is a Text value, it is the name of a time<br>zone defined in the registry on the server, or "UTC" to specify UTC<br>time. If <span class="code">Val</span> is omitted, NULL or<br>empty, the time zone associated with the program in which the function<br>is called is used. By default, the program&#39s time zone is the local<br>time zone of the server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If <span class="code">Val</span> is any other<br>type, an error occurs. If the time zone specified by <span class="code">Val</span> cannot be found in the registry, an error<br>occurs (thus this function can be used to determine whether a specific<br>value represents a valid time zone).</p><br><h2>Example</h2><br><p class="body">This example returns the current local date for the program&#39s time<br>zone:</p><br><pre class="codeblock">DateNow()</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later. </p><br><p class="body">Date Model 2.10 or later for the time zone and daylight saving arguments.</p><br>',info:'',ex:''}},
{id:'TimeNow',group:'func',sub:'',descr:{name:'',descr:'<br><h1>TimeNow</h1><br><p class="body">Returns the current local time in a particular time zone.</p><br><pre class="syntaxblock"><span class="code-required">TimeNow(</span>[<span class="parameter"> Val</span> [<span class="parameter">, IgnoreDaylightSaving</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying local time zone to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The current local time in the time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the current local time in the time zone, with<br>the date set to 30 December 1899. If <span class="code">Val</span> is a Long value, it is the index value of a time zone defined in<br>the registry on the server, or -1 to specify UTC time. If <span class="code">Val</span> is a Text value, it is the name of a time<br>zone defined in the registry on the server, or "UTC" to specify UTC<br>time. If <span class="code">Val</span> is omitted, NULL or<br>empty, the time zone associated with the program in which the function<br>is called is used. By default, the program&#39s time zone is the local<br>time zone of the server, but this can be changed by calling <a href="Tabug_settimezone.htm">SetTimeZone</a>. If <span class="code">Val</span> is any other<br>type, an error occurs. If the time zone specified by <span class="code">Val</span> cannot be found in the registry, an error<br>occurs (thus this function can be used to determine whether a specific<br>value represents a valid time zone).</p><br><h2>Example</h2><br><p class="body">This example returns the current local time for the program&#39s time<br>zone:</p><br><pre class="codeblock">TimeNow()</pre><br>',info:'',ex:''}},
{id:'DatePart',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DatePart</h1><br><p class="body">Returns a specified part of a given date. </p><br><pre class="syntaxblock"><span class="code-required">DatePart(</span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Interval</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date of which you want to         return a part. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Interval</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Defines the part of the date that         is to be returned,<br>as specified in the table below.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The specified part         of the date, as specified in the<br>table below. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The following table shows the valid values for <span class="italic">Interval</span>. </p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value of Interval</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"yyyy"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Year</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"q"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Quarter (1 to         4)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"m"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Month (1 to 12)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"d"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day of month (1 to 31)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"y"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day of year (1 to 366)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"w"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day of week (1 to 7, using the first day         of week setting<br>from the input locale)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"ww"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Week of year (1 to 53, using the first week of year setting<br>from the         input locale)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"h"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Hour (0 to         23)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"n"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Minute (0 to 59)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"s"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Second (0 to 59)</td></tr></tbody></table><p class="body"><br><span class="italic">Val</span> is interpreted according<br>to the input locale. </p><br><p class="body">In some locales, when you use the <span class="runinhead">"ww"</span> option to return the week of the year, the week number for the first<br>days of January may be returned as 53 and for the last days of December<br>it may be returned as 1. For example, if the locale defines the first<br>day of the week as Monday and the first week of the year as the first<br>full week, the week number is returned as 53 for the first few days<br>in a year in which the first Monday falls on January 7.</p><br><h2>Example</h2><br><p class="body">In this example the DatePart function is used to return the year<br>from the current system date (which is in turn returned by the <a href="Tabug_now.htm">Now</a> function). For example, on 20 May 2002, this example would return<br>2002. </p><br><pre class="codeblock">DatePart(Now(), "yyyy")</pre><br><p class="body">For an example of using DatePart in combination with the WeekdayName<br>function to return the name of the day on which an interview was completed,<br>see <a href="Tabug_weekdayname.htm">WeekdayName</a><br></p><br>',info:'',ex:''}},
{id:'Year',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Year</h1><br><p class="body">Returns a whole number representing the year.</p><br><pre class="syntaxblock"><span class="code-required">Year(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the year. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The Year.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("yyyy", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Year function to return the year from the<br>date recorded in the <span class="name">DataCollection.FinishTime<br> </span>. For example, if the date in the variable is 20 May 2002, this example<br>would return 2002.</p><br><pre class="codeblock">Year(DataCollection.FinishTime)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Month',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Month</h1><br><p class="body">Returns a whole number between 1 and 12, inclusive, representing<br>the month of the year.</p><br><pre class="syntaxblock"><span class="code-required">Month(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the month. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The month of the         year (1 to 12).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("m", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Month function to return the month from the<br>current date (which is in turn returned by the <a href="Tabug_now.htm">Now</a> function).<br>For example, on 20 May 2002, this example would return 5. </p><br><pre class="codeblock">Month(Now())</pre><br><p class="body">For an example of using the MonthName function with Month and Now<br>to return the name of the current month, see <a href="Tabug_monthname.htm">MonthName</a>.</p><br>',info:'',ex:''}},
{id:'Day',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Day</h1><br><p class="body">Returns a whole number between 1 and 31, inclusive, representing<br>the day of the month.</p><br><pre class="syntaxblock"><span class="code-required">Day(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the day. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The day of the         month (1 to 31).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("d", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Day function to return the day of the month<br>from the current date (which is in turn returned by the <a href="now.htm">Now</a> function). For example, on 20 May 2002, this example would return<br>20. </p><br><pre class="codeblock">Day(Now())</pre><br><p class="body">The next example uses the Day function to return the day stored<br>in the <span class="name">DataCollection.FinishTime </span>. </p><br><pre class="codeblock">DataCollection.FinishTime.Day()</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Hour',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Hour</h1><br><p class="body">Returns a whole number between 0 and 23, inclusive, representing<br>the hour of the day.</p><br><pre class="syntaxblock"><span class="code-required">Hour(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the hour of the<br>day. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The hour of the day         (0 to 23).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("h", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Hour function to return the hour of the current<br>system date and time, which is returned using the <a href="now.htm">Now</a> function.</p><br><pre class="codeblock">Hour(Now())</pre><br><p class="body">The next example uses the Hour function to return the hour stored<br>in the <span class="name">DataCollection.FinishTime </span>. </p><br><pre class="codeblock">DataCollection.FinishTime.Hour()</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Minute',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Minute</h1><br><p class="body">Returns a whole number between 0 and 59, inclusive, representing<br>the minute of the hour.</p><br><pre class="syntaxblock"><span class="code-required">Minute(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the minute. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The minute of the         hour (0 to 59).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("n", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Minute function to return the minute of the<br>current system time, which is returned using the <a href="timenow.htm">TimeNow</a> function.</p><br><pre class="codeblock">Minute(TimeNow())</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.5 or later</p><br>',info:'',ex:''}},
{id:'Second',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Second</h1><br><p class="body">Returns a whole number between 0 and 59, inclusive, representing<br>the second of the minute.</p><br><pre class="syntaxblock"><span class="code-required">Second(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date for which you want to         return the second. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The second of the         minute (0 to 59).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This is equivalent to <span class="code">DatePart("s", Val)</span>.</p><br><h2>Example</h2><br><p class="body">This example uses the Second function to return the second of the<br>current system time, which is returned using the <a href="Tabug_timenow.htm">TimeNow</a> function.</p><br><pre class="codeblock">Second(TimeNow())</pre><br>',info:'',ex:''}},
{id:'MonthName',group:'func',sub:'',descr:{name:'',descr:'<br><h1>MonthName</h1><br><p class="body">Returns a string indicating the specified month. </p><br><pre class="syntaxblock"><span class="code-required">MonthName(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Abbreviate</span> [<span class="code-required">,</span> <span class="parameter">Locale</span> ] ]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An integer between 1 and 13 representing the month, or a date.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Abbreviate</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether a short form of the month name is       <br> to be used. The default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Locale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The output locale to use for regional variations<br>in month names. If Locale is omitted or negative, or does not match<br>a known Locale ID (LCID), the current output locale is used.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the         month, as specified for the output<br>locale.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For locales that do not have a 13th month (which is most locales),<br>the return value is a zero-length string when <span class="italic">Val</span> is 13.</p><br><p class="body">If <span class="italic">Locale</span> is specified, it<br>is not used for error messages.</p><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is a zero-length string. Otherwise, an error occurs if <span class="italic">Val</span> is not in the range 1 to 13 or is not<br>a valid date.</p><br><h2>Examples</h2><br><p class="body">This example returns the full name of the 12th month. In an English-speaking<br>locale, this would typically be "December".</p><br><pre class="codeblock">MonthName(12)</pre><br><p class="body">To return the abbreviated name of the 12th month, set <span class="italic">Abbreviate</span> to True. In an English-speaking<br>locale, this would typically return "Dec".</p><br><pre class="codeblock">MonthName(12, True)</pre><br><p class="body">To return the month name for a specific locale, set <span class="italic">Locale</span> to a Locale ID (LCID) number. In<br>the following example, the Chinese (Traditional) name for the 6th<br>month is returned.</p><br><pre class="codeblock">MonthName(6, , 1028)</pre><br><p class="body">The next example uses the MonthName and <a href="now.htm">Now</a> functions<br>to return the name of the current month:  </p><br><pre class="codeblock">MonthName(Now())</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.5 or later for operating on<br>a date and for using the optional locale argument</p><br><p class="body">Data Model 2.5 or later for operating on a number only</p><br>',info:'',ex:''}},
{id:'WeekdayName',group:'func',sub:'',descr:{name:'',descr:'<br><h1>WeekdayName</h1><br><p class="body">Returns a string indicating the specified day of the week. </p><br><pre class="syntaxblock"><span class="code-required">WeekdayName(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Abbreviate</span> [<span class="code-required">,</span> <span class="parameter">Locale</span> ] ]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A integer between 1 and 7 representing the day of the week,<br>or a date. The input locale defines which         days are considered<br>the first and last days of the week.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Abbreviate</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether a short form of the day name is         to<br>be used. The default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Locale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The output locale to use for regional variations<br>in day names. If Locale is omitted or negative, or does not match<br>a known Locale ID (LCID), the current output locale is used.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the         day, as specified for the output locale.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Locale</span> is specified, it<br>is not used for error messages.</p><br><p class="body">If <span class="italic">Val</span> is NULL, the return<br>value is a zero-length string. Otherwise, an error occurs if <span class="italic">Val</span> is not in the range 1 to 7 or is not<br>a valid date.</p><br><h2>Examples</h2><br><p class="body">This example uses the WeekdayName function to return the full name<br>of the third day of the week. If the first day of the week is defined<br>as Sunday, this example would return "Tuesday".</p><br><pre class="codeblock">WeekdayName(3)</pre><br><p class="body">To return the abbreviated weekday name, set <span class="italic">Abbreviate</span> to True. If the first day of the week is defined<br>as Sunday, this example would return "Tue".</p><br><pre class="codeblock">WeekdayName(3, True)</pre><br><p class="body">To return the day name for a specific locale, set <span class="italic">Locale</span> to a Locale ID (LCID) number. In<br>the following example, the Arabic name for the 4th day is returned.</p><br><pre class="codeblock">WeekdayName(4, , 1025)</pre><br><p class="body">The following example SQL query uses the WeekdayName function to<br>return the name of the day on which interviews were completed: </p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    DataCollection.FinishTime, <br>    WeekdayName(DataCollection.FinishTime) AS Day <br>FROM vdata <br>WHERE DataCollection.Status = {Completed}</pre><br><p class="body">Here are the results for the first five respondents:</p><br><pre class="codeblock">Respondent.Serial  DataCollection.FinishTime  Day<br>-----------------  -------------------------  -----------<br>6                  16/10/2002 13:57:03        Wednesday<br>7                  16/10/2002 18:23:12        Wednesday<br>8                  16/10/2002 22:23:47        Wednesday<br>9                  17/10/2002 02:24:05        Thursday<br>10                 17/10/2002 06:24:00        Thursday</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.5 or later for operating on<br>a date and for using the optional locale argument</p><br><p class="body">Data Model 2.5 or later for operating on a number only</p><br>',info:'',ex:''}},
{id:'DateAdd',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DateAdd</h1><br><p class="body">Returns a date to which a specified time interval (year, quarter,<br>month, day, week, hour, minute, or second) has been added. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">DateAdd(</span><span class="code-required"></span><span class="parameter">Val</span><span class="code-required">, </span><span class="parameter">Interval</span><span class="code-required">, </span><span class="parameter">Count</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date and/or time to which you         want to add the interval(s).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Interval</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The type of interval to be added,         as specified in the<br>table below.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Specifies the number of intervals         to add. Can be negative<br>to give an earlier date.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> + (<span class="italic">Count</span> * <span class="italic">Interval</span>)</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The following table shows the valid values for <span class="italic">Interval</span>. </p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value of Interval</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"yyyy"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Year</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"q"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Quarter</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"m"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Month</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"d"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"y"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"w"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"ww"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Week</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"h"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Hour</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"n"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Minute</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"s"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Second</td></tr></tbody></table><p class="body">When you add or subtract intervals of years, quarters, or months,<br>when necessary the day is adjusted to fit the expected month. For<br>example, when you add one month to 29 January 2003, the result is<br>28 February 2003.</p><br><h2>Example</h2><br><p class="body">This example uses the DateAdd function to return the date and time<br>three months from the date recorded in the <span class="name">DataCollection.FinishTime </span><a href="Tabug_system_variables.htm">system<br>variable</a>. For example, if the date<br>and time in the variable is 20 May 2002 2:15:43 P.M., this example<br>would return 20 August 2002 2:15:43 P.M.</p><br><pre class="codeblock">DateAdd(DataCollection.FinishTime, "m", 3)</pre><br>',info:'',ex:''}},
{id:'UTCToLocalTime',group:'func',sub:'',descr:{name:'',descr:'<br><h1>UTCToLocalTime</h1><br><p class="body">Returns the local time that corresponds to a given UTC time. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">UTCToLocalTime(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Zone</span> [<span class="code-required">, </span><span class="parameter">IgnoreDaylightSaving</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">UTC date/time value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Zone</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying the local time zone<br>to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The corresponding date/time in the local time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Zone</span> is a Long value, it<br>is the index value of a time zone defined in the registry on the server.<br>If <span class="code">Zone</span> is a Text value, it is<br>the name of a time zone defined in the registry on the server. If <span class="code">Zone</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Zone</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Zone</span> cannot be found in the registry, an error occurs.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'LocalToUTCTime',group:'func',sub:'',descr:{name:'',descr:'<br><h1>LocalToUTCTime</h1><br><p class="body">Returns the UTC time that corresponds to a given local time. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">LocalToUTCTime(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Zone</span> [<span class="code-required">, </span><span class="parameter">IgnoreDaylightSaving</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Local date/time value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Zone</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying local time zone to<br>use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The corresponding UTC date/time.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Zone</span> is a Long value, it<br>is the index value of a time zone defined in the registry on the server.<br>If <span class="code">Zone</span> is a Text value, it is<br>the name of a time zone defined in the registry on the server. If <span class="code">Zone</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="Tabug_settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Zone</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Zone</span> can’t be found in the registry, an error occurs. </p><br><p class="body">Note that if the time zone uses daylight saving (and <span class="code">IgnoreDaylightSaving</span> is False), there will<br>be certain times of the year that do not correspond to a UTC time;<br>for example, if local time jumps from 0200 to 0300 when daylight saving<br>comes into effect, then there is no local 0215 on that day. In such<br>cases, the supplied local time is taken to be what the local time<br>would have been if daylight saving were not in effect (thus, in the<br>previous example, 0215 would return the same result as 0315). Also,<br>on days when daylight saving ends, certain times of the day occur<br>more than once; for example, if at 0300 (with daylight saving on)<br>the local time is reset to 0200, then 0215 occurs twice on that day.<br>In such cases, the supplied local time is taken to be the first occurrence,<br>when daylight saving was in effect.</p><br>',info:'',ex:''}},
{id:'SetTimeZone',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SetTimeZone</h1><br><p class="body">Sets the time zone associated with a program. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">SetTimeZone(</span><span class="code-required"></span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Index of the new time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function changes the time zone associated with the program<br>in which the function is called, as specified by <span class="code">Val</span>. By default, the program&#39s time zone is the local<br>time zone of the server. If <span class="code">Val</span> is a Long value, it is the index value of a time zone defined in<br>the registry on the server. If <span class="code">Val</span> is a Text value, it is the name of a time zone defined in the registry<br>on the server. If <span class="code">Val</span> is NULL or<br>empty, the time zone associated with the program is not changed. If<br>a time zone name is used, it is case-insensitive. The special values<br>of -1 and "UTC" can be used for the time zone; these do not correspond<br>to anything in the registry, but instead refer to UTC time, with no<br>offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If the time zone specified by <span class="code">Val</span> cannot be found in the registry, an error<br>occurs.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'GetTimeZone',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetTimeZone</h1><br><p class="body">Returns the index value of a time zone defined in the registry<br>on the server.</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">GetTimeZone(</span>[<span class="parameter">Val</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Index of the local time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server.<br>If <span class="code">Val</span> is a Text value, it is the<br>name of a time zone defined in the registry on the server. If <span class="code">Val</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs (thus this function can<br>be used to determine whether a specific value represents a valid time<br>zone).</p><br><h2>Example</h2><br><p class="body">The following example returns the index value of the Central Standard<br>Time time zone from the registry.</p><br><pre class="syntaxcompactblock">GetTimeZone("Central Standard Time")</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'GetTimeZoneName',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetTimeZoneName</h1><br><p class="body">Returns the name of the local time zone.</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">GetTimeZoneName(</span>[<span class="parameter">Val</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Name of the local time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server.<br>If <span class="code">Val</span> is a Text value, it is the<br>name of a time zone defined in the registry on the server. If <span class="code">Val</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs (thus this function can<br>be used to determine whether a specific value represents a valid time<br>zone).</p><br><h2>Example</h2><br><p class="body">The following example returns the name of the time zone with index<br>value 235 (Tokyo Standard Time) in the list of time zones defined<br>in the registry.</p><br><pre class="syntaxcompactblock">GetTimeZoneName(235)</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'GetTimeZoneOffset',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetTimeZoneOffset</h1><br><p class="body">Returns the number of minutes to add to or subtract from UTC time<br>to get the local time.</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">GetTimeZoneOffset(</span>[<span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Time</span> [<span class="code-required">, </span><span class="parameter">IgnoreDaylightSaving</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Time</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Local date and time to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreDaylightSaving</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Whether to ignore adjustments for daylight-saving<br>time. Default is False.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Offset from UTC time in minutes.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server.<br>If <span class="code">Val</span> is a Text value, it is the<br>name of a time zone defined in the registry on the server. If <span class="code">Val</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs.</p><br><p class="body">If <span class="code">Time</span> is omitted, or equal<br>to 30 December 1899, 00:00:00 (the date internally represented by<br>the numeric value 0), then the current local date and time for the<br>time zone are used. </p><br><p class="body">The return value is the number of minutes (possibly negative) to<br>add to UTC time to get the local time. This includes an adjustment<br>for daylight saving, if daylight saving is currently in effect in<br>the time zone and <span class="code">IgnoreDaylightSaving</span> is false.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'GetTimeZoneDayLightSaving',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetTimeZoneDaylightSaving</h1><br><p class="body">Returns True if daylight saving is currently in effect at the specified<br>time (or now) in the specified time zone (or the program&#39s time zone).</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">GetTimeZoneDaylightSaving(</span>[<span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Time</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Time</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Local date and time to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Whether daylight-saving is in effect at the specified time<br>in the specified time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server.<br>If <span class="code">Val</span> is a Text value, it is the<br>name of a time zone defined in the registry on the server. If <span class="code">Val</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs. </p><br><p class="body">If <span class="code">Time</span> is omitted, or equal<br>to 30 December 1899, 00:00:00 (the date internally represented by<br>the numeric value 0), then the current local date and time for the<br>time zone are used.</p><br><p class="body"><br><span class="runinhead">Note:</span> For some time zones<br>(for example, 275 "West Pacific Standard Time") this function always<br>returns False, because the time zone does not use daylight saving.</p><br><h2>Example</h2><br><p class="body">The following example returns True if daylight-saving is in effect<br>for the current local date and time in the Central Standard Time time<br>zone.</p><br><pre class="syntaxcompactblock">GetTimeZoneDaylightSaving("Central Standard Time")</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'DateOnly',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DateOnly</h1><br><p class="body">Returns the date from a date and time value. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">DateOnly(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The date from <span class="italic">Val</span> (year,<br>month and day).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the same as <span class="code">Val</span>, but with the time of day set to 00:00:00.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'TimeOnly',group:'func',sub:'',descr:{name:'',descr:'<br><h1>TimeOnly</h1><br><p class="body">Returns the time from a date and time value. </p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">TimeOnly(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The time from <span class="italic">Val</span> (hours,<br>minutes, and seconds).</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the same as <span class="code">Val</span>, but with the date set to 30 December 1899.</p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'DateDiff',group:'func',sub:'',descr:{name:'',descr:'<br><h1>DateDiff</h1><br><p class="body">Returns the time interval between two dates.</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">DateDiff(</span><span class="parameter">Val1</span><span class="code-required">, </span><span class="parameter">Val2</span><span class="code-required">, </span><span class="parameter">Interval</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First date value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val2</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Date</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Second date value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Interval</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Type of interval in which the difference between the two dates<br>is to be reported.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Number of intervals by which <span class="italic">Val2</span> is later than <span class="italic">Val1</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is negative if <span class="italic">Val2</span> is earlier than <span class="italic">Val1</span>. If the<br>current data value is NULL, <span class="italic">Val1</span> is 30 December 1899, 00:00:00.</p><br><p class="body">The following table shows the valid values for <span class="italic">Interval</span>. </p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value of Interval</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"yyyy"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Calendar years</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"q"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Calendar quarters</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"m"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Calendar months</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"d"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"y"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Day of year (same as "d")</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"w"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Week (seven-day periods)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"ww"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Calendar weeks (using first-day-of-week setting from input<br>locale)</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"h"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Hour</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"n"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Minute</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"s"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Second</td></tr></tbody></table><p class="body">For the calendar intervals, the return value is the number of occurrences<br>of the beginning of the type of interval from <span class="italic">Val1</span> up to and including <span class="italic">Val2</span>, but not including <span class="italic">Val1</span>. For<br>example, from 31 December 2001 to 1 January 2002 is counted as one<br>year, even though the dates are only one day apart. For the "w" interval,<br>the return value is the number of occurrences of whichever day of<br>the week <span class="italic">Val1</span> is, from <span class="italic">Val1</span> up to and including <span class="italic">Val2</span>, but not including <span class="italic">Val1</span>.</p><br><h2>Example</h2><br><p class="body">This example shows the use of the DateDiff function in an SQL query<br>that returns the average time taken, in seconds, to complete a survey:</p><br><pre class="codeblock">SELECT<br>    AVG(<br>        DateDiff(DataCollection.StartTime,<br>                 DataCollection.FinishTime,<br>                 &#39s&#39)<br>       ) AS Average<br>FROM vdata<br>WHERE DataCollection.Status = {completed}</pre><br><p class="body">If this query is run against the IBM® SPSS® Data Collection Data File version of the Museum sample data set, the result set<br>is:</p><br><pre class="codeblock">Average<br>-------<br>2171400</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.0 or later</p><br>',info:'',ex:''}},
{id:'BandDate',group:'func',sub:'',descr:{name:'',descr:'<br><h1>BandDate</h1><br><p class="body">Reserved for future use.</p><br>',info:'',ex:''}},
{id:'GetTimeZoneCollection',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetTimeZone</h1><br><p class="body">Returns the index value of a time zone defined in the registry<br>on the server.</p><br><h2>Syntax</h2><br><pre class="syntaxblock"><span class="code-required">GetTimeZone(</span>[<span class="parameter">Val</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Long or Text value specifying time zone to use.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Index of the local time zone.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="code">Val</span> is a Long value, it is<br>the index value of a time zone defined in the registry on the server.<br>If <span class="code">Val</span> is a Text value, it is the<br>name of a time zone defined in the registry on the server. If <span class="code">Val</span> is omitted, NULL or empty, the time zone<br>associated with the program in which the function is called is used.<br>By default, the program&#39s time zone is the local time zone of the<br>server, but this can be changed by calling <a href="settimezone.htm">SetTimeZone</a>. If a time zone name is used, it is case-insensitive.<br>The special values of -1 and "UTC" can be used for the time zone;<br>these do not correspond to anything in the registry, but instead refer<br>to UTC time, with no offset or daylight saving defined. If <span class="code">Val</span> is any other type, an error occurs. If<br>the time zone specified by <span class="code">Val</span> cannot<br>be found in the registry, an error occurs (thus this function can<br>be used to determine whether a specific value represents a valid time<br>zone).</p><br><h2>Example</h2><br><p class="body">The following example returns the index value of the Central Standard<br>Time time zone from the registry.</p><br><pre class="syntaxcompactblock">GetTimeZone("Central Standard Time")</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'GetRandomSeed',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetRandomSeed</h1><br><p class="body">Returns a value representing the current starting point of the<br>random number generator for the <a href="Tabug_rnd.htm">Rnd</a>, <a href="Tabug_ranint.htm">RanInt</a>, and <a href="Tabug_ran.htm">Ran</a> functions.</p><br><pre class="syntaxblock"><span class="code-required">GetRandomSeed()</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Current starting point for random number generation. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The current starting point for the random number generator is stored<br>by the mrScriptBasic engine and Evaluate component<br>and passed to the <a href="Tabug_ran.htm">Ran</a>, <a href="Tabug_ranint.htm">RanInt</a>, and <a href="Tabug_rnd.htm">Rnd</a> functions<br>as hidden parameters.</p><br><h2>Example</h2><br><pre class="codeblock">Dim seed<br><br>seed = GetRandomSeed()</pre><br>',info:'',ex:''}},
{id:'SetRandomSeed',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SetRandomSeed</h1><br><p class="body">This function sets the starting point for the random number generator.<br>This is stored by the mrScript engine and Evaluate component and passed<br>to the <a href="Tabug_rnd.htm">Rnd</a>, <a href="Tabug_ranint.htm">RanInt</a>, <a href="Tabug_ransequence.htm">RanSequence</a>, and <a href="Tabug_ran.htm">Ran</a> functions. </p><br><pre class="syntaxblock"><span class="code-required">SetRandomSeed(</span>[<span class="parameter">Seed</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Starting value to         use for random number generation.<br>The default is 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">New starting value for         random number generation. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Seed</span> can be any Long value,<br>positive, zero, or negative. If <span class="italic">Seed</span> is omitted, an unpredictable random value is returned. This function<br>can therefore be used for generating true random numbers, unlike <a href="Tabug_ranint.htm">RanInt</a> and <a href="Tabug_rnd.htm">Rnd</a>, which return reproducible sequences of values. </p><br><h2>Example</h2><br><p class="body">This example SQL query shows using SetRandomSeed with and without<br>the <span class="name">Seed</span> parameter. </p><br><pre class="codeblock">SELECT Serial,<br>    SetRandomSeed() AS Seed1, <br>    SetRandomSeed(3) AS Seed2 <br>FROM vdata</pre><br><p class="body">Here is the result set for the first five records. Note that each<br>time you run this query, the results in the <span class="name">Seed1</span> column will be different because new random values<br>are generated:</p><br><pre class="codeblock">Serial  Seed1        Seed2<br>------  -----------  -----<br>1       -1272667498  3<br>2       1402978284   3<br>3       -1930756257  3<br>4       -887407040   3<br>5       -456506117   3</pre><br>',info:'',ex:''}},
{id:'Rnd',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Rnd</h1><br><p class="body">This function returns a random decimal value. The numbers generated<br>by this function are not true random numbers because they can be reproduced.<br>However, the numbers generated meet general statistical standards<br>of randomness.</p><br><pre class="syntaxblock"><span class="code-required">Rnd(</span>[<span class="parameter">Seed</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The starting point to be used         for generating the random<br>number. The default is 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Random value &gt;= 0 and         &lt; 1.0. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Seed</span> is supplied, it is<br>used to reset the starting point for the random number generator,<br>as in <a href="Tabug_setrandomseed.htm">SetRandomSeed</a>, before the random number is generated. If <span class="italic">Seed</span> is not supplied or has a value of 0,<br>the function will use the starting point stored for the random number<br>generator by the mrScriptBasic engine or Evaluate<br>component and passed as a hidden parameter. Each time you call one<br>of the randomization functions, the starting point stored for the<br>random number generator is updated. This means that if you call the<br>function repeatedly without specifying the <span class="italic">Seed</span> parameter, the sequence of results is determined<br>by the changing value passed as a hidden parameter. Specifying the <span class="italic">Seed</span> parameter is a way of resetting this<br>sequence.</p><br><h2>Example</h2><br><p class="body">This mrScriptBasic example uses the Rnd function<br>to populate an array with random decimal values.</p><br><pre class="codeblock">Dim i, random[10]<br><br>For i = 0 To 9 <br>   random[i] = Rnd()<br>Next<br></pre><br><p class="body">Here are the output values:</p><br><pre class="codeblock">0.9732556194067<br>0.790608546696603<br>4.03919452801347E-02<br>6.83862725272775E-02<br>0.985055443830788<br>1.80076491087675E-02<br>0.567231006920338<br>0.648117552511394<br>0.385062272660434<br>2.64703407883644E-02</pre><br>',info:'',ex:''}},
{id:'RanInt',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RanInt</h1><br><p class="body">This function returns a random integer number. The numbers generated<br>by this function are not true random numbers because they can be reproduced.<br>However, the numbers generated meet general statistical standards<br>of randomness.</p><br><pre class="syntaxblock"><span class="code-required">RanInt(</span>[<span class="parameter">Seed</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The starting point to be used         for generating the random<br>number. The default is 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Random value &gt;= 0 and         &lt;= 2147483647. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The maximum possible value, 2147483647, is 2^31 – 1, because<br>a Long value has 31 bits available (for non-negative numbers).</p><br><p class="body">If <span class="italic">Seed</span> is supplied, it is<br>used to reset the starting point for the random number generator,<br>as in <a href="Tabug_setrandomseed.htm">SetRandomSeed</a>, before the random number is generated. If <span class="italic">Seed</span> is not supplied or has a value of 0,<br>the function will use the starting point stored for the random number<br>generator by the mrScriptBasic engine or Evaluate<br>component and passed as a hidden parameter. Each time you call one<br>of the randomization functions, the starting point stored for the<br>random number generator is updated. This means that if you call the<br>function repeatedly without specifying the <span class="italic">Seed</span> parameter, the sequence of results is determined<br>by the changing value passed as a hidden parameter. Specifying the <span class="italic">Seed</span> parameter is a way of resetting this<br>sequence.</p><br><h2>Example</h2><br><p class="body">This mrScriptBasic example uses the RanInt function<br>to populate an array with random integers.</p><br><pre class="codeblock">Dim i, random[10]<br><br>For i = 0 To 9 <br>   random[i] = RanInt()<br>Next</pre><br><p class="body">Here are the output values:</p><br><pre class="codeblock">1045025264<br>848909463<br>43370521<br>73429201<br>1057695229<br>19335566<br>609059656<br>695910923<br>413457467<br>28422312</pre><br>',info:'',ex:''}},
{id:'Ran',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Ran</h1><br><p class="body">This function returns a randomized copy of a list. The optional <span class="italic">Count</span> parameter defines how many items from<br>the input list are included in the returned randomized list. </p><br><pre class="syntaxblock"><span class="code-required">Ran(</span><span class="parameter">List </span>[<span class="code-required">, </span><span class="parameter">Count </span>[<span class="code-required">, </span><span class="parameter">Seed</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection, or         Categorical value to operate<br>on. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of items to         return. If omitted, negative,<br>or greater than the number of input items, all         items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The starting point         to be used for the generation<br>of the random ordering. The default is 0.         </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An         array consisting of a randomized copy of the input<br>list. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error occurs if <span class="italic">List</span> is<br>a collection that doesn&#39t support the For Each...Next syntax. When <span class="italic">List</span> is a collection object, the return<br>value is an array that contains copies of the objects in the collection<br>and the input collection object is unchanged. Because the return value<br>is an array, it does not have a <span class="italic">Count</span> property. </p><br><p class="body">If <span class="italic">Seed</span> is supplied, it is<br>used to reset the starting point for the random number generator,<br>as in <a href="Tabug_setrandomseed.htm">SetRandomSeed</a>, before the randomization. If <span class="italic">Seed</span> is not supplied or has a value of 0,<br>the function will use the starting point stored for the random number<br>generator by the mrScriptBasic engine or Evaluate<br>component and passed as a hidden parameter. Each time you call one<br>of the randomization functions, the starting point stored for the<br>random number generator is updated. This means that if you call the<br>function repeatedly without specifying the <span class="italic">Seed</span> parameter, the sequence of results is determined<br>by the changing value passed as a hidden parameter. Specifying the <span class="italic">Seed</span> parameter is a way of resetting this<br>sequence. It also means that the randomization can be repeated. For<br>example, if you use this function to randomize a category list in<br>an interview, by using the same seed value you could present the category<br>list in the same sequence should the interview be restarted.  </p><br><p class="body">The Ran function is similar to using the <span class="name">ran</span> keyword in IBM® SPSS® Quancept™.</p><br><h2>Examples</h2><br><p class="body">Ran is useful when you are cleaning data. For example, when a respondent<br>has selected more than one category in response to a single response<br>question, you can use Ran to select one of the responses randomly,<br>as shown in the following snippet of mrScriptBasic code:</p><br><pre class="codeblock">If time_spent.AnswerCount() &gt; 1 Then<br>   time_spent = time_spent.Ran(1)<br>End If</pre><br><p class="body">The next example shows using Ran with a multiple response variable<br>called <span class="name">remember</span> (which is in the IBM® SPSS® Data Collection Data File version of the Museum sample data<br>set) in an SQL query. The example uses the Ran function twice, both<br>times it is used to return one response from the list of responses<br>stored in the variable. However, the first time the <span class="italic">Seed</span> parameter is not specified and the<br>second time it is.</p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    remember, <br>    Ran(remember, 1) AS Remember1, <br>    Ran(remember, 1, 1) AS Remember2,<br>    remember.AnswerCount() AS HowMany<br>FROM vdata <br>WHERE remember IS NOT NULL</pre><br><p class="body">Here is the result set for the first eight respondents:</p><br><pre class="codeblock">  Remember             Remember1           Remember2           HowMany<br>  ---------------------------------------------- ------------------- ------------------- -------<br>1 {dinosaurs,fish_and_reptiles,fossils,mammals,m {fish_and_reptiles} {dinosaurs}         7<br>2 {dinosaurs,fish_and_reptiles,fossils,mammals,m {origin_of_species} {fish_and_reptiles} 8<br>3 {dinosaurs,fossils,birds,insects,whales,mammal {minerals}          {other}             11<br>4 {dinosaurs,conservation,birds,mammals,minerals {other}             {mammals}           6<br>5 {dinosaurs,birds,minerals,human_biology,evolut {birds}             {minerals}          5<br>6 {dinosaurs,birds,whales,mammals,origin_of_spec {mammals}           {dinosaurs}         7<br>7 {dinosaurs,birds,whales,mammals,minerals,botan {human_biology}     {birds}             8<br>8 {dinosaurs,insects,human_biology}              {human_biology}     {dinosaurs}         3</pre><br><p class="body">Notice that the results in the <span class="name">Remember2</span> column are different from those in the <span class="name">Remember1</span> column, because the <span class="italic">Seed</span> parameter<br>was used to specify a different starting point for the randomization.<br>Although the results appear to be different in the <span class="name">Remember2</span> column for every case, in fact the choice of<br>the category is based on the same random number each time. The reason<br>the results appear to be different is that the cases have different<br>numbers of responses. The <span class="name">HowMany</span> column shows us how many responses have been selected in each row.<br>We can see that:</p><br><p class="bullet">• In rows where 3 or 7 responses were chosen, <span class="name">Remember2</span> contains the first response.</p><br><p class="bullet">• In rows where 4 or 8 responses were chosen, <span class="name">Remember2</span> contains the second response.</p><br><p class="bullet">• In rows where 5 responses were chosen, <span class="name">Remember2</span> contains the third response.</p><br><p class="bullet">• In rows where 6 responses were chosen, <span class="name">Remember2</span> contains the fourth response.</p><br><p class="body">This is because if <span class="italic">N</span> is the<br>random number being used, then:</p><br><pre class="codeblock"><span class="parameter">N</span> mod 3 = 0<br><span class="parameter">N</span> mod 4 = 1<br><span class="parameter">N</span> mod 5 = 2<br><span class="parameter">N</span> mod 6 = 3<br><span class="parameter">N</span> mod 7 = 0<br><span class="parameter">N</span> mod 8 = 1</pre><br><p class="body">For example, <span class="italic">N</span> might be 777.</p><br>',info:'',ex:''}},
{id:'GetRotationSeed',group:'func',sub:'',descr:{name:'',descr:'<br><h1>GetRotationSeed</h1><br><p class="body">Returns the current rotation state, which is used by the <a href="Tabug_rot.htm">Rot</a> function. This represents the offset that was used for the most<br>recent rotation.</p><br><pre class="syntaxblock"><span class="code-required">GetRotationSeed()</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Current rotation state. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The current rotation state is stored by the mrScriptBasic engine and Evaluate component and passed to<br>the <a href="Tabug_rot.htm">Rot</a> function as a hidden parameter.</p><br><p class="body">The GetRotationSeed function is similar to using the <span class="name">rotation</span> keyword in IBM® SPSS® Quancept™.</p><br><h2>Example</h2><br><pre class="codeblock">Dim seed<br><br>seed = GetRotationSeed()</pre><br>',info:'',ex:''}},
{id:'SetRotationSeed',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SetRotationSeed</h1><br><p class="body">This function sets the rotation state. This is stored by the mrScript<br>engine and Evaluate component and passed to the <a href="Tabug_rot.htm">Rot</a> function. </p><br><pre class="syntaxblock"><span class="code-required">SetRotationSeed(</span>[<span class="parameter">Seed</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Rotation state         value. The default is 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">New rotation state value. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body"><br><span class="italic">Seed</span> can be any Long value,<br>positive, zero, or negative. This function sets the rotation state<br>for the <a href="Tabug_rot.htm">Rot</a> function.</p><br><h2>Example</h2><br><p class="body">This example sets the starting point for rotations to 3. </p><br><pre class="codeblock">SetRotationSeed(3)</pre><br>',info:'',ex:''}},
{id:'Rev',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Rev</h1><br><p class="body">This function returns an array containing copies of items from<br>the input list, either in the normal order or in reverse order. The<br>optional <span class="italic">Count</span> parameter defines<br>how many items from the input list are included in the returned list.</p><br><pre class="syntaxblock"><span class="code-required">Rev(</span><span class="parameter">List </span>[<span class="code-required">, </span><span class="parameter">Count </span>[<span class="code-required">, </span><span class="parameter">Policy </span>[<span class="code-required">, </span><span class="parameter">Seed</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection, or         Categorical value to operate<br>on. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of items to         return. If omitted, negative,<br>or greater than the number of input items, all         items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Policy</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Controls the way         the list order is chosen.<br>The default is 1. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The state to be         used for the reversal. The<br>default is 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)         </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array consisting of a copy of the input         list. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error occurs if <span class="italic">List</span> is<br>a collection that doesn’t support the For Each...Next syntax.<br>When <span class="italic">List</span> is a collection object,<br>the return value is an array that contains copies of the objects in<br>the collection and the input collection object is unchanged. Because<br>the return value is an array, it does not have a <span class="italic">Count</span> property. </p><br><p class="body">This function uses the reversal state stored by the mrScriptBasic engine or Evaluate component and passed as a<br>hidden parameter. However, when both <span class="italic">Policy</span> and <span class="italic">Seed</span> are nonzero, the reversal<br>state is set to <span class="italic">Seed</span> before the <span class="italic">Policy</span> is applied. If the resulting reversal<br>state is even, the list is presented in normal order; if odd, the<br>list is reversed. </p><br><p class="body">The possible values for <span class="italic">Policy</span> are:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">No reversal and the reversal         state is set to 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The reversal         state is used without changing it. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The reversal state is incremented by one and used. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Use the starting point of the random number         generator<br>and update both the reversal state and the random number generator<br>        starting point. </td></tr></tbody></table><p class="body">The Rev function is similar to using the <span class="name">rev</span> keyword in IBM® SPSS® Quancept™.</p><br><h2>Example</h2><br><p class="body">This example shows using Rev with <span class="name">museums</span> (which is a multiple response variable in the IBM® SPSS® Data Collection Data File version of the Museum sample data<br>set) in an SQL query. The example uses the Rev function four times,<br>each time using a different value for the <span class="italic">Policy</span> parameter.</p><br><pre class="codeblock">SELECT museums AS Museums, <br>    Rev(museums, , 0) AS Policy0, <br>    Rev(museums, , 1) AS Policy1, <br>    Rev(museums, , 2) AS Policy2, <br>    Rev(museums, , 3) AS Policy3 <br>FROM vdata WHERE museums.AnswerCount() &gt; 2</pre><br><p class="body">Here are the results for the first five respondents:</p><br><pre class="codeblock">   Museums        Policy0      Policy1       Policy2       Policy3<br>   -------------  ------------ ------------- ------------- ------------<br>1  {25,28,29}    {25,28,29}    {25,28,29}    {29,28,25}    {25,28,29}<br>2  {26,28,29,30} {26,28,29,30} {26,28,29,30} {26,28,29,30} {26,28,29,30}<br>3  {25,26,27}    {25,26,27}    {25,26,27}    {27,26,25}    {27,26,25}<br>4  {25,28,30}    {25,28,30}    {25,28,30}    {25,28,30}    {30,28,25}<br>5  {25,26,27}    {25,26,27}    {25,26,27}    {27,26,25}    {25,26,27}</pre><br><p class="body">In the first column, <span class="name">Museums</span>, the responses are presented as they are stored in the variable,<br>which is the "normal" order. Notice that the responses are also presented<br>in the normal order in the next two columns:</p><br><p class="bullet">• The second column, <span class="name">Policy0</span>, presents the responses in the normal order because <span class="italic">Policy</span> is set to 0 and <span class="italic">Seed</span> is not specified. This means that the list is presented<br>in the normal order. </p><br><p class="bullet">• The third column, <span class="name">Policy1</span>, presents the responses in the normal order because <span class="italic">Policy</span> is set to 1 and <span class="italic">Seed</span> is not specified. This means that whether the list<br>is reversed or not is determined by the current setting of the reversal<br>state. However, because the <span class="name">Seed</span> parameter has not been specified, the reversal state defaults to<br>0, which is an even number, and so the list is presented in the normal<br>order. If we changed the query to specify the <span class="name">Seed</span> parameter as 1, the order would be reversed, because<br>1 is an odd number. </p><br><p class="body">In the fourth column, <span class="name">Policy2</span>, the list is presented in normal and reverse order alternately.<br>This is because <span class="italic">Policy</span> is set<br>to 2, which means that each time the function is called, one is added<br>to the reversal state, thus causing it to alternate between odd and<br>even values.   </p><br><p class="body">In the fourth column, <span class="name">Policy3</span>, the list is presented in normal and reverse orders at random because <span class="italic">Policy</span> is set to 3. This means that the<br>reversal state is set to a random value each time the function is<br>called. This means that the list is presented in normal and reverse<br>order randomly.  </p><br>',info:'',ex:''}},
{id:'SortAsc',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SortAsc</h1><br><p class="body">This function returns an array containing copies of items from<br>the input list, sorted in ascending order. The optional <span class="italic">Count</span> parameter defines how many items from<br>the input list are included in the returned list.</p><br><pre class="syntaxblock"><span class="code-required">SortAsc(</span><span class="parameter">List </span>[<span class="code-required">, </span><span class="parameter">Count </span>[<span class="code-required">, </span><span class="parameter">IgnoreLocale</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection, or         Categorical value to operate<br>on. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of items to         return. If omitted, negative,<br>or greater than the number of input items, all         items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreLocale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. When True, the         rules of the input locale<br>are ignored when sorting text and the text is sorted         in a<br>language-neutral way. The default is False. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array consisting of a         sorted copy of the input list. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error occurs if <span class="italic">List</span> is<br>a collection that doesn’t support the For Each...Next syntax.<br> When <span class="italic">List</span> is a collection object,<br>the return value is an array that contains copies of the objects in<br>the collection and the input collection object is unchanged. Because<br>the return value is an array, it does not have a <span class="italic">Count</span> property. </p><br><p class="body">The sorting method depends on the type of the items in the list.<br>If they are simple Long, Double, Text, Date, or Boolean values, they<br>are sorted in ascending order. When sorting Boolean values, SortAsc<br>considers False to be less than True. </p><br><p class="body">If the items are objects, they are sorted by the value of their<br>default property. An error occurs if the objects do not have a default<br>property or its value cannot be determined. </p><br><p class="body">The input locale is used to determine the correct ordering for<br>text values, unless <span class="italic">IgnoreLocale</span> is True, when the sorting is performed in a locale-independent way.<br>The locale-independent sort is case-sensitive and is likely to give<br>unexpected results. When the input locale is used, the sort is always<br>case-insensitive. Note that items with the same equivalent values<br>may not appear in the same relative order in the sorted list as in<br>the original list. </p><br>',info:'',ex:''}},
{id:'SortDesc',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SortDesc</h1><br><p class="body">This function returns an array containing copies of items from<br>the input list, sorted in descending order. The optional <span class="italic">Count</span> parameter defines how many items from<br>the input list are included in the returned list.</p><br><pre class="syntaxblock"><span class="code-required">SortDesc(</span><span class="parameter">List </span>[<span class="code-required">, </span><span class="parameter">Count </span>[<span class="code-required">, </span><span class="parameter">IgnoreLocale </span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection, or         Categorical value to operate<br>on. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of items to         return. If omitted, negative,<br>or greater than the number of input items, all         items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">IgnoreLocale</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. When True, the         rules of the input locale<br>are ignored when sorting text and the text is sorted         in a<br>language-neutral way. The default is False. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array consisting of a         sorted copy of the input list. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error occurs if <span class="italic">List</span> is<br>a collection that doesn’t support the For Each...Next syntax.<br> When <span class="italic">List</span> is a collection object,<br>the return value is an array that contains copies of the objects in<br>the collection and the input collection object is unchanged. Because<br>the return value is an array, it does not have a <span class="italic">Count</span> property. </p><br><p class="body">The sorting method depends on the type of the items in the list.<br>If they are simple Long, Double, Text, Date, or Boolean values, they<br>are sorted in descending order. When sorting Boolean values, SortAsc<br>considers False to be less than True. </p><br><p class="body">If the items are objects, they are sorted by the value of their<br>default property. An error occurs if the objects do not have a default<br>property or its value cannot be determined. </p><br><p class="body">The input locale is used to determine the correct ordering for<br>text values, unless <span class="italic">IgnoreLocale</span> is True, when the sorting is performed in a locale-independent way.<br>The locale-independent sort is case-sensitive and is likely to give<br>unexpected results. When the input locale is used, the sort is always<br>case-insensitive. Note that items with the same equivalent values<br>may not appear in the same relative order in the sorted list as in<br>the original list. </p><br><h2>Example</h2><br><p class="body">This example shows using SortDesc in an SQL query to sort the responses<br>given to a multiple response question.</p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    Remember, <br>    Remember.SortDesc() AS &#39Remember.SortDesc&#39 <br>FROM vdata<br>WHERE Remember IS NOT NULL</pre><br><p class="body">Here is the result set for the first five respondents: </p><br><pre class="codeblock">Respondent.Serial Remember Remember.SortDesc<br>----------------- ---------------------------------  ----------------------------------<br>305               {31,33,34,38,39,44,18}             {44,39,38,34,33,31,18}<br>306               {31,33,34,38,39,40,42,18}          {42,40,39,38,34,33,31,18}<br>307               {31,34,35,36,37,38,39,42,43,44,18} {44,43,42,39,38,37,36,35,34,31,18}<br>308               {31,32,35,38,39,18}                {39,38,35,32,31,18}<br>309               {31,35,39,43,44}                   {44,43,39,35,31}<br>310               {31,35,37,38,42,43,18}             {43,42,38,37,35,31,18}</pre><br>',info:'',ex:''}},
{id:'RanSequence',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RanSequence</h1><br><p class="body">This function returns an array containing values selected randomly<br>from a given series of integers. </p><br><pre class="syntaxblock"><span class="code-required">RanSequence(</span><span class="parameter">Start</span><span class="code-required">, </span><span class="parameter">End</span> [<span class="code-required">, </span><span class="parameter">Step </span>[<span class="code-required">, </span><span class="parameter">Count</span>[<span class="code-required">, </span><span class="parameter">Seed</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Start</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The first possible           value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">End</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The last possible value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Step</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The increment between consecutive<br>possible values.           The default is 1.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of items           to return. If omitted,<br>negative, or greater than the number of possible values,         <br> all items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The starting point           to be used for the random<br>number generator. The default is 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array           containing a random selection from the set<br>of possible numbers. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The RanSequence function returns an array containing numbers from<br>the sequence <span class="italic">Start</span>, <span class="italic">Start</span> + <span class="italic">Step</span>, <span class="italic">Start</span> + <span class="italic">Step</span> * 2, ... , <span class="italic">Start</span> + <span class="italic">Step</span> * <span class="italic">N</span> (where <span class="italic">N</span> is the<br>maximum integer such that the sequence doesn&#39t pass <span class="italic">End</span>), in a random order. <span class="italic">Step</span> may be positive or negative. If <span class="italic">Step</span> is 0, <span class="italic">Count</span> copies of <span class="italic">Start</span> are returned,<br>unless <span class="italic">Count</span> is omitted or negative,<br>in which case an empty array is returned. If <span class="italic">Step</span> is positive and <span class="italic">Start</span> &gt; <span class="italic">End</span>, or if <span class="italic">Step</span> is negative and <span class="italic">Start</span> &lt; <span class="italic">End</span>,<br>an empty array is returned.</p><br><p class="body">The <span class="italic">Start</span>, <span class="italic">End</span>, and <span class="italic">Step</span> arguments define the potential set of numbers to return (for example,<br>a setting of (1, 10, 2) produces the set {1, 3, 5, 7, 9}, while (10,<br>1, -2) produces {10, 8, 6, 4, 2}). Then the <span class="italic">Seed</span> and the starting point for random number generation<br>determine in which order those numbers would be returned. Finally,<br>the <span class="italic">Count</span> argument controls how<br>much of that ordered set is returned. Provided <span class="italic">Step</span> is not set to 0, the returned numbers are guaranteed<br>to be unique, so no number occurs more than once in the array.</p><br><p class="body">If <span class="italic">Seed</span> is non-zero, it is<br>used to reset the starting point for the random number generator,<br>as in <a href="Tabug_setrandomseed.htm">SetRandomSeed</a>, before the<br>randomization. If <span class="italic">Seed</span> is not<br>supplied or has a value of 0, the function will use the starting point<br>stored for the random number generator by the mrScriptBasic engine or Evaluate component and passed as a<br>hidden parameter. Each time you call one of the randomization functions,<br>the starting point stored for the random number generator is updated<br>even if no numbers are returned. This means that if you call the function<br>repeatedly without specifying the <span class="italic">Seed</span> parameter, the sequence of results is determined by the changing<br>value passed as a hidden parameter. Specifying the <span class="italic">Seed</span> parameter is a way of resetting this<br>sequence and means that the sequence of returned values can be repeated.<br>For example, if you use this function to assign random responses to<br>a categorical question, by using the same <span class="italic">Seed</span> value you could reassign the same responses.  </p><br><h2>Examples</h2><br><p class="body">You can use RanSequence to generate random responses to a categorical<br>question. To illustrate this, let&#39s consider the <span class="name">Remember</span> and <span class="name">Interest</span> variables in the Museum sample IBM SPSS Data Collection<br>Data File. These<br>are categorical variables that have identical category lists that<br>contain categories for the various museum galleries. The categories<br>that represent the various galleries have <script type="text/javascript"><br>    var N2211E_term = "Definition of Mapped category value";<br><br>    var N2211E_def = "A numeric value that the assigns to each unique category name in the metadata.";<br></script><a href="javascript:void(0)" style="cursor:hand; cursor:pointer" class="glossary-ref" onclick="popup(N2211E_term,N2211E_def,event);" title="Definition of Mapped category value">mapped category values</a> of 31 through 45. The following<br>query uses the <a href="Tabug_iif.htm">IIf function</a> to test  whether the value of the <span class="name">Interest</span> variable is Null. If the value is<br>Null,   RanSequence is used to assign a single response chosen at<br>random from the possible response values. The multiple response <span class="name">Remember</span> variable is handled in a similar<br>way, except three responses are assigned at random. </p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    IIf(Interest IS NULL, RanSequence(31, 45, 1, 1), Interest) AS Interest, <br>    IIf(Remember IS NULL, RanSequence(31, 45, 1, 3), Remember) AS Remember <br>FROM vdata</pre><br><p class="body">Here are the results for the first five respondents (for whom the <span class="name">Interest</span> and <span class="name">Remember</span> variables are Null in the case data):</p><br><pre class="codeblock">Respondent.Serial  Interest        Remember<br>-----------------  --------------  ----------------------------------------<br>1                  {insects}       {insects,minerals,origin_of_species}<br>2                  {ecology}       {insects,dinosaurs,mammals}<br>3                  {conservation}  {dinosaurs,ecology,whales}<br>4                  {insects}       {fish_and_reptiles,botany,human_biology}<br>5                  {conservation}  {conservation,evolution,whales}</pre><br><p class="body"></p><br>',info:'',ex:''}},
{id:'RotSequence',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RotSequence</h1><br><p class="body">This function returns an array containing values selected from<br>a given series of integers in a "rotated" order. </p><br><pre class="syntaxblock"><span class="code-required">RotSequence(</span><span class="parameter">Start</span><span class="code-required">, </span><span class="parameter">End</span> [<span class="code-required">, </span><span class="parameter">Step </span>[<span class="code-required">, </span><span class="parameter">Count</span>[<span class="code-required">, </span><span class="parameter">Policy</span>[<span class="code-required">, </span><span class="parameter">Seed</span>]]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Start</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The first possible           value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">End</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The last possible value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Step</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The increment between consecutive<br>possible values.           The default is 1.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of items           to return. If omitted,<br>negative, or greater than the number of possible values,         <br> all items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Policy</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> Optional. Controls the way the rotation<br>is performed. The           default is 2. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The state to be used for the rotation. The default<br>is the value acquired from the <span class="code">GetRotationSeed()</span> function. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)           </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array containing a rotated selection           from the<br>set of possible numbers. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The RotSequence function returns an array containing numbers from<br>the sequence <span class="italic">Start</span>, <span class="italic">Start</span> + <span class="italic">Step</span>, <span class="italic">Start</span> + <span class="italic">Step</span> * 2, ... , <span class="italic">Start</span> + <span class="italic">Step</span> * <span class="italic">N</span> (where <span class="italic">N</span> is the<br>maximum integer such that the sequence doesn’t pass <span class="italic">End</span>) in a "rotated" order. <span class="italic">Step</span> may be positive or negative. If <span class="italic">Step</span> is 0, <span class="italic">Count</span> copies of <span class="italic">Start</span> are returned,<br>unless <span class="italic">Count</span> is omitted or negative,<br>in which case an empty array is returned. If <span class="italic">Step</span> is positive and <span class="italic">Start</span> &gt; <span class="italic">End</span>, or if <span class="italic">Step</span> is negative and <span class="italic">Start</span> &lt; <span class="italic">End</span>,<br>an empty array is returned.</p><br><p class="body">Note that the <span class="italic">Start</span>, <span class="italic">End</span>, and <span class="italic">Step</span> arguments define the potential set of numbers to return (for example,<br>a setting of (1, 10, 2) produces the set {1, 3, 5, 7, 9}, while (10,<br>1, -2) produces {10, 8, 6, 4, 2}). Then the <span class="italic">Policy</span> and <span class="italic">Seed</span> parameters<br>and the rotation state determine in which order those numbers are<br>returned. Finally, the <span class="italic">Count</span> argument<br>controls how much of that ordered set is returned.</p><br><p class="body">This function uses the rotation state stored by the mrScriptBasic engine or Evaluate component and passed as a<br>hidden parameter. However, when both <span class="italic">Policy</span> and <span class="italic">Seed</span> are nonzero, the rotation<br>state is set to <span class="italic">Seed</span> before the <span class="italic">Policy</span> is applied. The resulting rotation<br>state determines which item from the original list is to appear first<br>in the rotated list. </p><br><p class="body">The possible values for <span class="italic">Policy</span> are:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">No rotation and the rotation           state is set to 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The rotation           state is used without changing it. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The rotation state is incremented by one and used. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Use the starting point of the random number           generator<br>and update both the rotation state and the random number generator<br>          starting point. </td></tr></tbody></table><p class="body">The rotation state is used to calculate the number of items by<br>which the list should be "rotated". This is called the <span class="definedword">offset</span> and is calculated as follows:</p><br><pre class="codeblock"><span class="parameter">Rotation_state</span> mod <span class="parameter">Number_of_items_in_list</span><br></pre><br><p class="body">For example, if the rotation state is 9 and there are 7 items in<br>the list, the rotated list will start with the third item from the<br>original list, because the offset is 2 (which is 9 mod 7). However,<br>if there were 5 items in the list, the rotated list would start with<br>the fifth item from the original list, because the offset is 4 (which<br>is 9 mod 5). </p><br><h2>Example</h2><br><p class="body">This example shows using RotSequence in an SQL query.   </p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    RotSequence(1, 5, 1, 5, 2) AS RotSequence <br>FROM vdata</pre><br><p class="body">Here are the results for the first seven respondents:</p><br><pre class="codeblock">Respondent.Serial  RotSequence<br>-----------------  -------------<br>1                  {2,3,4,5,1}<br>2                  {3,4,5,1,2}<br>3                  {4,5,1,2,3}<br>4                  {5,1,2,3,4}<br>5                  {1,2,3,4,5}<br>6                  {2,3,4,5,1}<br>7                  {3,4,5,1,2}</pre><br><p class="body">In this example, the <span class="italic">Count</span> parameter has been set to the same value as the number of input<br>values. This is deliberately simplistic and is designed to make it<br>clear how the function works. In "real life", you may want to return<br>fewer values than are input. For example: </p><br><pre class="codeblock">SELECT Respondent.Serial, <br>    RotSequence(1, 14, 2, 5, 2) AS RotSequence <br>FROM vdata</pre><br><p class="body">Here are the results for the first seven respondents:</p><br><pre class="codeblock">Respondent.Serial  RotSequence<br>-----------------  -------------<br>1                  {3,5,7,9,11}<br>2                  {5,7,9,11,13}<br>3                  {7,9,11,13,1}<br>4                  {9,11,13,1,3}<br>5                  {11,13,1,3,5}<br>6                  {13,1,3,5,7}<br>7                  {1,3,5,7,9}</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'RevSequence',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RevSequence</h1><br><p class="body">This function returns an array containing values selected from<br>a given series of integers, either in the original order or in reverse<br>order.  </p><br><pre class="syntaxblock"><span class="code-required">RevSequence(</span><span class="parameter">Start</span><span class="code-required">, </span><span class="parameter">End</span> [<span class="code-required">, </span><span class="parameter">Step </span>[<span class="code-required">, </span><span class="parameter">Count</span>[<span class="code-required">, </span><span class="parameter">Policy</span>[<span class="code-required">, </span><span class="parameter">Seed</span>]]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Start</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The first possible           value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">End</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The last possible value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Step</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The increment between consecutive<br>possible values.           The default is 1.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of items           to return. If omitted,<br>negative, or greater than the number of possible values,         <br> all items are returned. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Policy</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"> Optional. Controls the way the list order<br>is chosen. The           default is 1. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Seed</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The state to be           used for the reversal.<br>The default is 0. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)           </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">An array containing a selection from the           set of possible<br>numbers. </td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The RevSequence function returns an array containing numbers from<br>the sequence <span class="italic">Start</span>, <span class="italic">Start</span> + <span class="italic">Step</span>, <span class="italic">Start</span> + <span class="italic">Step</span> * 2, ... , <span class="italic">Start</span> + <span class="italic">Step</span> * <span class="italic">N</span> (where <span class="italic">N</span> is the<br>maximum integer such that the sequence doesn’t pass <span class="italic">End</span>), either in the normal order or in reverse<br>order. <span class="italic">Step</span> may be positive or<br>negative. If <span class="italic">Step</span> is 0, <span class="italic">Count</span> copies of <span class="italic">Start</span> are returned, unless <span class="italic">Count</span> is omitted or negative, in which case an empty array is returned.<br>If <span class="italic">Step</span> is positive and <span class="italic">Start</span> &gt; <span class="italic">End</span>, or if <span class="italic">Step</span> is negative and <span class="italic">Start</span> &lt; <span class="italic">End</span>, an empty array is returned.</p><br><p class="body">Note that the <span class="italic">Start</span>, <span class="italic">End</span>, and <span class="italic">Step</span> arguments define the potential set of numbers to return (for example,<br>a setting of (1, 10, 2) produces the set {1, 3, 5, 7, 9}, while (10,<br>1, -2) produces {10, 8, 6, 4, 2}). Then the <span class="italic">Policy</span> and <span class="italic">Seed</span> parameters<br>and the reversal state determine in which order those numbers are<br>returned. Finally, the <span class="italic">Count</span> argument<br>controls how much of that ordered set is returned.</p><br><p class="body">This function uses the reversal state stored by the mrScriptBasic engine or Evaluate component and passed as a<br>hidden parameter. However, when both <span class="italic">Policy</span> and <span class="italic">Seed</span> are nonzero, the reversal<br>state is set to <span class="italic">Seed</span> before the <span class="italic">Policy</span> is applied. If the resulting reversal<br>state is even, the list is presented in normal order; if odd, the<br>list is reversed. </p><br><p class="body">The possible values for <span class="italic">Policy</span> are:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">No reversal and the reversal           state is set to 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The reversal           state is used without changing it. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The reversal state is incremented by one and used. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Use the starting point of the random number           generator<br>and update both the reversal state and the random number generator<br>          starting point. </td></tr></tbody></table><h2>Example</h2><br><p class="body">This example shows using RevSequence in an SQL query. The example<br>uses RevSequence four times to select five values from the values<br>1 through 10, each time using a different value for the <span class="italic">Policy</span> parameter, so that sometimes the<br>values are presented in the normal (specified) order and sometimes<br>in reversed order.  </p><br><pre class="codeblock">SELECT<br>    RevSequence(1, 10, 1, 5, 0) AS Policy0,  <br>    RevSequence(1, 10, 1, 5, 1) AS Policy1, <br>    RevSequence(1, 10, 1, 5, 2) AS Policy2, <br>    RevSequence(1, 10, 1, 5, 3) AS Policy3 <br>FROM vdata</pre><br><p class="body">Here are the results for the first five respondents:</p><br><pre class="codeblock">   Policy0      Policy1      Policy2       Policy3<br>   -----------  -----------  ------------  ------------<br>1  {1,2,3,4,5}  {1,2,3,4,5}  {10,9,8,7,6}  {1,2,3,4,5}<br>2  {1,2,3,4,5}  {1,2,3,4,5}  {1,2,3,4,5}   {1,2,3,4,5}<br>3  {1,2,3,4,5}  {1,2,3,4,5}  {10,9,8,7,6}  {10,9,8,7,6}<br>4  {1,2,3,4,5}  {1,2,3,4,5}  {1,2,3,4,5}   {10,9,8,7,6}<br>5  {1,2,3,4,5}  {1,2,3,4,5}  {10,9,8,7,6}  {1,2,3,4,5}</pre><br><p class="body">Notice that the function orders the list of values before selecting<br>the required number of values. The following notes explain how the<br>value of the <span class="italic">Policy</span> parameter<br>affects the ordering: </p><br><p class="bullet">• In the first column, <span class="name">Policy0</span>, the list is  in the normal order because <span class="italic">Policy</span> is set to 0. This means that the list is always<br>presented in the normal order. </p><br><p class="bullet">• In the second column, <span class="name">Policy1</span>, the list is also in the normal order. This time <span class="italic">Policy</span> is set to 1, which means that whether<br>the list is reversed or not is determined by the current setting of<br>the reversal state. Since the <span class="name">Seed</span> parameter is not specified, the reversal state remains at its initial<br>value of 0, which is an even number, and so the list is always presented<br>in the normal order. If we changed the query to specify the <span class="name">Seed</span> parameter as 1, the order would always<br>be reversed, because 1 is an odd number. </p><br><p class="bullet">• In the third column, <span class="name">Policy2</span>, the list is in normal and reverse order alternately. This is because <span class="italic">Policy</span> is set to 2, which means that each<br>time the function is called, one is added to the reversal state, thus<br>causing it to alternate between odd and even values.   </p><br><p class="bullet">• In the fourth column, <span class="name">Policy3</span>, the list is presented in normal and reverse order at random because <span class="italic">Policy</span> is set to 3. This means that the<br>reversal state is set to a random value each time the function is<br>called, thus causing it to switch randomly between odd and even values.<br>  </p><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.9 or later</p><br>',info:'',ex:''}},
{id:'SelectRange',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SelectRange</h1><br><p class="body">This function returns an array containing copies of selected items<br>from the input list,  in the same order as in the list.</p><br><pre class="syntaxblock"><br><span class="code-required">SelectRange(</span><span class="parameter">List</span> [<span class="code-required">,</span> <span class="parameter">Range</span> [<span class="code-required">,</span> <span class="parameter">Count</span>]]<span class="code-required">)</span><br><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection or Categorical value to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Range</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text, Long or Categorical value for selecting list items.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Count</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. Number of items to return. If omitted, negative,<br>or greater than the maximum number of items  selected by <span class="italic">Range</span>, all selected items are returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">(return)</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array containing a selection of items from the list.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">List</span> is a collection, an<br>error occurs if it does not  support _NewEnum (that is, for each ...<br>next). If <span class="italic">List</span> is  NULL, an empty<br>array is returned.</p><br><p class="body">If <span class="italic">Range</span> is of type Categorical,<br>the values within it are  taken as positional indexes of items in <span class="italic">List</span>, as described below.  If <span class="italic">Range</span> is of type Long, it is taken as a<br>single positional index.  If <span class="italic">Range</span> is of type Text, it is assumed to be a range expression,  of the<br>same syntax as a category expression. Numbers in the range expression<br>refer to positional  indexes of items in <span class="italic">List</span>; names are used to identify list items  as described<br>below. If <span class="italic">Range</span> is NULL, all<br>list items are returned.  If <span class="italic">Range</span> is of any other type, an error occurs.</p><br><p class="body">Positional indexes start at 0 for the first item in <span class="italic">List</span>.  Indexes less than zero or greater<br>than or equal to the number of items in  <span class="italic">List</span> are ignored. For example, in a list of 4 items,<br> a range of "-1..10" will select all items, the same as "0..3" or<br>"..".</p><br><p class="body">The way names in the range expression are used depends on the type<br>of the items in  <span class="italic">List</span>:</p><br><p class="bullet">• For a <span class="definedword">string</span> item, the name is simply compared with  the string.</p><br><p class="bullet">• For an item that is an <span class="definedword">object</span>, the name is first compared with the value of<br>the object&#39s Name property, if it has one. This property is not necessarily<br>called "Name", but it is defined internally as representing a name<br>for the object. In COM, this is done by giving the property a Dispatch<br>identifier of -800. If the object has no Name property, the name is<br>compared with the value of the object&#39s default property. If the object<br>has no Name or default properties, or their values cannot be determined,<br> or the value is not a string, an error occurs.</p><br><p class="bullet">• For  any <span class="definedword">other</span> type of item, an error occurs if <span class="italic">Range</span> contains item  names. In particular, if <span class="italic">List</span> is a Categorical value, only  numeric (positional)<br>indexes can be used, not category values or names.</p><br><p class="body">When comparing names,  differences between upper and lower case<br>are ignored. Like out-of-range indexes, any name in  <span class="italic">Range</span> that does not match an item in List<br>is ignored.  For example, if an item called "Good" exists but no item<br>called "Bad", then the range expression  "Good..Bad" is equivalent<br>to "Good.." (selecting all items from "Good" to the end of  <span class="italic">List</span>), "Bad" will select no items, "^Bad"<br>will select all  items, and "^Bad, Good" will select only "Good".</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">List </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Range </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{2,4}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7,3}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"2 .. 4"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7,1,3}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"2 .., ^4"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7,1,2,9}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{fox}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"quick .. jumped"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{quick,brown,fox}</td></tr></tbody></table><p class="body"></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">List </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Range </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Count </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range, Count)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"2 .."</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{7,1,3,2}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range, Count)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,2,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SelectRange(List, Range, Count)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{The,quick}</td></tr></tbody></table><p class="body">The <a href="split.htm">Split</a> function is used in some of these examples to create an array of<br>substrings that SelectRange can operate on.</p><br>',info:'',ex:''}},
{id:'FindItem',group:'func',sub:'',descr:{name:'',descr:'<br><h1>FindItem</h1><br><p class="body">This function returns a specified item from a list, or NULL if<br>the item isn&#39t found.</p><br><pre class="syntaxblock"><span class="code-required">FindItem(</span><span class="parameter">List</span><span class="code-required">,</span> <span class="parameter">Key</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">List</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Array, collection or Categorical value to operate on.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Key</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Index, name, or value of the item to be found.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">(return)</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A copy of the requested item if found in <span class="italic">List</span>, or NULL if the item is not found.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">This function can be used to look up an item in a list, without<br>generating an error if the item doesn&#39t exist. If <span class="italic">List</span> or <span class="italic">Key</span> are NULL, the return value is NULL.</p><br><p class="body">The way in which <span class="italic">Key</span> is used<br>to locate an item depends on the type of the list, as follows:</p><br><p class="body"><br><span class="runinhead">1. If List is a Collection</span><br></p><br><p class="body"><br><span class="italic">Key</span> is passed<br>to the list&#39s "Evaluate method", that is, the property or method that<br>is given a COM Dispatch identifier of -5. If the list has no Evaluate<br>method, <span class="italic">Key</span> is passed to the<br>Item property of the list. If the list has neither an Evaluate method,<br>nor a property or method called "Item" (in English only), or if accessing<br>the Evaluate method or the Item property generates an error, the return<br>value is NULL. Otherwise, the return value is the value returned by<br>the Evaluate method or the Item property, which may be NULL if the<br>item isn&#39t found.</p><br><p class="body"><br><span class="runinhead">2. If List is an Array or Categorical<br>Value, and Key is of type Long</span><br></p><br><p class="body"><br><span class="italic">Key</span> is taken as the positional<br>index of an item in the list, starting at 0 for the first item. If <span class="italic">Key</span> is greater than or equal to zero and<br>less than the number of items in List, the return value is the item<br>at that position. Otherwise, the return value is NULL.</p><br><p class="body">For example, if <span class="italic">List</span> is a<br>Categorical value that contains three or more categories and <span class="italic">Key</span> is 2 (Long), the return value is the<br>third category in the list.</p><br><p class="body"><br><span class="runinhead">3. If List is an Array or Categorical<br>Value, and Key is not of type Long</span><br></p><br><p class="body"><br><span class="italic">Key</span> is compared with each<br>list item in turn until a match is found. The way that <span class="italic">Key</span> is compared with each item depends on<br>the type of the item:</p><br><p class="bullet">• For a <span class="definedword">string</span> item, <span class="italic">Key</span> is converted to a<br>string and compared with the item.</p><br><p class="bullet">• For an item that is an <span class="definedword">object</span>, <span class="italic">Key</span> is converted<br>to a string and compared with the value of the object&#39s "Name property",<br>that is, the property that is given a COM Dispatch identifier of -800.<br>If the object has no "Name property", the key is compared with the<br>value of the object&#39s default property, which is converted to a string<br>if necessary. If the object has no Name or default properties, or<br>if accessing the Name or default properties generates an error, the<br>item is considered not to be a match for <span class="italic">Key</span>.</p><br><p class="bullet">• For any <span class="definedword">other</span> type of item, <span class="italic">Key</span> is compared<br>with the item using the normal conversion and comparison rules for<br>variant types.</p><br><p class="body">In all string comparisons, differences between upper and lower<br>case are ignored. If a matching item is found, the return value is<br>the matching item. Otherwise the return value is NULL. </p><br><p class="body">For example, if <span class="italic">List</span> is a<br>Categorical value that contains a category with a value of 2 and <span class="italic">Key</span> is “2” (Text) or 2.0 (Double),<br>the return value is 2 (Long). </p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Function call </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">List </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Key </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Notes</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,4,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The item with a positional index of 4 (that is, the fifth item)<br>in the categorical value is returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,4,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">10</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">There is no item with a positional index of 10, so NULL is<br>returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,4,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"4.0"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">To compare with the Long values in the categorical value, Key<br>is converted from a Text to a Long value, and the matching item is<br>returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{8,5,7,1,3,4,9}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4.0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">To compare with the Long values in the categorical value, Key<br>is converted from a Double to a Long value, and the matching item<br>is returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"quick"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The item with a positional index of 1 (that is, the second<br>item) in the array is returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">split("The quick brown fox")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"THE"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"The"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The matching Text item in the array is returned. String comparisons<br>are always case insensitive.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">split("1 2 3 4 5")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"5"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Key is a Long value, so the item with a positional index of<br>4 in the array is returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">split("1 2 3 4 5")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"4"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"4"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Key is a Text value, so the matching text item in the array<br>is returned.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FindItem(List, Key)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">split("1 2 3 4 5")</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4.0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">"4"</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Key is converted from a Double to a Text value, and the matching<br>text item in the array is returned.</td></tr></tbody></table><p class="body">The <a href="Tabug_split.htm">Split</a> function is used in some of the above examples to create an array<br>of substrings that FindItem can operate on.</p><br><p class="body">The following mrScriptBasic example uses the<br>FindItem function to find an item called "Country" in a collection:</p><br><pre class="codeblock">Dim myItem<br><br>myItem = myCollection.FindItem("Country")<br><br>If myItem &lt;&gt; NULL Then<br>    ...                   &#39 Item found<br>Else<br>    ...                   &#39 Item not found<br>End If</pre><br>',info:'',ex:''}},
{id:'RandomPassword',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RandomPassword</h1><br><p class="body">Returns a string whose content and length are selected randomly<br>within the constraints specified by the parameters. This function<br>is intended to be used to generate unpredictable passwords.</p><br><pre class="syntaxblock"><span class="code-required">RandomPassword(</span>[<span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">MinLength</span> [<span class="code-required">, </span><span class="parameter">MaxLength</span>]]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The characters allowed in the password.  If <span class="italic">Val</span> is omitted or empty, “0123456789”<br>is used.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">MinLength</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The minimum length of the password. If <span class="italic">MinLength</span> is omitted or is less than 1,<br>the minimum length is set to 8.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">MaxLength</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The maximum length of the password. If <span class="italic">MaxLength</span> is omitted or is less than <span class="italic">MinLength</span>, the maximum length is set to <span class="italic">MinLength</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return) </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A password whose content and length are selected randomly within<br>the constraints specified by the parameters</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> begins with "[" and<br>ends with "]", <span class="italic">Val</span> is interpreted<br>as a regular expression, which enables ranges of characters to be<br>specified without listing them all explicitly. For example, "[0-9a-fA-F]"<br>is equivalent to "0123456789abcdefABCDEF".</p><br><p class="body">The selection is truly random, like <a href="Tabug_setrandomseed.htm">SetRandomSeed(0)</a>, so the results are not reproducible.</p><br><p class="body">This function has no effect on the randomization state of the calling<br>program.</p><br><h2>Example</h2><br><p class="body">The following script generates a password that is between 10 and<br>16 characters long and contains a random selection of digits and lower-case<br>letters:</p><br><pre class="codeblock">Dim MyPassword<br><br>MyPassword = RandomPassword("[a-z0-9]", 10, 16)</pre><br>',info:'',ex:''}},
// {id:'DefineValues',group:'func',sub:'',descr:{name:'',descr:'',info:'',ex:''}},
{id:'Abs',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Abs</h1><br><p class="body">Returns the absolute value of a number.</p><br><pre class="syntaxblock"><span class="code-required">Abs(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> with any negative<br>sign removed.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="italic">Val</span> is negative, the return<br>value is -<span class="italic">Val</span>, otherwise the<br>return value is <span class="italic">Val</span>. If the current<br>data value is NULL, <span class="italic">Val</span> is 0.0<br>and the return value is 0.0.</p><br><p class="body">This function is similar to the Abs function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Abs function to get the absolute value of two numbers:</p><br><pre class="codeblock">Dim MyPositiveNumber, MyNegativeNumber<br><br>MyPositiveNumber = Abs(150)       &#39 Returns 150<br>MyNegativeNumber = Abs(-150)      &#39 Returns 150</pre><br>',info:'',ex:''}},
{id:'Sgn',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Sgn</h1><br><p class="body">Returns an integer that indicates the sign of a number. The function<br>returns 1 if the number is greater than 0, 0 if it is equal to 0,<br>and -1 if it is less than zero. </p><br><pre class="syntaxblock"><span class="code-required">Sgn(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1, 0, or -1,         depending on whether <span class="italic">Val</span> is positive, 0, or negative.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.</p><br><p class="body">This function is similar to the Sgn function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Sgn function to determine the sign of a number:</p><br><pre class="codeblock">Dim Positive, Zero, Negative<br><br>Positive = Sgn(50.05)        &#39 Returns 1<br>Zero = Sgn(0)                &#39 Returns 0<br>Negative = Sgn(-10)          &#39 Returns -1</pre><br>',info:'',ex:''}},
{id:'Int',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Int</h1><br><p class="body">Returns the integer portion of a number. </p><br><pre class="syntaxblock"><span class="code-required">Int(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The greatest         integer that is less than or equal to <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">An error occurs if <span class="italic">Val</span> is<br>outside the range of integer values that can be stored in the Long<br>data type (-2,147,483,648 to 2,147,483,647). If the current data value<br>is NULL, <span class="italic">Val</span> is 0.0 and the return<br>value is 0. </p><br><p class="body">This function is similar to the Int function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Int function to return the integer portion of a number:</p><br><pre class="codeblock">Dim MyInteger1, MyInteger2, MyInteger3<br><br>MyInteger1 = Int(9.88)              &#39 Returns 9<br>MyInteger2 = Int(-9.88)             &#39 Returns -10<br>MyInteger3 = Int(12345678901234.89) &#39 Error</pre><br>',info:'',ex:''}},
{id:'Sqrt',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Sqrt</h1><br><p class="body">Returns the square root of a number.</p><br><pre class="syntaxblock"><span class="code-required">Sqrt(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value greater than or         equal to zero. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Square root of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The square root is the number that when multiplied by itself gives <span class="italic">Val</span>.</p><br><p class="body">An error occurs if <span class="italic">Val</span> is<br>negative. If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.0. </p><br><p class="body">This function is similar to the Sqr function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Sqrt function to return the square root of a number:</p><br><pre class="codeblock">Dim MyValue1, MyValue2, MyValue3<br><br>MyValue1 = Sqrt(9)    &#39 Returns 3<br>MyValue2 = Sqrt(3)    &#39 Returns 1.73205080756888<br>MyValue3 = Sqrt(-3)   &#39 Error</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Sin',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Sin</h1><br><p class="body">Returns the sine of an angle. </p><br><pre class="syntaxblock"><span class="code-required">Sin(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value that represents         an angle in radians. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Sine of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The Sin function takes an angle and returns the ratio of two sides<br>of a right-angled triangle. The ratio is the length of the side opposite<br>the angle divided by the length of the hypotenuse.</p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.0.</p><br><p class="body">This function is similar to the Sin function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Sin function to get the sine of an angle:</p><br><pre class="codeblock">Dim MySine<br>MySine = Sin(2.7)       &#39 Returns 0.42737988023383<br></pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Cos',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Cos</h1><br><p class="body">Returns the cosine of an angle. </p><br><pre class="syntaxblock"><span class="code-required">Cos(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value that represents         an angle in radians. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Cosine of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The Cos function takes an angle in a right-angled triangle and<br>returns a value that corresponds to the length of the side adjacent<br>to the angle divided by the length of the hypotenuse.</p><br><p class="body">If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 1.0.</p><br><p class="body">This function is similar to the Cos function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Cos function to get the cosine of an angle:</p><br><pre class="codeblock">Dim MyCosine<br><br>MyCosine = Cos(2.7)     &#39 Returns -0.904072142017061</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Tan',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Tan</h1><br><p class="body">Returns the tangent of an angle. </p><br><pre class="syntaxblock"><span class="code-required">Tan(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value that represents         an angle in radians. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Tangent of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">Tan is used to return the ratio of two sides of a right-angled<br>triangle, relative to one of the smaller angles. The ratio is the<br>length of the side opposite the angle divided by the length of the<br>side adjacent to the angle.</p><br><p class="body">An error occurs if <span class="italic">Val</span> is<br>an odd multiple of pi/2 (for example, -pi/2, pi/2, 3pi/2, etc.). If<br>the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.0.</p><br><p class="body">This function is similar to the Tan function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Tan function to get the tangent of an angle:</p><br><pre class="codeblock">Dim MyTangent<br><br>MyTangent = Tan(1.37340076694502)  &#39 Returns 5.0000000000001</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Atn',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Atn</h1><br><p class="body">Returns the arctangent of a number. </p><br><pre class="syntaxblock"><span class="code-required">Atn(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value that represents         the ratio of the two<br>shorter sides of a right-angled triangle. (The ratio is         the<br>length of the side opposite a particular angle divided by the length<br>of the         side adjacent to the angle.) </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Arctangent of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the angle in radians whose tangent is <span class="italic">Val</span> and which is in the range -pi/2 to pi/2.<br>If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.0.</p><br><p class="body">This function is similar to the Atn function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Atn function to get the arctangent of a number that represents the<br>ratio of two sides of a right-angled triangle:</p><br><pre class="codeblock">Dim MyArcTangent<br><br>MyArcTangent = Atn(12.0/5.0)   &#39 Returns 1.17600520709514</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Exp',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Exp</h1><br><p class="body">Returns <span class="italic">e</span> (the base of natural<br>logarithms) raised to a power. </p><br><pre class="syntaxblock"><span class="code-required">Exp(</span><span class="parameter">Val</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">e</span> to the power of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is <span class="italic">e</span> (the<br>base of natural logarithms) raised to the power of <span class="italic">Val</span>. If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 1.0. </p><br><p class="body">When <span class="italic">Val</span> is a large number,<br>the return value can have more digits than can be accurately represented<br>by the Double data type. However, the function does not check for<br>this and does not issue an error when this happens. This function<br>is therefore unsuitable for use with positive values greater than<br>about 709 or negative values less than about -745. </p><br><p class="body">This function is similar to the Exp function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Exp function to return <span class="italic">e </span>raised<br>to a power:</p><br><pre class="codeblock">Dim MyNumber, MyBigNumber1, MyBigNumber2, MyBigNegativeNumber1, MyBigNegativeNumber2<br><br>MyNumber = Exp(1.32581766366803)         &#39 Returns 3.76526281526936<br>MyBigNumber1 = Exp(709.782712893)        &#39 Returns 1.79769313417214E+308<br>MyBigNumber2 = Exp(709.782712894)        &#39 Returns 1.#INF, which indicates "overflow"<br>MyBigNegativeNumber1 = Exp(-744.44007)   &#39 Returns 4.94065645841247E-324<br>MyBigNegativeNumber2 = Exp(-745.2)       &#39 Returns 0, which indicates "underflow"</pre><br><p class="body">The next example demonstrates using the Exp and <a href="log.htm">Log</a> functions to return <span class="italic">x</span> to the<br>power of <span class="italic">y</span> (when <span class="italic">x</span> is greater than zero):</p><br><pre class="codeblock">Dim x, y, XToThePowerOfY<br><br>XToThePowerOfY = Exp(Log(x) * y)</pre><br><p class="body">Note that this example is not suitable when <span class="italic">x</span> is negative because the parameter to the Log function<br>must be a positive number.</p><br><p class="body">The next example demonstrates using the Exp and <a href="log.htm">Log</a> functions to return the cube root of <span class="italic">x</span>:</p><br><pre class="codeblock">Dim x, CubeRootOfX<br><br>If x &gt; 0 Then<br>   CubeRootOfX = Exp(Log(x) / 3)<br>ElseIf x &lt; 0 Then<br>   CubeRootOfX = - Exp(Log(-x) / 3)<br>Else <br>   CubeRootOfX = 0<br>End If</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br>',info:'',ex:''}},
{id:'Log',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Log</h1><br><p class="body">Returns the logarithm of a number.</p><br><pre class="syntaxblock"><span class="code-required">Log(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Base</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">A numeric value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Base</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The base for the logarithm. If omitted or &lt;= 0.0, <span class="italic">e</span> is used.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Logarithm of <span class="italic">Val</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The logarithm is the power to which <span class="italic">Base</span> must be raised to get <span class="italic">Val</span>.<br>If <span class="italic">Base</span> is not specified, base <span class="italic">e</span> is used to return the natural logarithm<br>of <span class="italic">Val</span>. Base <span class="italic">e</span> is approximately 2.718282.</p><br><p class="body">An error occurs if <span class="italic">Val</span> is<br>negative or if <span class="italic">Base</span> is 1.0 (as<br>1.0 raised to any power is always 1.0). If <span class="italic">Val</span> is 0.0, the return value is 0.0. If the current data<br>value is NULL, <span class="italic">Val</span> is 0.0 and<br>the return value is 0.0.</p><br><p class="body">This function is similar to the Log function in VBScript.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Log function to return the natural logarithm of 15, and the logarithm<br>of 15 to the base of 10:</p><br><pre class="codeblock">Dim MyNaturalLogarithm, MyLog10<br><br>MyNaturalLogarithm = Log(15)    &#39 Returns 2.70805020110221<br><br>MyLog10 = Log(15, 10)           &#39 Returns 1.17609125905568</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.7 or later</p><br><p class="body">Data Model 3.0 or later for specifying a base other than <span class="italic">e</span><br></p><br>',info:'',ex:''}},
{id:'MaxOf',group:'func',sub:'',descr:{name:'',descr:'<br><h1>MaxOf</h1><br><p class="body">Returns the highest value from a list of values. </p><br><pre class="syntaxblock"><span class="code-required">MaxOf(</span><span class="parameter">Val1</span> [, <span class="parameter">Vals, ...</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The maximum of all values.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The MaxOf function compares non-null values and returns the highest<br>value. If all values are null, the return value is null. If no other<br>values are supplied, the return value is <span class="name">Val1</span>. For values of type Object, the value of the object&#39s default property<br>is used.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>MaxOf function to get the highest of a number of values:</p><br><pre class="codeblock">MaxOf(8, 9.2, 24, 1.75)<br></pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'MinOf',group:'func',sub:'',descr:{name:'',descr:'<br><h1>MinOf</h1><br><p class="body">Returns the lowest value from a list of values. </p><br><pre class="syntaxblock"><span class="code-required">MinOf(</span><span class="parameter">Val1</span> [, <span class="parameter">Vals, ...</span>]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">First data value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Vals</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Variable number of other values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The minimum of all values.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The MinOf function compares non-null values and returns the lowest<br>value. If all values are null, the return value is null. If no other<br>values are supplied, the return value is <span class="name">Val1</span>. For values of type Object, the value of the object&#39s default property<br>is used.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>MinOf function to get the lowest of a number of values:</p><br><pre class="codeblock">MinOf(8, 9.2, 24, 1.75)<br></pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 2.10 or later</p><br>',info:'',ex:''}},
{id:'Pow',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Pow</h1><br><p class="body">Returns the value of a number raised to a power.</p><br><pre class="syntaxblock"><span class="code-required">Pow(</span><span class="parameter">Val1</span><span class="code-required">, </span><span class="parameter">Val2</span><span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The base value. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val2</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The exponent value.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val1</span> to the power of <span class="italic">Val2</span>.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is <span class="italic">Val1</span> raised<br>to the power of <span class="italic">Val2</span>. If <span class="italic">Val1</span> is 0.0, the return value is 0.0. If<br>the current data value is NULL, <span class="italic">Val1</span> is 0.0 and the return value is 0.0. If <span class="italic">Val1</span> is &lt; 0, an error occurs if <span class="italic">Val2</span> is not an integer value.</p><br><p class="body">When <span class="italic">Val1</span> or <span class="italic">Val2</span> are large numbers, the return value<br>can have more digits than can be accurately represented by the Double<br>data type. However, the function does not check for this and does<br>not issue an error when this happens.</p><br><h2>Example</h2><br><p class="body">The following mrScriptBasic example uses the<br>Pow function to return the result of 10 raised to the power of 3:</p><br><pre class="codeblock">Dim MyVariable<br><br>MyVariable = Pow(10, 3)    &#39 Returns 1000</pre><br>',info:'',ex:''}},
{id:'Round',group:'func',sub:'',descr:{name:'',descr:'<br><h1>Round</h1><br><p class="body">Returns a number rounded to a specified number of decimal places<br>or significant digits.</p><br><pre class="syntaxblock"><span class="code-required">Round(</span><span class="parameter">Val</span> [<span class="code-required">, </span><span class="parameter">Digits</span> [<span class="code-required">, </span><span class="parameter">Policy</span>]]<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The value to be rounded. </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Digits</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The number of decimal places or significant digits<br>in the result. Treated as 0 if omitted or is &lt; 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Policy</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Long</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Optional. The type of rounding to use as described in the table<br>below. Treated as 0 if omitted or is &lt; 0.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Double</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="italic">Val</span> rounded as specified.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The return value is the number nearest to <span class="italic">Val</span> with either the required number of digits after the<br>decimal point or the required number of significant digits, depending<br>on <span class="italic">Policy</span>. If <span class="italic">Policy</span> is 0, <span class="italic">Val</span> is rounded to the number of decimal places specified by <span class="italic">Digit</span>. If <span class="italic">Policy</span> is 0 and <span class="italic">Val</span> is exactly halfway<br>between two possible rounded values (a "borderline" case) then this<br>function performs <span class="definedword">round to even</span>. This means that of the two possible rounded values, the one that<br>has an even number as the last significant digit is returned. For<br>example, 15.25 is rounded to 15.2 rather than 15.3.</p><br><p class="body"><br><span class="italic">Policy</span> can also be set to<br>any combination of the values in the following table. To combine values,<br>add them together:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Value</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Description</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round <span class="italic">Val</span> to a number<br>of significant digits rather than to a number of decimal places.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If <span class="italic">Val</span> is exactly halfway<br>between the two nearest values of the required precision, round to<br>the higher value rather than rounding to even. However, if value 4<br>below is also set, round to the lower value of the two nearest values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If <span class="italic">Val</span> is exactly halfway<br>between the two nearest values of the required precision, round to<br>odd rather than rounding to even. However, if value 2 above is also<br>set, round to the lower of the two nearest values.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">If <span class="italic">Val</span> is negative and<br>exactly halfway between the two nearest values of the required precision,<br>round the absolute value and make its sign negative. If this value<br>is set, "higher" and "lower" in values 2 and 4 above means "having<br>a larger absolute value" and "having a smaller absolute value" respectively.<br>This value has no effect if value 2 is not set.</td></tr></tbody></table><p class="body">If <span class="italic">Val</span> is 0.0, the return<br>value is 0.0. If the current data value is NULL, <span class="italic">Val</span> is 0.0 and the return value is 0.0.</p><br><p class="body">If <span class="italic">Digits</span> is 0 and <span class="italic">Policy</span> is 0 or an even number, <span class="italic">Val</span> is rounded to an integer. If <span class="italic">Digits</span> is 0 and <span class="italic">Policy</span> is an odd number, <span class="italic">Val</span> is rounded to one significant digit.</p><br><h2>Examples</h2><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Val </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Digits </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Notes</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.57</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 2 decimal places</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">28.613</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">28.6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 1 decimal place</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.75</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to even</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.85</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to even</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">NULL</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1235</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to an integer</td></tr></tbody></table><p class="body"></p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Function call </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Val </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Digits </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Policy</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Result</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Notes</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.568</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 3 decimal places</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1230</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 3 significant digits</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.57</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 6 significant digits</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1234.5678</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1000</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Rounded to 1 significant digit</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.85</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">0</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to even</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.85</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">62.9</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to higher value</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-62.85</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-62.8</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to higher value</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-62.85</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">6</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-62.9</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to lower value</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">135</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">140</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to even</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">135</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">5</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">130</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to odd</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-107.135</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-107.13</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to higher value</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Round(Val, Digits, Policy)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-107.135</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">10</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">-107.14</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Borderline case, rounded to absolute higher value and made<br>negative</td></tr></tbody></table><p class="body">The following mrScriptBasic example sets variable <span class="italic">myResult</span> to the value of <span class="italic">myVariable</span> rounded to two decimal places:</p><br><pre class="codeblock">Dim myVariable, myResult<br><br>myVariable = 255.2914<br><br>myResult = myVariable.Round(2)    &#39 Returns 255.29</pre><br><h2>Requirements</h2><br><p class="body">IBM®<br>SPSS® Data Collection Data Model 3.0 or later</p><br>',info:'',ex:''}},
{id:'FlipGrid',group:'func',sub:'',descr:{name:'',descr:'<br><h1>FlipGrid</h1><br><p class="body">Retrieves flipped data from <span class="name">SourceGrid</span>. <span class="name">SourceGrid</span> contains the originally<br>collected data; <span class="name">DestinationGrid</span> (used for <span class="code">OnNextCase</span> events)<br>stores the flipped data.</p><br><pre class="syntaxblock"><span class="code-required">FlipGrid(</span>SourceGrid, DestinationGrid, QuestionNameForFlip,IterationFilter<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks </th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SourceGrid</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object  </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grid question </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DestinationGrid</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grid question </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">QuestionNameForFlip</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The categorical question name for being flipped (optional).</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IterationFilter</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical for iteration filter. The default is NULL.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if the flip is successful.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• When <span class="name">DestinationGrid</span> is a categorical loop with only one nested categorical question,<br>and <span class="name">SourceGrid</span> is a categorical<br>loop, which may have more than one question but has at least one categorical<br>question, the flipping only occurs for the categorical question <span class="name">QuestionNameForFlip</span>. If the question name <span class="name">QuestionNameForFlip</span> is not specified, the<br>flip occurs for the first nested categorical question.</p><br><p class="bullet">• There may be some iteration categories for <span class="name">DestinationGrid</span> that do not exist in the question<br>categories for sub-questions in <span class="name">SourceGrid</span>, or there may be some question categories in the sub-questions for <span class="name">DestinationGrid</span> that do not exist in the iteration<br>categories for <span class="name">SourceGrid</span>. This<br>function only flips for:</p><br><p class="bullet">• The common categories between the <span class="name">DestinationGrid</span> sub-question categories and the <span class="name">SourceGrid</span> iteration categories.</p><br><p class="bullet">• The common categories between the <span class="name">DestinationGrid</span> iteration categories and <span class="name">SourceGrid</span> sub-question categories.</p><br><p class="body">If the <span class="name">DestinationGrid</span> sub-question<br>response values are null after being flipped, they are assigned to<br>the NA category (if the question has one).</p><br><h2>Example</h2><br><pre class="codeblock">FlipGrid(myTestLoop, MyFlipLoop, "Grid", null)</pre><br><p class="body">The definitions for <span class="code">myTestLoop</span> and <span class="code">MyFlipLoop</span> are as follows:</p><br><pre class="codeblock"><span class="code-required">MyTestLoop</span> "For the following products,please indicate your opinion?" loop<br>    {<br>        A "Product A",<br>        B "Product B",<br>        C "Product C",<br>        D "Product D"<br>    } fields -<br>    (<br>        Grid "Preference"     categorical [1..1]<br>        {<br>            Like "Like",<br>            LikeABit -,<br>            Dislike "Dislike",<br>            SourceNa - NA<br>        };<br><br>    ) expand grid; <br><br> <span class="code-required">MyFlipLoop</span> - loop<br>    {<br>        Like -,<br>        LikeABit -,<br>        Dislike -<br>    } fields -<br>    (<br>        Type "Type"        categorical [1..]<br>        {<br>            A -,<br>            B -,<br>            C -,<br>            D -<br>        };<br><br>    ) expand grid;<br></pre><br><p class="body">For the current record, the value for <span class="code">MyTestLoop</span> is as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Grid</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{B}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{C}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{LikeABit}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{D}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ LikeABit }</td></tr></tbody></table><p class="body">The value for <span class="code">MyFlipLoop</span> is<br>as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Type</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Like }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ B }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ LikeABit }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{C,D}</td></tr></tbody></table><pre class="codeblock">FlipGrid(myTestLoop, MyFlipLoop, "Grid", {Like,Dislike})</pre><br><p class="body">The value for <span class="code">MyFlipLoop</span> is<br>as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Type</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Like }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ B }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td></tr></tbody></table>',info:'',ex:''}},
{id:'CreateGridSummary',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CreateGridSummary</h1><br><p class="body">Creates a summary result for a grid (used for <span class="code">OnNextCase</span> events).</p><br><pre class="codeblock"><span class="code-required">CreateGridSummary (</span>Grid, SummaryVarible, SummaryCategories, QuestionNameForSummary<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="33.33333333333333%"><br><col width="33.666666666666664%"><br><col width="33%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grid</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The summarized grid question.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SummaryVariable</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The categorical question for saving summary results.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SummaryCategories</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">None</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The category list for calculating summary results.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">QuestionNameForSummary</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Text</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of sub-question in the summarized grid.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The function creates the summarized results for grid sub-questions<br>and saves the results to the categorical question <span class="name">SummaryVariable</span>. There can be more than one sub-question; <span class="name">QuestionNameForSummary</span> is the only sub-question<br>that is summarized.</p><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• The grid iteration categories are the same as defined<br>categories for the categorical question <span class="name">SummaryVariable</span>.</p><br><h2>Example</h2><br><pre class="codeblock">CreateGridSummary (BrandsGrid, TopBrand2, {A,B}, "Rating")</pre><br><p class="body"></p><br><pre class="codeblock"><span class="code-required">BrandsGrid</span> "BrandsGrid" loop<br>{<br>    BrandA "BrandA",<br>    BrandB "BrandB",<br>    BrandC "BrandC",<br>    BrandD "BrandD" <br>} fields -<br>(<br>    Rating "Rating"    categorical [1..]<br>    {<br>        A "_1",<br>        B "_2",<br>        C "_3",<br>        D "_4",<br>        E "_5"<br>    };<br><br>    LongRating "Rating"   long [0 .. 10];<br><br>    TextRating "Rating"     text [10..10];<br><br>) expand grid;<br><br><span class="code-required">BrandTop</span> "Top 2 summary Brand" categorical[1..]<br>{<br>    BrandA "BrandA",<br>    BrandB "BrandB",<br>    BrandC "BrandC",<br>    BrandD "BrandD" <br>}<br></pre><br><p class="body">The value for <span class="code">BrandsGrid</span> is<br>as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center" valign="top">A</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center" valign="top">B</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center" valign="top">C</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center" valign="top">D</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center" valign="top">E</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">BrandA</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">BrandB</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">BrandC</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">BrandD</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center">√</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="center"> </td></tr></tbody></table><p class="body">The value for the question <span class="code">TopBrand2</span> is:</p><br><pre class="codeblock">{BrandA, BrandB, BrandD}</pre><br>',info:'',ex:''}},
{id:'CopyGrid',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CopyGrid</h1><br><p class="body">Transfers data from <span class="name">SourceGrid</span> to <span class="name">DestinationGrid</span> (used for <span class="code">OnNextCase</span> events). <span class="name">SourceGrid</span> contains the originally collected data, while <span class="name">DestinationGrid</span> stores the copied data. <span class="name">IterationFilter</span> restricts iterations copied<br>for <span class="name">DestinationGrid</span>.</p><br><pre class="syntaxblock"><span class="code-required">CopyGrid(</span>SourceGrid, DestinationGrid, IterationFilter<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Parameter</span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Type </span></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="runinhead">Remarks </span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">SourceGrid</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grid question</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">DestinationGrid</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Grid question</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">IterationFilter</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical for iteration filter</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if copy is successful</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">If <span class="name">IterationFilter</span> is null, data transfer from <span class="name">SourceGrid</span> to <span class="name">DestinationGrid</span> will be processed<br>according to the iterations for <span class="name">DestinationGrid</span>, otherwise according to the iterations in <span class="name">IterationFilter</span>.</p><br><p class="body">There may be some iterations or sub-questions in <span class="name">DestinationGrid</span> that do not exist in <span class="name">SourceGrid</span>. This function only copies the<br>common iterations and sub-questions in <span class="name">DestinationGrid</span> and <span class="name">SourceGrid</span>.</p><br><h2>Example</h2><br><pre class="codeblock">CopyGrid(Loop1, LoopForCopy, Null)<br></pre><br><p class="body">The definitions for <span class="code">Loop1</span> and <span class="code">LoopForCopy</span> are as follows:</p><br><pre class="codeblock"><span class="code-required">Loop1</span> - loop<br>    {<br>        A -,<br>        B -,<br>        C -,<br>        D -<br>    } fields -<br>    (<br><br>       Q1 "LikeOrNot"     categorical [1..1]<br>        {<br>            Like -,<br>            Dislike -<br>        };<br>       Q2 Text[20];<br>       Q3 Long[1..5];<br>        <br>    ) expand grid;<br> <br> <span class="code-required">LoopForCopy</span> - loop<br>    {<br>        B -,<br>        A -,<br>        D -<br>    } fields -<br>    (<br>       Q2 Text[20];<br>       Q1 "LikeOrNot"     categorical [1..1]<br>        {<br>            Like -,<br>            Dislike -<br>        };<br>        <br>    ) expand grid;<br></pre><br><p class="body">For the current record, the value for <span class="code">Loop1</span> is as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="24.5%"><br><col width="25.25%"><br><col width="25%"><br><col width="25.25%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q1</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q2</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q3</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am testing</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{B}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">2</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{C}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Dislike}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">3</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{D}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am t</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">4</td></tr></tbody></table><p class="body">The value for <span class="code">LoopForCopy</span> is<br>as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q2</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q1</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am testing</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{B}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{D}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am t</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td></tr></tbody></table><pre class="codeblock">CopyGrid(Loop1, LoopForCopy, {A,B})</pre><br><p class="body">Based on the above value for <span class="code">Loop1</span>, the value for <span class="code">LoopForCopy</span> will<br>be as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">LevelID</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q2</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Q1</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{A}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am testing</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Dislike }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{B}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">I am</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Like}</td></tr></tbody></table><h2>Performance note</h2><br><p class="body"><br><span class="code">CopyGrid</span> can transfer data between<br>grids for many scenarios. The grid may contain any type of question<br>(single response, compound, block, nested grid, and so on). Use the<br>following script example for better performance when the grid being<br>copied has only one nested question:</p><br><pre class="codeblock">For Each Iteration In Grid1<br>     Grid1_Copy[Iteration.QuestionName].Item[0].Response = Iteration.Item[0]<br>Next<br></pre><br>',info:'',ex:''}},
{id:'FlattenGrid',group:'func',sub:'',descr:{name:'',descr:'<br><h1>FlattenGrid</h1><br><p class="body">Converts categorical loop sub-questions (both grid and non-grid)<br>into flattened questions that can be used in the DMOM event<span class="code">OnBeforeJobStart/OnAfterMetaDataTransformation</span>.</p><br><pre class="syntaxblock"><span class="code-required">FlattenGrid(</span>FlattenQuestionFullName, FilterIteration, MDMObject<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FlattenQuestionFullName </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="name">FullName</span> for the question<br>being flattened </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">FilterIteration</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">String for the iteration filter </td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MDMObject</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MDM object related to the .<span class="name">mdd</span> file that contains <span class="name">GridObjectName</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True if the function is successful.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The generated questions are saved on the top level in the .<span class="name">mdd</span> file related to <span class="name">MDMObject</span>. The policy for avoiding duplicate question<br>names is to append <span class="code">_1</span>, <span class="code">_2</span>, <span class="code">_n</span> to<br>the default question name.</p><br><h2>Examples</h2><br><pre class="codeblock">FlattenGrid("MyLoopCatQuestion.rating", Null, MDMObject)<br></pre><br><p class="body">The definition for <span class="name">MyLoopCatQuestion</span> is as follows:</p><br><pre class="codeblock"><span class="code-required">MyLoopCatQuestion</span> - loop<br>    {<br>        A "A",<br>        B "B",<br>        C "C",<br>        D "D"<br>    } fields -<br>    (<br>        rating categorical [1..1]<br>        {<br>            LikeABit "LikeABit",<br>            Like "Like",<br>            Dislike "Dislike"<br>        };<br><br>    ) expand grid;<br></pre><br><p class="body">The generated, flattened questions are as follows:</p><br><pre class="codeblock"><span class="code-required">A_rating</span>     categorical <br> expression("MyLoopCatQuestion[{A}].rating");<br><br><span class="code-required">B_rating</span>    categorical <br> expression("MyLoopCatQuestion[{B}].rating");<br><br><span class="code-required">C_rating</span>     categorical <br> expression("MyLoopCatQuestion[{C}].rating");<br><br><span class="code-required">D_rating</span>    categorical <br> expression("MyLoopCatQuestion[{D}].rating");<br></pre><br><p class="body"></p><br><pre class="codeblock">FlattenGrid ("MyLoopCatQuestion.rating", "a,b", MDMObject)</pre><br><p class="body">Then newly created variables are as follows:</p><br><pre class="codeblock"><span class="code-required">A_rating</span>     categorical <br> expression("MyLoopCatQuestion[{A}].rating");<br><br><span class="code-required">B_rating</span>    categorical <br>expression("MyLoopCatQuestion[{B}].rating");<br></pre><br><p class="body"></p><br><pre class="codeblock">FlattenGrid ("ComplexLoop.Grid1", "a,b", MDMObject)</pre><br><p class="body">The definition for <span class="name">ComplexLoop</span> is as follows:</p><br><pre class="codeblock"><span class="code-required">ComplexLoop</span> - loop<br>    {<br>        A "A",<br>        B "B",<br>        C "C",<br>        D "D"<br>    } fields -<br>    (<br>        Grid1 - loop<br>        {<br>            1 "1",<br>            2 "2",<br>            3 "3"<br>        } fields -<br>        (<br>            rating    categorical [1..1]<br>            {<br>                ABitLike "ABitLike",<br>                Like "Like",<br>                Dislike "Dislike"<br>            };<br><br>        ) expand grid;<br><br>    ) expand grid;<br></pre><br><p class="body">The generated, flattened questions are as follows:</p><br><pre class="codeblock"><span class="code-required">ComplexLoop_A_1_rating</span>     categorical <br>expression("ComplexLoop[{A}].Grid1[{1}].rating");<br><br> <span class="code-required">ComplexLoop_A_2_rating</span>    categorical <br>expression("ComplexLoop[{A}].Grid1[{_2}].rating");<br><br> <span class="code-required">ComplexLoop_A_3_rating</span>     categorical <br>expression("ComplexLoop[{A}].Grid1[{_3}].rating");<br><br> <span class="code-required">ComplexLoop_B_1_rating</span>     categorical <br>expression("ComplexLoop[{B}].Grid1[{_1}].rating");<br><br> <span class="code-required">ComplexLoop_B_2_rating</span>     categorical <br>expression("ComplexLoop[{B}].Grid1[{_2}].rating");<br><br> <span class="code-required">ComplexLoop_B_3_rating</span>     categorical <br>expression("ComplexLoop[{B}].Grid1[{_3}].rating");<br></pre><br>',info:'',ex:''}},
{id:'SumQuestions',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SumQuestions</h1><br><p class="body">Sums the value for more than one categorical question (used for <span class="code">OnNextCase</span> events).</p><br><pre class="syntaxblock"><span class="code-required">SumQuestions(</span>TotalCat, CatVar1, CatVar2, CarVar3,,,<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks </th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">CatVar1 </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question. The number of questions varies, but there<br>should be at least two questions.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">CatVar2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question. The number of questions varies, but there<br>should be at least two questions.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TotalCat </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question. <span class="code">TotalCat.response.value=catVar1.response.value<br>+ catvar2.response.value</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="code">TotalCat.Response.Value</span></td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The question <span class="name">TotalCat</span> will sum<br>the <span class="code">response.value</span> of questions <span class="name">CatVar1</span>, <span class="name">CatVar2</span>, to <span class="name">CatVarN</span>. If there is only<br>one question, <span class="name">TotalCat</span> will have<br>the same value as <span class="name">CatVar1</span>.</p><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• All questions must be categorical.</p><br><p class="bullet">• Questions can contain special responses, such as <span class="code">DK / NA/ REF</span>, but the questions will be adjusted<br>to the related special response for <span class="code">CatVar1</span>.</p><br><h2>Example</h2><br><pre class="codeblock">SumQuestions(TotalSum4, Spont, Prompt1, Prompt2, Prompt3)</pre><br><p class="body">The definitions for <span class="code">TotalSum4</span>, <span class="code">Spont</span>, <span class="code">Prompt1</span>, <span class="code">Prompt2</span>,<br>and <span class="code">Prompt3</span> are as follows:</p><br><pre class="codeblock"><span class="code-required">TotalSum4</span> "What animal you like? (Do not read the list)"<br>    categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        SpontDK "SpontDK" DK,<br>        SpontREF "SpontREF" REF,<br>        SpontNA "SpontNA" NA<br>    };<br><br><br><br><span class="code-required">Spont</span> "What animal you like? (Do not read the list)" categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        SpontDK "SpontDK" DK,<br>        SpontREF "SpontREF" REF,<br>        SpontNA "SpontNA" NA<br>    };<br><br> <span class="code-required">Prompt1</span> "What animal you like? (read the list)"  categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        Prompt1DK "SpontDK" DK,<br>        Prompt1REF "SpontREF" REF,<br>        Prompt1NA "SpontNA" NA<br>    };<br><br> <span class="code-required">Prompt2</span> "What animal you like? (read the list)"  categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        Prompt2DK "SpontDK" DK,<br>        Prompt2REF "SpontREF" REF,<br>        Prompt2NA "SpontNA" NA<br>    };<br><br> <span class="code-required">Prompt3</span> "What animal you like? (read the list)"  categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        Prompt3DK "SpontDK" DK,<br>        Prompt3REF "SpontREF" REF,<br>        Prompt3NA "SpontNA" NA<br>    };<br></pre><br><p class="body">The related values are as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Question </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Case 1</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Case 2</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Spont</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ spontDK}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Giraffe}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt1DK }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt1NA}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Giraffe }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt2DK}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt3NA}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Giraffe}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">TotalSum4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Giraffe,SpontNA ,spontDK}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Giraffe,SpontNA,SpontDK}</td></tr></tbody></table>',info:'',ex:''}},
{id:'CombineIterations',group:'func',sub:'',descr:{name:'',descr:'<br><h1>CombineIterations</h1><br><p class=""body"">Combines the response value for nested grid question iterations<br>(used for <span class=""code"">OnNextCase</span> events).</p><br><pre class=""syntaxblock""><span class=""code-required"">CombineIterations(</span>CombineQuestion, CombineIterationName, CombineList<span class=""code-required"">)</span><br></pre><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col><col></colgroup><thead><tr><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Parameter </th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Type</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top""> Remarks</th></tr></thead><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">CombineQuestion </td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">object</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Grid question</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">CombineIterationName</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">string</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The iteration category that stores the combination results.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">CombineList</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Categorical</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">The iteration category items that determine the result.</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Return value</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">Boolean</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">True if the function is successful.</td></tr></tbody></table><h2>Remarks</h2><br><p class=""body"">Used to combine the value of sub-question(s) related to two iterations<br>(by union operation). The results are saved in the sub-question related<br>to another iteration named <span class=""name"">CombineIterationName</span>.</p><br><p class=""body"">There are restrictions when using this function:</p><br><p class=""bullet"">• <span class=""name"">CombineQuestion</span> is categorical loop.</p><br><p class=""bullet"">• The loop can contain more than one type of sub-question.<br>This function only process categorical questions.</p><br><p class=""bullet"">• Iteration <span class=""name"">CombineIterationName</span> should exist in question <span class=""name"">CombineQuestion</span> before the <span class=""code"">OnNextCase</span> event.<br>The iteration can be added via the .<span class=""name"">dms</span> script metadata.</p><br><h2>Example</h2><br><pre class=""codeblock"">CombineIterations(MyLoopCatQuestion, ""NetAorB"", {A,B})</pre><br><p class=""body""><br><span class=""code"">NetAorB</span> is one iteration category<br>for <span class=""name"">MyLoopCatQuestion</span>, and can<br>be added as follows:</p><br><pre class=""codeblock"">MetaData (ENU, Analysis, Label, myInputDataSource)<br>  <br>    MyLoopCatQuestion - loop<br>	{<br>	    <span class=""code-required"">NetAorB</span> ""Respondent chose either A or B""<br>	} fields -<br>	(<br>	    rating    categorical [1..1]<br>	    {<br>	        LikeABit ""LikeABit"" Factor(3),<br>	        Like ""Like"" Factor(2),<br>	        Dislike ""Dislike"" Factor(1)<br>	    };<br>	) expand grid;<br>	<br>End MetaData</pre><br><p class=""body"">After running the function, the results are as follows:</p><br><table class=""table"" cellspacing=""0"" border=""0"" style=""border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; ""><colgroup><col><col><col></colgroup><thead><tr><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Iteration Name</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Case 1</th><th class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"" valign=""top"">Case 2</th></tr></thead><tbody><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">A</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ ABitLike }</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ Dislike }</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">B</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ Like }</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ Dislike }</td></tr><tr><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">NetAorB</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ ABitLike , Like }</td><td class=""table-cell"" style=""border-right-style: solid; border-bottom-style: solid; "" align=""left"">{ Dislike }</td></tr></tbody></table>',info:'',ex:''}},
{id:'ReplaceCategory',group:'func',sub:'',descr:{name:'',descr:'<br><h1>ReplaceCategory</h1><br><p class="body">Replaces <span class="name">oldCategory</span> with <span class="name">newCategory</span> for a loop/categorical questions<br>(used for <span class="code">OnNextCase</span> events).</p><br><pre class="syntaxblock"><span class="code-required">ReplaceCategory(</span>Question, oldCategory, newCategory<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter </th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Question </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Category question or loop question.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">oldCategory</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Category item that will be replaced with <span class="name">newCategory</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">newCategory</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The new category value that replaces <span class="name">oldCategory</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">True when <span class="name">oldCategory</span> successfully<br>replaces <span class="name">newCategory</span>, otherwise<br>False</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">For each question, the <span class="name">oldCategory</span> can be an iteration category, a question category for a loop question,<br>or a category for categorical question.</p><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• When the question is a category question, <span class="name">oldCategory</span> and <span class="name">newCategory</span>  are the defined categories.</p><br><p class="bullet">• When the question is a loop question, <span class="name">oldCategory</span> can be in the iteration categories<br>or in the defined category items for the nested question.</p><br><h2>Example</h2><br><p class="body">The definitions for <span class="code">cat</span>, <span class="code">MyLoopCatQuestion</span>, and <span class="code">MyLoopLogicQuestion</span> are as follows:</p><br><pre class="codeblock"><span class="code-required">cat</span> "What animal you like?"categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        dontKnow "dontKnow",<br>        Serpent "Serpent"<br>    };<br><br> <span class="code-required">MyLoopCatQuestion</span> - loop<br>    {<br>        A "A",<br>        B "B",<br>        C "C",<br>        D "D"<br>    } fields -<br>    (<br>        rating  categorical [1..1]<br>        {<br>            Dog "Dog",<br>            Goldfish "Goldfish",<br>            Panda "Panda",<br>            Giraffe "Giraffe",<br>            snake "snake",<br>            Serpent " Serpent "<br>        };<br><br>    ) expand grid;<br><br> <span class="code-required">MyLoopLogicQuestion</span> - loop<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        Serpent " Serpent "<br>    } fields -<br>    (<br>        YesOrNo  categorical [1..1]<br>        {<br>            Yes "Yes",<br>            No "No"<br>        };<br><br>    ) expand grid;<br></pre><br><p class="body"></p><br><pre class="codeblock">ReplaceCategory(cat, "snake", "Serpent")</pre><br><p class="body">The related <span class="code">response.value</span> for<br>the question <span class="code">cat</span> is as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Before Replacement</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">After Replacement</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,snake,panda}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ dog,serpent,panda }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{giraffe,snake}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{giraffe,serpent}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,goldfish}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,goldfish}</td></tr></tbody></table><p class="body"></p><br><pre class="codeblock">ReplaceCategory(MyLoopCatQuestion, "snake", "Serpent")</pre><br><p class="body">The related <span class="code">response.value</span> for<br>the question <span class="code">MyLoopCatQuestion</span> is<br>as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col width="43.333333333333336%"><br><col width="29.666666666666668%"><br><col width="27%"><br></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Question</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Before Replacement</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">After Replacement</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MyLoopCatQuestion[{A}].Rating</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,snake,panda}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ dog,serpent,panda }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MyLoopCatQuestion[{B}].Rating</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{giraffe,snake}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{giraffe,serpent}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MyLoopCatQuestion[{C}].Rating</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,goldfish}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{dog,goldfish}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MyLoopCatQuestion[{D}].Rating</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{snake}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{serpent}</td></tr></tbody></table><p class="body"></p><br><pre class="codeblock">ReplaceCategory(MyLoopLogicQuestion, "snake", "Serpent")</pre><br><p class="body">After running the function, the value of all sub-questions for<br>iteration <span class="code">snake</span> are copied for<br>iteration <span class="code">serpent</span>.</p><br>',info:'',ex:''}},
{id:'RemoveCategory',group:'func',sub:'',descr:{name:'',descr:'<br><h1>RemoveCategory</h1><br><p class="body">Removes the deprecated <span class="name">OldCategory</span> from MDMObject (often used in the <span class="code">OnJobEnd</span> event).</p><br><pre class="syntaxblock"><span class="code-required">RemoveCategory(</span>MDMObject, QuestionName, OldCategory<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">MDMObject</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name for the MDM document that contains <span class="name">QuestionName</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">QuestionName </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The name of the question object from which <span class="name">oldCategory</span> will be removed.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">OldCategory</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">string</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">The category item being moved from <span class="name">QuestionName</span>.</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Boolean</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Returns True if moving <span class="name">oldCategory</span> is successful, otherwise returns False.</td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The category <span class="name">OldCategory</span> may<br>exist in defined categories for categorical questions, iteration categorical,<br>or defined question categories for loop questions.</p><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• The <span class="name">QuestionName</span> question type is categorical, loop numeric, or loop categorical.</p><br><h2>Example</h2><br><pre class="codeblock">RemoveCategory(mdmObject, "cat", "snake")</pre><br><p class="body">The following table illustrates changes after running the above<br>example:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Before Removing</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">After Removing</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">cat -    categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        snake -,<br>        DonKnow -<br>    };<br></pre><br></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">cat -   categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        DonKnow -<br>        <br>    };<br></pre><br></td></tr></tbody></table><pre class="codeblock">RemoveCategory(mdmObject, "MyLoopCatQuestion", "snake")</pre><br><p class="body">The following table illustrates changes after running the above<br>example:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Before Removing</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">After Removing</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">MyLoopCatQuestion - loop<br>    {<br>        A "A",<br>        B "B",<br>        C "C",<br>        D "D"<br>    } fields -<br>    (<br>        rating "rating"<br>        categorical [1..1]<br>        {<br>            Dog "Dog",<br>            Goldfish "Goldfish",<br>            snake "snake",<br>            Panda "Panda",<br>            Giraffe "Giraffe"<br>        };<br><br>    ) expand grid;<br></pre><br></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">MyLoopCatQuestion - loop<br>    {<br>        A "A",<br>        B "B",<br>        C "C",<br>        D "D"<br>    } fields -<br>    (<br>        rating "rating"<br>        categorical [1..1]<br>        {<br>            Dog "Dog",<br>            Goldfish "Goldfish",<br>            Panda "Panda",<br>            Giraffe "Giraffe"<br>        };<br><br>    ) expand grid;<br></pre><br></td></tr></tbody></table><pre class="codeblock">RemoveCategory(mdmObject, "MyLoopLogicQuestion", "snake")</pre><br><p class="body">The following table illustrates changes after running the above<br>example:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Before Removing</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">After Removing</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">MyLoopLogicQuestion - loop<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake"<br>    } fields -<br>    (<br>     YesOrNo  categorical [1..1]<br>     {<br>        Yes "Yes",<br>        No "No"<br>        };<br><br>    ) expand grid;<br></pre><br></td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><pre class="codeblock">MyLoopLogicQuestion - loop<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe"<br>        <br>    } fields -<br>    (<br>     YesOrNo  categorical [1..1]<br>     {<br>        Yes "Yes",<br>        No "No"<br>        };<br><br>    ) expand grid;<br></pre><br></td></tr></tbody></table>',info:'',ex:''}},
{id:'SubstractQuestion',group:'func',sub:'',descr:{name:'',descr:'<br><h1>SubtractQuestion</h1><br><p class="body">Subtracts the values for one or more questions (used for <span class="code">OnNextCase</span> events). </p><br><pre class="syntaxblock"><span class="code-required">SubtractQuestion(</span>ResultCat, CatVar1, CatVar2,...<span class="code-required">)</span><br></pre><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Parameter</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Type</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top"> Remarks</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">CatVar1 </td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">CatVar2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">ResultCat</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">object</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical question. <span class="code">ResultCat.Response.value<br>= catVar1.Response.Value - catVar2.Response.Value-…-catVarN.Response.Value</span></td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">(return)</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Categorical</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left"><span class="code">ResultCat.Response.Value</span></td></tr></tbody></table><h2>Remarks</h2><br><p class="body">The value for question being subtracted from the first question<br>(<span class="name">CatVar1</span>) can be zero. In this<br>case, the <span class="name">ResultCat</span> value is same<br>as the <span class="name">CatVar1</span> value.</p><br><p class="body">There are restrictions when using this function:</p><br><p class="bullet">• Questions can contain special responses, such as <span class="code">DK / NA/ REF</span>, but the questions will be adjusted<br>to the related special response for <span class="code">CatVar1.</span><br></p><br><h2>Example</h2><br><pre class="codeblock">SubtractQuestion(Result4, Spont, Prompt1, Prompt2, Prompt3)</pre><br><p class="body">The definitions for <span class="code">Result4</span>, <span class="code">Spont</span>, <span class="code">Prompt1</span>, <span class="code">Prompt2</span>, and <span class="code">Prompt3</span> are as follows:</p><br><pre class="codeblock"><span class="code-required">Spont</span>     categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        snake -,<br>        SpontDK - DK,<br>        SpontREF - REF,<br>        SpontNA - NA<br>    };<br><br>    <span class="code-required">Prompt1</span>    categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        snake -,<br>        Prompt1DK - DK,<br>        Prompt1REF - REF,<br>        Prompt1NA - NA<br>    };<br><br>    <span class="code-required">Prompt2</span>     categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        snake -,<br>        Prompt2DK - DK,<br>        Prompt2REF - REF,<br>        Prompt2NA - NA<br>    };<br><br>    <span class="code-required">Prompt3</span>     categorical [1..]<br>    {<br>        Dog -,<br>        Goldfish -,<br>        Panda -,<br>        Giraffe -,<br>        snake -,<br>        Prompt3DK - DK,<br>        Prompt3REF - REF,<br>        Prompt3NA - NA<br>};<br><span class="code-required">Result4</span> "What animal you like? (Do not read the list)"    categorical [1..]<br>    {<br>        Dog "Dog",<br>        Goldfish "Goldfish",<br>        Panda "Panda",<br>        Giraffe "Giraffe",<br>        snake "snake",<br>        SpontDK "SpontDK" DK,<br>        SpontREF "SpontREF" REF,<br>        SpontNA "SpontNA" NA<br>    };<br></pre><br><p class="body">The related values are as follows:</p><br><table class="table" cellspacing="0" border="0" style="border-collapse: collapse;border-top-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-style: solid; "><colgroup><col><col><col></colgroup><thead><tr><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Question</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Case 1</th><th class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left" valign="top">Case2</th></tr></thead><tbody><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Spont</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ SpontRef }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{SpontDK}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt1</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{snake,Griaffe,Goldfish }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt1DK}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt2</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ dog,goldfish,giraffe }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{Prompt2NA}</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Prompt3</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{giraffe,dog}</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ Prompt3NA }</td></tr><tr><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">Result4</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ SpontRef }</td><td class="table-cell" style="border-right-style: solid; border-bottom-style: solid; " align="left">{ }</td></tr></tbody></table>',info:'',ex:''}},

]

export {
    funcData
}